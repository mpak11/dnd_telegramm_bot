// D&D Telegram Bot - –í–µ—Ä—Å–∏—è 2.0
// –ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π

require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const config = require("./config/config");
const { setupCommands } = require("./commands");
const { setupMiddleware } = require("./middleware");
const { log } = require("./utils/logger");
const questScheduler = require("./systems/questScheduler");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(config.BOT_TOKEN);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if (!config.BOT_TOKEN) {
  log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env!", "error");
  process.exit(1);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
setupMiddleware(bot);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
setupCommands(bot);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  log(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}: ${err.message}`, "error");
  console.error(err);
});

// Graceful shutdown
async function stopBot(signal) {
  log(`\nüìõ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...`, "warning");

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
  try {
    const db = require("./database");
    await db.close();
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: ${error.message}`, "error");
  }
  questScheduler.stop();

  await bot.stop(signal);
  log("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "success");
  process.exit(0);
}

process.once("SIGINT", () => stopBot("SIGINT"));
process.once("SIGTERM", () => stopBot("SIGTERM"));

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    log("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º D&D –±–æ—Ç–∞...", "info");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const db = require("./database");
    await db.connect();
    await db.initialize();
    questScheduler.init(bot);

    await bot.launch({
      dropPendingUpdates: true,
    });

    log("üé≤ D&D –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!", "success");
    log(`üì± –†–µ–∂–∏–º: ${config.NODE_ENV}`, "info");
    log("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n", "info");
  } catch (error) {
    log(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞–ø—É—Å–∫–∞: ${error.message}`, "error");
    console.error(error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();
