// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥

const { log } = require("../utils/logger");
const { escapeMarkdown } = require("../utils/markdown");
const { User, Character } = require("../database/models");
const characterCreation = require("../systems/characterCreation");
const questSystem = require("../systems/questSystem");
const db = require("../database");
const config = require("../config/config");
const tradeSystem = require("../systems/tradeSystem");
const lootSystem = require("../systems/lootSystem");
const tradeSessions = new Map();
const equipmentSystem = require("../systems/equipmentSystem");
const craftingSystem = require("../systems/craftingSystem");
const advancedMerchantSystem = require("../systems/advancedMerchantSystem");

function setupCommands(bot) {
  // –¢–ï–°–¢–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤–æ–æ–±—â–µ –¥–æ—Ö–æ–¥–∏—Ç
  bot.use(async (ctx, next) => {
    if (ctx.message && ctx.message.text) {
      log(
        `[TEST] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: "${ctx.message.text}" –æ—Ç ${ctx.from.id} –≤ —á–∞—Ç–µ ${ctx.chat.id} (—Ç–∏–ø: ${ctx.chat.type})`
      );
    }
    await next();
  });

  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  bot.command("start", handleStart);
  bot.command("help", handleHelp);
  bot.command("status", handleStatus);

  // –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  bot.command("create", handleCreateCharacter);
  bot.command("hero", handleShowCharacter);
  bot.command("inventory", handleShowInventory);
  bot.command("stats", handleShowStats);
  bot.command("delete", handleDeleteCharacter);
  bot.command("setname", handleSetName);
  bot.command("quickcreate", handleQuickCreate);
  bot.command("debug_chars", handleDebugCharacters);
  bot.command("graveyard", handleGraveyard);
  bot.command("improve", handleImprove);
  bot.command("improvements", handleImprovementHistory);

  // –ö–æ–º–∞–Ω–¥—ã –∫–≤–µ—Å—Ç–æ–≤
  bot.command("quest", handleShowQuest);
  bot.command("quests", handleListQuests);
  bot.command("getquest", handleGetQuest);

  // –ö–æ–º–∞–Ω–¥—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  bot.command("give", handleGive);
  bot.command("trade", handleTrade);
  bot.command("trades", handleActiveTrades);
  bot.command("chest", handleCreateChest);
  bot.command("use", handleUseItem);
  bot.command("gift", handleGift);

  // –ö–æ–º–∞–Ω–¥—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
  bot.command("equipment", handleEquipment);
  bot.command("equip", handleEquipment);
  bot.command("eq", handleEquipment);
  bot.command("equip_item", handleEquipItem);
  bot.command("unequip", handleUnequipItem);

  // –ö–æ–º–∞–Ω–¥—ã –º–∞–≥–∞–∑–∏–Ω–∞
  bot.command("shop", handleShop);
  bot.command("buy", handleBuy);
  bot.command("sell", handleSell);

  // –ö–æ–º–∞–Ω–¥—ã –∫—Ä–∞—Ñ—Ç–∞
  bot.command("craft", handleCraft);
  bot.command("recipes", handleRecipes);

  // –ö–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞
  bot.command("itemsearch", handleItemSearch);
  bot.command("iteminfo", handleItemInfo);

  // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  bot.command("admin", handleAdmin);
  bot.command("debug_sessions", handleDebugSessions);
  bot.command("test_name", handleTestName);
  bot.command("check_bot", handleCheckBot);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–î–û callback_query!)
  bot.on("text", async (ctx, next) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    const text = ctx.message.text;
    if (text.startsWith("/")) {
      return next();
    }

    log(
      `[Commands] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: "${text}" –æ—Ç ${ctx.from.id} –≤ —á–∞—Ç–µ ${ctx.chat.id}`
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    try {
      const handled = await characterCreation.handleNameInput(ctx);
      if (handled) {
        log(`[Commands] –¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`);
        return; // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
      }
    } catch (error) {
      log(`[Commands] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏: ${error.message}`, "error");
    }

    // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
    await next();
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
  bot.on("callback_query", async (ctx) => {
    const data = ctx.callbackQuery.data;

    log(`[Callback] –ü–æ–ª—É—á–µ–Ω callback: ${data} –æ—Ç ${ctx.from.id}`);

    // –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if (await characterCreation.handleCallback(ctx)) {
      return;
    }

    // –î—Ä—É–≥–∏–µ callbacks
    if (data === "create_character") {
      await handleCreateCharacter(ctx);
    } else if (data === "show_hero") {
      await handleShowCharacter(ctx);
    } else if (data === "delete_confirm") {
      await confirmDeleteCharacter(ctx);
    } else if (data === "delete_cancel") {
      await ctx.answerCbQuery("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
      await ctx.deleteMessage();
    } else if (data === "quest_roll") {
      await handleQuestRoll(ctx);
    } else if (data.startsWith("improve_")) {
      await handleImprovementCallback(ctx);
    } else if (data.startsWith("trade_")) {
      await handleTradeCallback(ctx);
    } else if (data.startsWith("chest_")) {
      await handleChestCallback(ctx);
    } else if (data.startsWith("use_")) {
      await handleUseItemCallback(ctx);
    } else if (data.startsWith("equip_item_")) {
      await handleEquipItemCallback(ctx);
    } else if (data.startsWith("unequip_item_")) {
      await handleUnequipItemCallback(ctx);
    } else if (data === "show_inventory") {
      await handleShowInventory(ctx);
    } else if (data === "equip_menu") {
      await handleEquipMenu(ctx);
    } else if (data === "cancel") {
      await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
      await ctx.deleteMessage();
    } else if (data === "back_to_equipment") {
      await handleEquipmentCallback(ctx);
    }

    // Callbacks –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    else if (data.startsWith("visit_merchant_")) {
      await handleVisitMerchantCallback(ctx);
    } else if (data.startsWith("merchant_buy_")) {
      await handleMerchantBuyCallback(ctx);
    } else if (data.startsWith("merchant_sell_")) {
      await handleMerchantSellCallback(ctx);
    } else if (data.startsWith("buy_item_")) {
      await handleBuyItemCallback(ctx);
    } else if (data.startsWith("sell_item_")) {
      await handleSellItemCallback(ctx);
    }

    // Callbacks –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
    else if (data.startsWith("craft_item_")) {
      await handleCraftItemCallback(ctx);
    } else if (data.startsWith("craft_view_")) {
      await handleCraftViewCallback(ctx);
    }

    // –û–±—â–∏–µ callbacks
    else if (data === "shop_main") {
      await handleShop(ctx);
    }
  });

  log("‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", "success");
}

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

async function handleStart(ctx) {
  // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await User.findOrCreate(ctx.from);

  let welcomeText = `
üé≤ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ D&D Bot!**

–Ø - –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!

**üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/create - –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
/hero - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/inventory - –û—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
/quest - –¢–µ–∫—É—â–∏–π –∫–≤–µ—Å—Ç
/quests - –ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–æ–≤
/help - –°–ø—Ä–∞–≤–∫–∞

**üìñ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
1. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–æ–π /create
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É –∏ –∫–ª–∞—Å—Å
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ (1-3 –≤ –¥–µ–Ω—å)
4. –ë—Ä–æ—Å–∞–π—Ç–µ –∫—É–±–∏–∫ –∏ –∏—Å–ø—ã—Ç—ã–≤–∞–π—Ç–µ —Å—É–¥—å–±—É!
5. –ü–æ–ª—É—á–∞–π—Ç–µ –æ–ø—ã—Ç, –∑–æ–ª–æ—Ç–æ –∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã!
`;

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø
  if (ctx.chat.type === "group" || ctx.chat.type === "supergroup") {
    welcomeText += `
**‚ö†Ô∏è –î–ª—è –≥—Ä—É–ø–ø —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:**
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /quickcreate –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
–ü—Ä–∏–º–µ—Ä: /quickcreate human WARRIOR –ì–æ—Ä–∞–∫
`;
  }

  welcomeText += `
–ö–≤–µ—Å—Ç—ã –≤—ã–¥–∞—é—Ç—Å—è —Å 10:00 –¥–æ 22:00 –ø–æ –ú–°–ö
`;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
  const character = await Character.findActive(ctx.from.id, ctx.chat.id);

  const buttons = character
    ? [[{ text: "üë§ –ú–æ–π –≥–µ—Ä–æ–π", callback_data: "show_hero" }]]
    : [[{ text: "üé≠ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data: "create_character" }]];

  await ctx.reply(welcomeText, {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: buttons,
    },
  });
}

async function handleHelp(ctx) {
  const helpText = `
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**

**–ü–µ—Ä—Å–æ–Ω–∞–∂:**
/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
/quickcreate - –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (–¥–ª—è –≥—Ä—É–ø–ø)
/hero - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/inventory - –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
/improve - –£–ª—É—á—à–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ üíé
/improvements - –ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π
/delete - –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
/setname - –í–≤–µ—Å—Ç–∏ –∏–º—è (–ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
/graveyard - –ö–ª–∞–¥–±–∏—â–µ –≥–µ—Ä–æ–µ–≤ ‚ö∞Ô∏è

**–ö–≤–µ—Å—Ç—ã:**
/quest - –¢–µ–∫—É—â–∏–π –∫–≤–µ—Å—Ç –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
/quests - –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
/getquest - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç –≤—Ä—É—á–Ω—É—é

**–ü—Ä–µ–¥–º–µ—Ç—ã –∏ –æ–±–º–µ–Ω:**
/inventory - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/trade - –ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º
/trades - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
/give - –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
/chest - –°–æ–∑–¥–∞—Ç—å —Å—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏
/use - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç

**–ü—Ä–æ—á–µ–µ:**
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/check\\_bot - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**üéØ –°–∏—Å—Ç–µ–º–∞ –∫–≤–µ—Å—Ç–æ–≤:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –≤ 10:00, 14:00, 18:00 –ú–°–ö
‚Ä¢ –î–æ 3 –∫–≤–µ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å –Ω–∞ —á–∞—Ç
‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 4 —á–∞—Å–∞
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±—Ä–æ—Å–∫–∞ 1d20 + –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
‚Ä¢ **–£—Å–ø–µ—à–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–∞—é—Ç –ø—Ä–µ–¥–º–µ—Ç—ã!**

**üíé –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:**
‚Ä¢ –†–µ–¥–∫–æ—Å—Ç—å: ‚ö™ –û–±—ã—á–Ω—ã–π ‚Üí üü¢ –ù–µ–æ–±—ã—á–Ω—ã–π ‚Üí üîµ –†–µ–¥–∫–∏–π ‚Üí üü£ –≠–ø–∏—á–µ—Å–∫–∏–π ‚Üí üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π
‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç—ã –≤—ã–ø–∞–¥–∞—é—Ç –∏–∑ –∫–≤–µ—Å—Ç–æ–≤
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö (20) –¥–∞–µ—Ç –±–æ–ª—å—à–µ –ª—É—Ç–∞
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ

**ü§ù –°–∏—Å—Ç–µ–º–∞ –æ–±–º–µ–Ω–∞:**
‚Ä¢ –û–±–º–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
‚Ä¢ –ú–æ–∂–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∑–æ–ª–æ—Ç–æ
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤—É—é—Ç 5 –º–∏–Ω—É—Ç
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º

**üíé –£–ª—É—á—à–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:**
‚Ä¢ –ù–∞ 4 –∏ 8 —É—Ä–æ–≤–Ω—è—Ö –¥–∞—é—Ç—Å—è 2 –æ—á–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
‚Ä¢ –ú–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å 2 –æ—á–∫–∞ –Ω–∞ +2 –∫ –æ–¥–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ
‚Ä¢ –ò–ª–∏ –ø–æ 1 –æ—á–∫—É –Ω–∞ +1 –∫ –¥–≤—É–º —Ä–∞–∑–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: 20

**üíÄ –°–º–µ—Ä—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:**
‚Ä¢ –ü—Ä–∏ HP = 0 –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–º–∏—Ä–∞–µ—Ç
‚Ä¢ –ú–µ—Ä—Ç–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–≤–µ—Å—Ç—ã
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è
‚Ä¢ /graveyard - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞–≤—à–∏—Ö –≥–µ—Ä–æ–µ–≤

**üìù –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø:**
/quickcreate —Ä–∞—Å–∞ –∫–ª–∞—Å—Å –∏–º—è

**–ü—Ä–∏–º–µ—Ä:**
/quickcreate human WARRIOR –ì–æ—Ä–∞–∫ –°–∏–ª—å–Ω—ã–π

**–†–∞—Å—ã:** human, elf, dwarf, halfling
**–ö–ª–∞—Å—Å—ã:** WARRIOR, ROGUE, MAGE, CLERIC, BARBARIAN, RANGER

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: 10
–ö–≤–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Å 10:00 –¥–æ 22:00 –ú–°–ö

‚ö†Ô∏è **–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–∞—Ö –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –∏–º–µ—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏**
`;

  await ctx.reply(helpText, { parse_mode: "Markdown" });
}

async function handleStatus(ctx) {
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;

  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
  const character = await Character.findActive(userId, chatId);

  const statusText = `
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**

üé≤ –í–µ—Ä—Å–∏—è: 2.0
üì± –ß–∞—Ç ID: ${chatId}
üë§ –í–∞—à ID: ${userId}
‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date().toLocaleString("ru-RU", {
    timeZone: "Europe/Moscow",
  })} –ú–°–ö

${
  character
    ? `\nüé≠ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂: ${character.name} (${character.level} —É—Ä.)`
    : "\n‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ —Å–æ–∑–¥–∞–Ω"
}

–ö–≤–µ—Å—Ç—ã –≤—ã–¥–∞—é—Ç—Å—è —Å 10:00 –¥–æ 22:00 –ú–°–ö
`;

  await ctx.reply(statusText, { parse_mode: "Markdown" });
}



  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ—Ä—Ç–∏
  if (character.hp_current <= 0) {
    display =
      `‚ò†Ô∏è **–ú–ï–†–¢–í** ‚ò†Ô∏è\n\n${display}\n\n` +
      `_–≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–∞–ª –≤ –±–æ—é. –ï–≥–æ –ø–æ–¥–≤–∏–≥–∏ –±—É–¥—É—Ç –ø–æ–º–Ω–∏—Ç—å –≤ –≤–µ–∫–∞—Ö._\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è.`;
  }

  await ctx.reply(display, { parse_mode: "Markdown" });
}



async function handleEquipMenu(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å
    const inventory = await character.getInventory();
    
    // –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
    log(`[DEBUG] –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: ${inventory.length}`);
    
    for (let i = 0; i < Math.min(5, inventory.length); i++) {
      const item = inventory[i];
      log(`[DEBUG] –ü—Ä–µ–¥–º–µ—Ç ${i + 1}: ${item.name}`);
      log(`[DEBUG] - –¢–∏–ø: ${item.type}`);
      log(`[DEBUG] - slot_type: ${item.slot_type}`);
      log(`[DEBUG] - weapon_type: ${item.weapon_type}`);
      log(`[DEBUG] - armor_type: ${item.armor_type}`);
    }

    // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å (–æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—é)
    const equipableItems = inventory.filter(item => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É –ø—Ä–µ–¥–º–µ—Ç–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ slot_type
      const isWeapon = item.type === 'weapon';
      const isArmor = item.type === 'armor';
      const isShield = item.type === 'shield';
      const hasSlotType = item.slot_type && item.slot_type !== 'null' && item.slot_type !== '';
      
      log(`[DEBUG] –ü—Ä–µ–¥–º–µ—Ç ${item.name}: weapon=${isWeapon}, armor=${isArmor}, shield=${isShield}, slot_type=${item.slot_type}`);
      
      return isWeapon || isArmor || isShield || hasSlotType;
    });

    log(`[DEBUG] –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–æ: ${equipableItems.length}`);

    if (equipableItems.length === 0) {
      await ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏!");
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      let debugMessage = "üîç **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n";
      debugMessage += `–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${inventory.length}\n\n`;
      
      for (let i = 0; i < Math.min(3, inventory.length); i++) {
        const item = inventory[i];
        debugMessage += `**${item.name}**\n`;
        debugMessage += `–¢–∏–ø: ${item.type}\n`;
        debugMessage += `slot_type: ${item.slot_type || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        debugMessage += `weapon_type: ${item.weapon_type || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
      }
      
      await ctx.editMessageText(debugMessage, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [[
            { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_equipment" }
          ]]
        }
      });
      return;
    }

    let message = "üéí **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:**\n\n";
    const keyboard = [];

    const rarityEmoji = {
      common: "‚ö™",
      uncommon: "üü¢",
      rare: "üîµ",
      epic: "üü£",
      legendary: "üü†",
    };

    // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–∫–∏–ø–∏—Ä—É–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    for (const item of equipableItems.slice(0, 10)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
      const emoji = rarityEmoji[item.rarity] || "‚ö™";
      const typeInfo = item.weapon_type || item.armor_type || item.type;
      
      message += `${emoji} **${item.name}** (${typeInfo})\n`;
      
      keyboard.push([{
        text: `${emoji} ${item.name}`,
        callback_data: `equip_item_${item.id}`
      }]);
    }

    keyboard.push([
      { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ", callback_data: "back_to_equipment" }
    ]);

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard },
    });

  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –º–µ–Ω—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏: ${error.message}`, "error");
    await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏");
  }
}

async function handleEquipItemCallback(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;
  const itemId = parseInt(ctx.callbackQuery.data.replace("equip_item_", ""));

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    const inventory = await character.getInventory();
    const item = inventory.find(i => i.id === itemId);
    
    if (!item) {
      await ctx.answerCbQuery("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!");
      return;
    }

    log(`[DEBUG] –ü–æ–ø—ã—Ç–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å: ${item.name} (ID: ${itemId})`);
    log(`[DEBUG] –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞: ${item.type}, slot_type: ${item.slot_type}`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ—Ç –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    let targetSlot = item.slot_type;
    
    // –ï—Å–ª–∏ slot_type –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–∏–ø—É –ø—Ä–µ–¥–º–µ—Ç–∞
    if (!targetSlot || targetSlot === 'null') {
      if (item.type === 'weapon') {
        targetSlot = 'main_hand';
      } else if (item.type === 'armor') {
        targetSlot = 'chest';
      } else if (item.type === 'shield') {
        targetSlot = 'off_hand';
      } else {
        await ctx.answerCbQuery("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!");
        return;
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if (typeof equipmentSystem !== 'undefined') {
      const result = await equipmentSystem.equipItem(character.id, itemId);
      await ctx.answerCbQuery("‚úÖ –ü—Ä–µ–¥–º–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!");
      
      await ctx.editMessageText(`‚úÖ **${item.name}** —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω –≤ —Å–ª–æ—Ç: ${result.slot}`, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [[
            { text: "‚óÄÔ∏è –ö —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ", callback_data: "back_to_equipment" },
            { text: "üéí –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data: "equip_menu" }
          ]]
        }
      });
    } else {
      // –ü—Ä–æ—Å—Ç–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –±–µ–∑ —Å–∏—Å—Ç–µ–º—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
      // –ü–æ–º–µ—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∫–∞–∫ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
      await db.run(
        "UPDATE inventory SET equipped = 1, equipped_slot = ? WHERE character_id = ? AND item_id = ?",
        [targetSlot, character.id, itemId]
      );
      
      await ctx.answerCbQuery("‚úÖ –ü—Ä–µ–¥–º–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!");
      
      await ctx.editMessageText(`‚úÖ **${item.name}** —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!`, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [[
            { text: "‚óÄÔ∏è –ö —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ", callback_data: "back_to_equipment" },
            { text: "üéí –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data: "equip_menu" }
          ]]
        }
      });
    }

    log(`${character.name} —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª ${item.name}`);

  } catch (error) {
    log(`–û—à–∏–±–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: ${error.message}`, "error");
    await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function handleEquipment(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.reply(
      "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
      { parse_mode: "Markdown" }
    );
    return;
  }

  try {
    const display = await equipmentSystem.getEquipmentDisplay(character.id);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const keyboard = [
      [
        { text: "üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data: "show_inventory" },
        { text: "üéí –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data: "equip_menu" },
      ],
    ];

    await ctx.reply(display, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard },
    });
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏: ${error.message}`, "error");
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏");
  }
}

// –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
async function handleEquipItem(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  const itemName = ctx.message.text.replace("/equip_item", "").trim();

  if (!itemName) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    const inventory = await character.getInventory();
    const equipable = inventory.filter((item) =>
      ["weapon", "armor", "shield", "accessory"].includes(item.type)
    );

    if (equipable.length === 0) {
      await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏!");
      return;
    }

    let message = "üéí **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:**\n\n";
    const keyboard = [];

    for (const item of equipable) {
      const rarityEmoji =
        {
          common: "‚ö™",
          uncommon: "üü¢",
          rare: "üîµ",
          epic: "üü£",
          legendary: "üü†",
        }[item.rarity] || "‚ö™";

      keyboard.push([
        {
          text: `${rarityEmoji} ${item.name}`,
          callback_data: `equip_item_${item.id}`,
        },
      ]);
    }

    keyboard.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]);

    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard },
    });
    return;
  }

  // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ –∏–º–µ–Ω–∏
  const inventory = await character.getInventory();
  const item = inventory.find((i) =>
    i.name.toLowerCase().includes(itemName.toLowerCase())
  );

  if (!item) {
    await ctx.reply("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!");
    return;
  }

  try {
    const result = await equipmentSystem.equipItem(character.id, item.id);
    await ctx.reply(`‚úÖ ${item.name} —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω –≤ —Å–ª–æ—Ç: ${result.slot}`, {
      parse_mode: "Markdown",
    });
  } catch (error) {
    await ctx.reply(`‚ùå ${error.message}`);
  }
}

// –°–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç
async function handleUnequipItem(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  const equipment = await equipmentSystem.getEquipment(character.id);
  const equipped = Object.entries(equipment);

  if (equipped.length === 0) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!");
    return;
  }

  let message = "üéí **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Å–Ω—è—Ç–∏—è:**\n\n";
  const keyboard = [];

  for (const [slot, item] of equipped) {
    const slotName = equipmentSystem.slots[slot]?.name || slot;
    keyboard.push([
      {
        text: `${slotName}: ${item.name}`,
        callback_data: `unequip_item_${item.id}`,
      },
    ]);
  }

  keyboard.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]);

  await ctx.reply(message, {
    parse_mode: "Markdown",
    reply_markup: { inline_keyboard: keyboard },
  });
}

// –ú–∞–≥–∞–∑–∏–Ω
async function handleShop(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
  const merchants = Object.entries(advancedMerchantSystem.merchants);

  let message = "üè™ **–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å**\n\n";
  message += `üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: ${character.gold}\n\n`;
  message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—Ü–∞:\n";

  const keyboard = merchants.map(([id, merchant]) => [
    {
      text: `${merchant.name} - ${merchant.title}`,
      callback_data: `visit_merchant_${id}`,
    },
  ]);

  keyboard.push([{ text: "‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data: "cancel" }]);

  // –ï—Å–ª–∏ —ç—Ç–æ callback, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (ctx.callbackQuery) {
    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard },
    });
  } else {
    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard },
    });
  }
}

// –ö—Ä–∞—Ñ—Ç
async function handleCraft(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  const recipes = await craftingSystem.getAvailableRecipes(character.id);

  if (recipes.length === 0) {
    await ctx.reply("üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤!");
    return;
  }

  let message = "üî® **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:**\n\n";
  const keyboard = [];

  for (const recipe of recipes) {
    const canCraft = await craftingSystem.canCraft(character.id, recipe.id);
    const status = canCraft.canCraft ? "‚úÖ" : "‚ùå";

    message += `${status} **${recipe.name}**\n`;
    message += `_${recipe.description}_\n`;
    message += `–£—Ä–æ–≤–µ–Ω—å: ${recipe.required_level}, –ó–æ–ª–æ—Ç–æ: ${recipe.required_gold}\n\n`;

    keyboard.push([
      {
        text: `${status} ${recipe.name}`,
        callback_data: `craft_view_${recipe.id}`,
      },
    ]);
  }

  keyboard.push([{ text: "‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data: "cancel" }]);

  await ctx.reply(message, {
    parse_mode: "Markdown",
    reply_markup: { inline_keyboard: keyboard },
  });
}

// –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
async function handleItemSearch(ctx) {
  const query = ctx.message.text.replace("/itemsearch", "").trim();

  if (!query) {
    await ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞: /itemsearch –º–µ—á");
    return;
  }

  try {
    const items = await db.all(
      `
      SELECT * FROM items 
      WHERE name LIKE ? OR description LIKE ?
      ORDER BY rarity DESC, name
      LIMIT 10
    `,
      [`%${query}%`, `%${query}%`]
    );

    if (items.length === 0) {
      await ctx.reply("‚ùå –ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return;
    }

    let result = `üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ "${query}":**\n\n`;

    const rarityEmoji = {
      common: "‚ö™",
      uncommon: "üü¢",
      rare: "üîµ",
      epic: "üü£",
      legendary: "üü†",
    };

    for (const item of items) {
      const emoji = rarityEmoji[item.rarity] || "‚ö™";
      result += `${emoji} **${item.name}** - ${item.value_gold} üí∞\n`;
      result += `_${item.description}_\n`;

      if (item.stats_bonus) {
        const stats = JSON.parse(item.stats_bonus);
        const statStr = Object.entries(stats)
          .map(([k, v]) => `${k}: +${v}`)
          .join(", ");
        if (statStr) result += `–ë–æ–Ω—É—Å—ã: ${statStr}\n`;
      }

      result += "\n";
    }

    await ctx.reply(result, { parse_mode: "Markdown" });
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${error.message}`, "error");
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ");
  }
}

async function handleImprove(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);

  if (!character) {
    await ctx.reply(
      "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
      { parse_mode: "Markdown" }
    );
    return;
  }

  if (character.hp_current <= 0) {
    await ctx.reply("‚ò†Ô∏è –ú–µ—Ä—Ç–≤—ã–µ –Ω–µ –º–æ–≥—É—Ç —É–ª—É—á—à–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!", {
      parse_mode: "Markdown",
    });
    return;
  }

  const points = character.ability_points || 0;

  if (points === 0) {
    await ctx.reply(
      `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—á–∫–æ–≤ —É–ª—É—á—à–µ–Ω–∏—è!\n\n` +
        `–û—á–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–∞—é—Ç—Å—è –Ω–∞ ${config.ABILITY_IMPROVEMENT_LEVELS.join(
          ", "
        )} —É—Ä–æ–≤–Ω—è—Ö.`,
      { parse_mode: "Markdown" }
    );
    return;
  }

  let message = `‚ö° **–£–ª—É—á—à–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫**\n\n`;
  message += `–£ –≤–∞—Å –µ—Å—Ç—å **${points}** ${
    points === 1 ? "–æ—á–∫–æ" : "–æ—á–∫–∞"
  } —É–ª—É—á—à–µ–Ω–∏—è.\n\n`;
  message += `**–¢–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n`;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  for (const [stat, info] of Object.entries(config.STATS)) {
    const value = character[stat];
    const modifier = character.getStatModifier(stat);
    const canImprove = value < config.MAX_ABILITY_SCORE;

    message += `${info.emoji} ${info.name}: ${value} (${
      modifier >= 0 ? "+" : ""
    }${modifier})`;
    if (!canImprove) message += " [MAX]";
    message += "\n";
  }

  message += `\n**–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —É–ª—É—á—à–µ–Ω–∏—è:**`;

  const keyboard = [
    [{ text: "üìà +2 –∫ –æ–¥–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ", callback_data: "improve_single" }],
    [{ text: "üìä +1 –∫ –¥–≤—É–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º", callback_data: "improve_double" }],
    [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "improve_cancel" }],
  ];

  // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ 1 –æ—á–∫–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç +1
  if (points === 1) {
    keyboard.splice(0, 1); // –£–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏—é +2
  }

  await ctx.reply(message, {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: keyboard,
    },
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π
async function handleImprovementCallback(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;
  const data = ctx.callbackQuery.data;

  const character = await Character.findActive(userId, chatId);
  if (!character || character.ability_points === 0) {
    await ctx.answerCbQuery("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–∫–æ–≤ —É–ª—É—á—à–µ–Ω–∏—è");
    return;
  }

  if (data === "improve_cancel") {
    await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
    await ctx.deleteMessage();
    return;
  }

  if (data === "improve_single") {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –æ–¥–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è +2
    await showSingleImproveMenu(ctx, character);
  } else if (data === "improve_double") {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è +1
    await showDoubleImproveMenu(ctx, character, "first");
  } else if (data.startsWith("improve_apply_single_")) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º +2 –∫ –æ–¥–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ
    const stat = data.replace("improve_apply_single_", "");
    await applyImprovement(ctx, character, stat, 2);
  } else if (data.startsWith("improve_apply_first_")) {
    // –í—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è +1, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–π
    const firstStat = data.replace("improve_apply_first_", "");
    await showDoubleImproveMenu(ctx, character, "second", firstStat);
  } else if (data.startsWith("improve_apply_second_")) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º +1 –∫ –¥–≤—É–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
    const [firstStat, secondStat] = data
      .replace("improve_apply_second_", "")
      .split("_");
    await applyDoubleImprovement(ctx, character, firstStat, secondStat);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è +2
async function showSingleImproveMenu(ctx, character) {
  let message = `‚ö° **–í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ +2**\n\n`;
  const keyboard = [];

  for (const [stat, info] of Object.entries(config.STATS)) {
    const value = character[stat];
    const canImprove = value <= config.MAX_ABILITY_SCORE - 2;

    if (canImprove) {
      keyboard.push([
        {
          text: `${info.emoji} ${info.name} (${value} ‚Üí ${value + 2})`,
          callback_data: `improve_apply_single_${stat}`,
        },
      ]);
    }
  }

  keyboard.push([{ text: "‚ùå –ù–∞–∑–∞–¥", callback_data: "improve_cancel" }]);

  await ctx.editMessageText(message, {
    parse_mode: "Markdown",
    reply_markup: { inline_keyboard: keyboard },
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è +1
async function showDoubleImproveMenu(ctx, character, step, firstStat = null) {
  let message;
  const keyboard = [];

  if (step === "first") {
    message = `üìä **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ +1**\n\n`;

    for (const [stat, info] of Object.entries(config.STATS)) {
      const value = character[stat];
      const canImprove = value < config.MAX_ABILITY_SCORE;

      if (canImprove) {
        keyboard.push([
          {
            text: `${info.emoji} ${info.name} (${value} ‚Üí ${value + 1})`,
            callback_data: `improve_apply_first_${stat}`,
          },
        ]);
      }
    }
  } else {
    const firstInfo = config.STATS[firstStat];
    message = `üìä **–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ +1**\n\n`;
    message += `–ü–µ—Ä–≤–∞—è: ${firstInfo.emoji} ${firstInfo.name} +1\n\n`;

    for (const [stat, info] of Object.entries(config.STATS)) {
      if (stat === firstStat) continue; // –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ç—É –∂–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É

      const value = character[stat];
      const canImprove = value < config.MAX_ABILITY_SCORE;

      if (canImprove) {
        keyboard.push([
          {
            text: `${info.emoji} ${info.name} (${value} ‚Üí ${value + 1})`,
            callback_data: `improve_apply_second_${firstStat}_${stat}`,
          },
        ]);
      }
    }
  }

  keyboard.push([{ text: "‚ùå –ù–∞–∑–∞–¥", callback_data: "improve_cancel" }]);

  await ctx.editMessageText(message, {
    parse_mode: "Markdown",
    reply_markup: { inline_keyboard: keyboard },
  });
}

// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
async function applyImprovement(ctx, character, stat, amount) {
  try {
    const result = await character.improveAbility(stat, amount);
    const statInfo = config.STATS[stat];

    let message = `‚úÖ **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∞!**\n\n`;
    message += `${statInfo.emoji} ${statInfo.name}: ${result.oldValue} ‚Üí ${result.newValue}\n`;
    message += `–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${
      Character.getStatModifier(result.oldValue) >= 0 ? "+" : ""
    }${Character.getStatModifier(result.oldValue)} ‚Üí ${
      Character.getStatModifier(result.newValue) >= 0 ? "+" : ""
    }${Character.getStatModifier(result.newValue)}\n`;

    if (result.hpIncrease > 0) {
      message += `\n‚ù§Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ ${result.hpIncrease}!`;
    }

    if (character.ability_points > 0) {
      message += `\n\n–û—Å—Ç–∞–ª–æ—Å—å –æ—á–∫–æ–≤ —É–ª—É—á—à–µ–Ω–∏—è: ${character.ability_points}`;
    }

    await ctx.editMessageText(message, { parse_mode: "Markdown" });
  } catch (error) {
    await ctx.answerCbQuery(`‚ùå ${error.message}`);
  }
}

// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ –¥–≤—É—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
async function applyDoubleImprovement(ctx, character, firstStat, secondStat) {
  try {
    const result1 = await character.improveAbility(firstStat, 1);
    const result2 = await character.improveAbility(secondStat, 1);

    const stat1Info = config.STATS[firstStat];
    const stat2Info = config.STATS[secondStat];

    let message = `‚úÖ **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–ª—É—á—à–µ–Ω—ã!**\n\n`;
    message += `${stat1Info.emoji} ${stat1Info.name}: ${result1.oldValue} ‚Üí ${result1.newValue}\n`;
    message += `${stat2Info.emoji} ${stat2Info.name}: ${result2.oldValue} ‚Üí ${result2.newValue}\n`;

    const totalHpIncrease = result1.hpIncrease + result2.hpIncrease;
    if (totalHpIncrease > 0) {
      message += `\n‚ù§Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ ${totalHpIncrease}!`;
    }

    if (character.ability_points > 0) {
      message += `\n\n–û—Å—Ç–∞–ª–æ—Å—å –æ—á–∫–æ–≤ —É–ª—É—á—à–µ–Ω–∏—è: ${character.ability_points}`;
    }

    await ctx.editMessageText(message, { parse_mode: "Markdown" });
  } catch (error) {
    await ctx.answerCbQuery(`‚ùå ${error.message}`);
  }
}

// –ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π
async function handleImprovementHistory(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);

  if (!character) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!", { parse_mode: "Markdown" });
    return;
  }

  const history = await character.getImprovementHistory();

  if (history.length === 0) {
    await ctx.reply(
      `üìú **–ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π ${character.name}**\n\n` +
        `–í—ã –µ—â–µ –Ω–µ —É–ª—É—á—à–∞–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.\n` +
        `–û—á–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–∞—é—Ç—Å—è –Ω–∞ ${config.ABILITY_IMPROVEMENT_LEVELS.join(
          ", "
        )} —É—Ä–æ–≤–Ω—è—Ö.`,
      { parse_mode: "Markdown" }
    );
    return;
  }

  let message = `üìú **–ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π ${character.name}**\n\n`;

  for (const imp of history) {
    const statInfo = config.STATS[imp.stat_name];
    const date = new Date(imp.improved_at).toLocaleDateString("ru-RU");

    message += `${statInfo.emoji} ${statInfo.name} +${imp.improvement} (—É—Ä. ${imp.level}) - ${date}\n`;
  }

  if (character.ability_points > 0) {
    message += `\nüíé –î–æ—Å—Ç—É–ø–Ω–æ –æ—á–∫–æ–≤: ${character.ability_points}`;
  }

  await ctx.reply(message, { parse_mode: "Markdown" });
}

async function startTradeDialog(ctx, fromCharacter, toCharacterId) {
  const toCharacter = await Character.findById(toCharacterId);
  if (!toCharacter) {
    await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ–±–º–µ–Ω–∞
  const fromInventory = await fromCharacter.getInventory();

  let message = `ü§ù **–û–±–º–µ–Ω —Å ${toCharacter.name}**\n\n`;
  message += `üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: ${fromCharacter.gold}\n`;
  message += `üí∞ –ó–æ–ª–æ—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: ${toCharacter.gold}\n\n`;

  message += `**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–º–µ–Ω–∞:**`;

  const keyboard = [];

  // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞ –∑–æ–ª–æ—Ç–æ–º
  if (fromCharacter.gold >= 50) {
    keyboard.push([
      {
        text: "üí∞ –ü–æ–¥–∞—Ä–∏—Ç—å 50 –∑–æ–ª–æ—Ç–∞",
        callback_data: `trade_gift_gold_50_${toCharacter.id}`,
      },
    ]);
  }
  if (fromCharacter.gold >= 100) {
    keyboard.push([
      {
        text: "üí∞ –ü–æ–¥–∞—Ä–∏—Ç—å 100 –∑–æ–ª–æ—Ç–∞",
        callback_data: `trade_gift_gold_100_${toCharacter.id}`,
      },
    ]);
  }

  // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
  if (fromInventory.length > 0) {
    keyboard.push([
      {
        text: "üì¶ –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞",
        callback_data: `trade_select_items_${toCharacter.id}`,
      },
    ]);
  }

  keyboard.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "trade_cancel" }]);

  await ctx.editMessageText(message, {
    parse_mode: "Markdown",
    reply_markup: { inline_keyboard: keyboard },
  });
}

async function handleGift(ctx) {
  const text = ctx.message.text;
  const parts = text.split(" ");

  if (parts.length < 3) {
    await ctx.reply(
      `üéÅ **–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤**\n\n` +
        `**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n` +
        `/gift @–∏–º—è —Å—É–º–º–∞\n` +
        `/gift @–∏–º—è –ø—Ä–µ–¥–º–µ—Ç\n\n` +
        `**–ü—Ä–∏–º–µ—Ä—ã:**\n` +
        `‚Ä¢ /gift @Ivan 50\n` +
        `‚Ä¢ /gift @Maria 100 –∑–æ–ª–æ—Ç–∞\n` +
        `‚Ä¢ /gift @Alex –ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è\n\n` +
        `**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n` +
        `‚Ä¢ –ü–æ–¥–∞—Ä–∏—Ç—å –∑–æ–ª–æ—Ç–æ (—á–∏—Å–ª–æ)\n` +
        `‚Ä¢ –ü–æ–¥–∞—Ä–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ)\n`,
      { parse_mode: "Markdown" }
    );
    return;
  }

  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const giver = await Character.findActive(userId, chatId);
  if (!giver) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  // –ü–∞—Ä—Å–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
  const recipientName = parts[1].replace("@", "");

  // –ü–∞—Ä—Å–∏–º —á—Ç–æ –¥–∞—Ä–∏–º
  const giftText = parts.slice(2).join(" ");
  const goldAmount = parseInt(giftText);

  if (!isNaN(goldAmount) && goldAmount > 0) {
    // –î–∞—Ä–∏–º –∑–æ–ª–æ—Ç–æ
    if (giver.gold < goldAmount) {
      await ctx.reply(
        `‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!\n` +
          `–£ –≤–∞—Å: ${giver.gold} üí∞\n` +
          `–ù—É–∂–Ω–æ: ${goldAmount} üí∞`,
        { parse_mode: "Markdown" }
      );
      return;
    }

    await ctx.reply(
      `üéÅ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞**\n\n` +
        `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @${recipientName}\n` +
        `–ü–æ–¥–∞—Ä–æ–∫: üí∞ ${goldAmount} –∑–æ–ª–æ—Ç–∞\n\n` +
        `‚ö†Ô∏è –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /trade –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞.`,
      { parse_mode: "Markdown" }
    );
  } else {
    // –î–∞—Ä–∏–º –ø—Ä–µ–¥–º–µ—Ç
    const itemName = giftText;

    // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    const inventory = await giver.getInventory();
    const item = inventory.find((i) =>
      i.name.toLowerCase().includes(itemName.toLowerCase())
    );

    if (!item) {
      await ctx.reply(
        `‚ùå –ü—Ä–µ–¥–º–µ—Ç "${itemName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /inventory –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.`,
        { parse_mode: "Markdown" }
      );
      return;
    }

    await ctx.reply(
      `üéÅ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞**\n\n` +
        `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @${recipientName}\n` +
        `–ü–æ–¥–∞—Ä–æ–∫: ${item.name}\n\n` +
        `‚ö†Ô∏è –û–±–º–µ–Ω –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∫–∞ –º–æ–∂–Ω–æ –¥–∞—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–æ–ª–æ—Ç–æ —á–µ—Ä–µ–∑ /trade.`,
      { parse_mode: "Markdown" }
    );
  }
}

async function showItemSelectionForTrade(
  ctx,
  fromCharacter,
  toCharacterId,
  selectedItems = []
) {
  const inventory = await fromCharacter.getInventory();
  const session = getTradeSession(ctx.from.id, ctx.chat.id);

  let message = `üì¶ **–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:**\n\n`;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ
  if (selectedItems.length > 0 || session.selectedGold > 0) {
    message += `**–í—ã–±—Ä–∞–Ω–æ:**\n`;

    if (session.selectedGold > 0) {
      message += `‚Ä¢ üí∞ ${session.selectedGold} –∑–æ–ª–æ—Ç–∞\n`;
    }

    for (const itemId of selectedItems) {
      const item = inventory.find((i) => i.id === itemId);
      if (item) {
        message += `‚Ä¢ ${item.name}\n`;
      }
    }
    message += `\n`;
  }

  message += `üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: ${fromCharacter.gold}\n`;

  if (inventory.length > 0) {
    message += `\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:**`;
  }

  const keyboard = [];

  // –ü—Ä–µ–¥–º–µ—Ç—ã
  for (const item of inventory) {
    if (!selectedItems.includes(item.id)) {
      keyboard.push([
        {
          text: `‚ûï ${item.name} (x${item.quantity})`,
          callback_data: `trade_add_item_${item.id}_${toCharacterId}`,
        },
      ]);
    }
  }

  // –ó–æ–ª–æ—Ç–æ
  if (!session.selectedGold && fromCharacter.gold > 0) {
    keyboard.push([
      {
        text: "üí∞ –î–æ–±–∞–≤–∏—Ç—å –∑–æ–ª–æ—Ç–æ",
        callback_data: `trade_add_gold_${toCharacterId}`,
      },
    ]);
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  if (selectedItems.length > 0 || session.selectedGold > 0) {
    keyboard.push([
      {
        text: "‚úÖ –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        callback_data: `trade_confirm_giving_${toCharacterId}`,
      },
      { text: "üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data: `trade_reset_${toCharacterId}` },
    ]);
  }

  keyboard.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "trade_cancel" }]);

  await ctx.editMessageText(message, {
    parse_mode: "Markdown",
    reply_markup: { inline_keyboard: keyboard },
  });
}

// –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
async function createSimpleTradeOffer(ctx, fromCharacter, toCharacter) {
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±–º–µ–Ω –∑–æ–ª–æ—Ç–∞
  const offer = {
    giving: { items: [], gold: 100 },
    requesting: { items: [], gold: 0 },
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ 100 –∑–æ–ª–æ—Ç–∞
  if (fromCharacter.gold < 100) {
    await ctx.reply(
      "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (–Ω—É–∂–Ω–æ 100)!"
    );
    return;
  }

  const result = await tradeSystem.createTradeOffer(
    fromCharacter,
    toCharacter,
    offer
  );

  if (!result.success) {
    await ctx.reply(`‚ùå ${result.message}`);
    return;
  }

  const tradeMessage = tradeSystem.formatTradeOffer(result.trade);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
  try {
    await ctx.telegram.sendMessage(
      toCharacter.chat_id,
      `${tradeMessage}\n\n` +
        `–û—Ç –∏–≥—Ä–æ–∫–∞ ${fromCharacter.name}\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /trades –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞`,
      {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                callback_data: `trade_accept_${result.tradeId}`,
              },
              {
                text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data: `trade_decline_${result.tradeId}`,
              },
            ],
          ],
        },
      }
    );
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–º–µ–Ω–µ: ${error.message}`, "error");
  }

  await ctx.reply(
    `‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n` +
      `–í—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ: üí∞ 100 –∑–æ–ª–æ—Ç–∞\n` +
      `–í–∑–∞–º–µ–Ω –Ω–∞: _–Ω–∏—á–µ–≥–æ_ (–ø–æ–¥–∞—Ä–æ–∫)\n\n` +
      `–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${toCharacter.name}`,
    { parse_mode: "Markdown" }
  );
}

async function handleGetQuest(ctx) {
  const chatId = ctx.chat.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ñ–ò–í–´–ï –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ —á–∞—Ç–µ
  const characters = await db.all(
    "SELECT COUNT(*) as count FROM characters WHERE chat_id = ? AND is_active = 1 AND hp_current > 0",
    [chatId]
  );

  if (characters[0].count === 0) {
    await ctx.reply(
      "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∂–∏–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!\n\n" +
        "–í—Å–µ –≥–µ—Ä–æ–∏ –ø–∞–ª–∏ –≤ –±–∏—Ç–≤–∞—Ö. üò¢\n\n" +
        "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–æ–π /create",
      { parse_mode: "Markdown" }
    );
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
  const canReceive = await questSystem.canReceiveQuest(chatId);

  if (!canReceive.can) {
    await ctx.reply(`‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç!\n\n${canReceive.reason}`, {
      parse_mode: "Markdown",
    });
    return;
  }

  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–≤–µ—Å—Ç
  const quest = await questSystem.assignQuest(chatId);

  if (!quest) {
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–≤–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {
      parse_mode: "Markdown",
    });
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–µ
  const config = require("../config/config");
  const statConfig = config.STATS[quest.stat_check];
  const difficultyEmoji = {
    easy: "üü¢",
    medium: "üü°",
    hard: "üî¥",
    epic: "üü£",
    legendary: "‚≠ê",
  };

  const message = `
üéØ **–ù–û–í–´–ô –ö–í–ï–°–¢ –ü–û–õ–£–ß–ï–ù!**

${difficultyEmoji[quest.difficulty] || "‚ùì"} **${quest.title}**
${quest.description}

üìä **–ü—Ä–æ–≤–µ—Ä–∫–∞:** ${statConfig.emoji} ${statConfig.name}
‚è∞ **–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:** 4 —á–∞—Å–∞
üí∞ **–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:** ${quest.xp_reward} XP, ${quest.gold_reward} –∑–æ–ª–æ—Ç–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quest —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å!
`;

  await ctx.reply(message, { parse_mode: "Markdown" });

  log(`–ö–≤–µ—Å—Ç "${quest.title}" –≤—ã–¥–∞–Ω –≤—Ä—É—á–Ω—É—é –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
}



// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
async function handleShowInventory(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);

  if (!character) {
    await ctx.reply(
      "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
      { parse_mode: "Markdown" }
    );
    return;
  }

  const inventory = await character.getInventory();

  // –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
  if (inventory.length > 0) {
    log(`[DEBUG] –ü–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ:`, inventory[0]);
  }

  if (inventory.length === 0) {
    await ctx.reply(
      `üéí **–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ${character.name}**\n\n` +
        `–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç\n\n` +
        `üí∞ –ó–æ–ª–æ—Ç–æ: ${character.gold}`,
      { parse_mode: "Markdown" }
    );
    return;
  }

  let inventoryText = `üéí **–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ${character.name}**\n\n`;

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
  const byType = {};
  for (const item of inventory) {
    if (!byType[item.type]) byType[item.type] = [];
    byType[item.type].push(item);
  }

  const typeNames = {
    weapon: "‚öîÔ∏è –û—Ä—É–∂–∏–µ",
    armor: "üõ°Ô∏è –ë—Ä–æ–Ω—è",
    consumable: "üß™ –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏",
    misc: "üì¶ –†–∞–∑–Ω–æ–µ",
    artifact: "üíé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã",
  };

  const rarityEmojis = {
    common: "‚ö™",
    uncommon: "üü¢",
    rare: "üîµ",
    epic: "üü£",
    legendary: "üü†",
  };

  let itemIndex = 1;
  const itemButtons = [];

  for (const [type, items] of Object.entries(byType)) {
    inventoryText += `**${typeNames[type] || type}:**\n`;

    for (const item of items) {
      const emoji = rarityEmojis[item.rarity] || "‚ùì";
      inventoryText += `${itemIndex}. ${emoji} ${item.name}`;
      if (item.quantity > 1) inventoryText += ` x${item.quantity}`;
      if (item.equipped) inventoryText += " üìå";
      inventoryText += "\n";

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
      if (type === "consumable" && !character.isDead()) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        itemButtons.push({
          text: `${itemIndex}. ${item.name}`, // –£–ø—Ä–æ—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
          callback_data: `use_${item.id}`, // item.id - —ç—Ç–æ ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã items
        });
      }

      itemIndex++;
    }
    inventoryText += "\n";
  }

  inventoryText += `üí∞ **–ó–æ–ª–æ—Ç–æ:** ${character.gold}`;

  const keyboard = [];

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  if (itemButtons.length > 0) {
    for (let i = 0; i < itemButtons.length; i += 2) {
      const row = [itemButtons[i]];
      if (itemButtons[i + 1]) {
        row.push(itemButtons[i + 1]);
      }
      keyboard.push(row);
    }
  }

  log(`[DEBUG] –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: ${itemButtons.length}`);

  await ctx.reply(inventoryText, {
    parse_mode: "Markdown",
    reply_markup:
      keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined,
  });
}

async function handleUnequipItemCallback(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;
  const itemId = parseInt(ctx.callbackQuery.data.replace("unequip_item_", ""));

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  try {
    const result = await equipmentSystem.unequipItem(character.id, itemId);
    await ctx.answerCbQuery("‚úÖ –ü—Ä–µ–¥–º–µ—Ç —Å–Ω—è—Ç!");

    await ctx.editMessageText(
      `‚úÖ ${result.itemName} —Å–Ω—è—Ç —Å–æ —Å–ª–æ—Ç–∞: ${result.slot}`,
      {
        parse_mode: "Markdown",
      }
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É
    setTimeout(() => handleEquipment(ctx), 1000);
  } catch (error) {
    await ctx.answerCbQuery(`‚ùå ${error.message}`);
  }
}

// Callback –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —É —Ç–æ—Ä–≥–æ–≤—Ü–∞
async function handleMerchantSellCallback(ctx) {
  const merchantId = parseInt(
    ctx.callbackQuery.data.replace("merchant_sell_", "")
  );
  const character = await Character.findActive(ctx.from.id, ctx.chat.id);

  if (!character) {
    await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  try {
    const inventory = await character.getInventory();

    if (inventory.length === 0) {
      await ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!");
      return;
    }

    let message = `üí∞ **–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤**\n\n`;
    message += `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:\n\n`;

    const keyboard = [];
    const rarityEmoji = {
      common: "‚ö™",
      uncommon: "üü¢",
      rare: "üîµ",
      epic: "üü£",
      legendary: "üü†",
    };

    for (const item of inventory.slice(0, 10)) {
      const emoji = rarityEmoji[item.rarity] || "‚ö™";
      const sellPrice = Math.floor(item.value_gold * 0.5); // 50% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏

      message += `${emoji} ${item.name} - ${sellPrice} üí∞\n`;

      keyboard.push([
        {
          text: `${emoji} ${item.name} (${sellPrice}üí∞)`,
          callback_data: `sell_item_${merchantId}_${item.id}`,
        },
      ]);
    }

    keyboard.push([
      { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: `visit_merchant_${merchantId}` },
    ]);

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard },
    });
  } catch (error) {
    await ctx.answerCbQuery(`‚ùå ${error.message}`);
  }
}

// Callback –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
async function handleSellItemCallback(ctx) {
  const parts = ctx.callbackQuery.data.split("_");
  const merchantId = parseInt(parts[2]);
  const itemId = parseInt(parts[3]);

  const character = await Character.findActive(ctx.from.id, ctx.chat.id);
  if (!character) {
    await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  try {
    const result = await advancedMerchantSystem.sellItem(
      character.id,
      merchantId,
      itemId
    );

    await ctx.answerCbQuery(`‚úÖ ${result.comment}`);

    let message = `‚úÖ **–ü—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω!**\n\n`;
    message += `–ü—Ä–æ–¥–∞–Ω–æ: ${result.item}\n`;
    message += `–ü–æ–ª—É—á–µ–Ω–æ: ${result.price} üí∞\n\n`;
    message += `–ó–æ–ª–æ—Ç–æ: ${character.gold} ‚Üí ${
      character.gold + result.price
    } üí∞`;

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üí∞ –ü—Ä–æ–¥–∞—Ç—å –µ—â–µ",
              callback_data: `merchant_sell_${merchantId}`,
            },
            { text: "üè™ –ö —Ç–æ—Ä–≥–æ–≤—Ü–∞–º", callback_data: "shop_main" },
          ],
        ],
      },
    });
  } catch (error) {
    await ctx.answerCbQuery(`‚ùå ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ
async function handleItemInfo(ctx) {
  const query = ctx.message.text.replace("/iteminfo", "").trim();

  if (!query) {
    await ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: /iteminfo –º–µ—á");
    return;
  }

  try {
    const item = await db.get(`SELECT * FROM items WHERE name LIKE ? LIMIT 1`, [
      `%${query}%`,
    ]);

    if (!item) {
      await ctx.reply("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    const rarityEmoji = {
      common: "‚ö™",
      uncommon: "üü¢",
      rare: "üîµ",
      epic: "üü£",
      legendary: "üü†",
    };

    const emoji = rarityEmoji[item.rarity] || "‚ùì";
    let info = `${emoji} **${item.name}**\n\n`;
    info += `_${item.description}_\n\n`;
    info += `**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n`;
    info += `‚Ä¢ –¢–∏–ø: ${item.type}\n`;
    info += `‚Ä¢ –†–µ–¥–∫–æ—Å—Ç—å: ${item.rarity}\n`;
    info += `‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${item.value_gold} üí∞\n`;

    if (item.stats_bonus) {
      const stats = JSON.parse(item.stats_bonus);
      if (Object.keys(stats).length > 0) {
        info += `\n**–ë–æ–Ω—É—Å—ã:**\n`;
        for (const [stat, value] of Object.entries(stats)) {
          info += `‚Ä¢ ${stat}: +${value}\n`;
        }
      }
    }

    if (item.effects) {
      const effects = JSON.parse(item.effects);
      if (Object.keys(effects).length > 0) {
        info += `\n**–≠—Ñ—Ñ–µ–∫—Ç—ã:**\n`;
        for (const [effect, value] of Object.entries(effects)) {
          info += `‚Ä¢ ${effect}: ${value}\n`;
        }
      }
    }

    await ctx.reply(info, { parse_mode: "Markdown" });
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ: ${error.message}`, "error");
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
  }
}

async function handleGive(ctx) {
  const text = ctx.message.text;
  const parts = text.split(" ");

  if (parts.length < 3) {
    await ctx.reply(
      `‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n` +
        `/give @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç\n` +
        `/give @username –∑–æ–ª–æ—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n` +
        `**–ü—Ä–∏–º–µ—Ä—ã:**\n` +
        `/give @friend 1 –ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è\n` +
        `/give @friend –∑–æ–ª–æ—Ç–æ 100`,
      { parse_mode: "Markdown" }
    );
    return;
  }

  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const giver = await Character.findActive(userId, chatId);
  if (!giver) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
  const targetUsername = parts[1].replace("@", "");
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
  // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É

  await ctx.reply(
    `‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /trade –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞.`,
    { parse_mode: "Markdown" }
  );
}

// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
async function handleTrade(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  // –í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  if (ctx.chat.type === "group" || ctx.chat.type === "supergroup") {
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
    const activeCharacters = await db.all(
      `
      SELECT c.*, u.telegram_username as username, u.first_name 
      FROM characters c
      JOIN users u ON c.user_id = u.id
      WHERE c.chat_id = ? AND c.is_active = 1 AND c.user_id != ?
      ORDER BY c.level DESC
      LIMIT 10
      `,
      [chatId, character.user_id]
    );

    if (activeCharacters.length === 0) {
      await ctx.reply(
        "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞!"
      );
      return;
    }

    let message = "ü§ù **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –æ–±–º–µ–Ω–∞:**\n\n";
    const keyboard = [];

    for (const char of activeCharacters) {
      const name = char.username || char.first_name || "–ò–≥—Ä–æ–∫";
      message += `${char.name} (${name}) - ${char.level} —É—Ä.\n`;

      keyboard.push([
        {
          text: `üì¶ –û–±–º–µ–Ω —Å ${char.name}`,
          callback_data: `trade_start_${char.id}`,
        },
      ]);
    }

    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard },
    });
  } else {
    await ctx.reply(
      "‚ùå –û–±–º–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!\n\n" +
        "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.",
      { parse_mode: "Markdown" }
    );
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
async function handleActiveTrades(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  const trades = tradeSystem.getActiveTradesForCharacter(character.id);

  if (trades.length === 0) {
    await ctx.reply("üì¶ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–±–º–µ–Ω–∞.");
    return;
  }

  for (const trade of trades) {
    const message = tradeSystem.formatTradeOffer(trade);
    const keyboard = [];

    if (trade.to.character.id === character.id) {
      // –í—Ö–æ–¥—è—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
      keyboard.push([
        { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: `trade_accept_${trade.id}` },
        { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `trade_decline_${trade.id}` },
      ]);
    } else {
      // –ò—Å—Ö–æ–¥—è—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
      keyboard.push([
        { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: `trade_cancel_${trade.id}` },
      ]);
    }

    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard },
    });
  }
}

// –°–æ–∑–¥–∞—Ç—å —Å—É–Ω–¥—É–∫ —Å –ª—É—Ç–æ–º
async function handleCreateChest(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏–ª–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö)
  if (ctx.chat.type === "private") {
    await ctx.reply("‚ùå –°—É–Ω–¥—É–∫–∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!");
    return;
  }

  // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—É–Ω–¥—É–∫
  const difficulties = ["easy", "medium", "hard"];
  const difficulty =
    difficulties[Math.floor(Math.random() * difficulties.length)];

  const chest = await lootSystem.createLootChest(
    chatId,
    difficulty,
    character.id
  );

  const difficultyNames = {
    easy: "üü¢ –ü—Ä–æ—Å—Ç–æ–π",
    medium: "üü° –û–±—ã—á–Ω—ã–π",
    hard: "üî¥ –†–µ–¥–∫–∏–π",
  };

  await ctx.reply(
    `üì¶ **–ü–æ—è–≤–∏–ª—Å—è —Å—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏!**\n\n` +
      `${difficultyNames[difficulty]} —Å—É–Ω–¥—É–∫\n` +
      `üí∞ –í–Ω—É—Ç—Ä–∏ —á—Ç–æ-—Ç–æ —Ü–µ–Ω–Ω–æ–µ...\n\n` +
      `–ü–µ—Ä–≤—ã–π, –∫—Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç, –ø–æ–ª—É—á–∏—Ç –≤—Å–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞!`,
    {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "üîì –û—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫!",
              callback_data: `chest_open_${chest.id}`,
            },
          ],
        ],
      },
    }
  );
}

function getTradeSession(userId, chatId) {
  const key = `${userId}_${chatId}`;
  if (!tradeSessions.has(key)) {
    tradeSessions.set(key, {
      selectedItems: [],
      selectedGold: 0,
      requestedItems: [],
      requestedGold: 0,
      tradeTargetId: null,
      createdAt: Date.now(),
    });
  }
  return tradeSessions.get(key);
}

function clearTradeSession(userId, chatId) {
  const key = `${userId}_${chatId}`;
  tradeSessions.delete(key);
}

async function handleBuy(ctx) {
  await ctx.reply(
    "üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /shop\n\n" +
      "–¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ —Å –∏—Ö —Ç–æ–≤–∞—Ä–∞–º–∏.",
    { parse_mode: "Markdown" }
  );
}

async function handleSell(ctx) {
  await ctx.reply(
    "üí∞ –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /shop\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—Ü–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–∞—Ç—å'.",
    { parse_mode: "Markdown" }
  );
}

async function handleTradeCallback(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;
  const data = ctx.callbackQuery.data;

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  const session = getTradeSession(userId, chatId);

  // –ù–∞—á–∞–ª–æ –æ–±–º–µ–Ω–∞
  if (data.startsWith("trade_start_")) {
    const targetId = parseInt(data.replace("trade_start_", ""));
    await startTradeDialog(ctx, character, targetId);
  }

  // –ü–æ–¥–∞—Ä–æ–∫ –∑–æ–ª–æ—Ç–∞
  else if (data.startsWith("trade_gift_gold_")) {
    const parts = data.split("_");
    const amount = parseInt(parts[3]);
    const targetId = parseInt(parts[4]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–æ–ª–æ—Ç–∞
    if (character.gold < amount) {
      await ctx.answerCbQuery("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!");
      return;
    }

    const toCharacter = await Character.findById(targetId);
    if (!toCharacter) {
      await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞
    const offer = {
      giving: { items: [], gold: amount },
      requesting: { items: [], gold: 0 },
    };

    const result = await tradeSystem.createTradeOffer(
      character,
      toCharacter,
      offer
    );

    if (!result.success) {
      await ctx.editMessageText(`‚ùå ${result.message}`, {
        parse_mode: "Markdown",
      });
      return;
    }

    await ctx.editMessageText(
      `‚úÖ **–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n` +
        `–í—ã –ø–æ–¥–∞—Ä–∏–ª–∏ ${toCharacter.name}: üí∞ ${amount} –∑–æ–ª–æ—Ç–∞\n\n` +
        `–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`,
      { parse_mode: "Markdown" }
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try {
      await ctx.telegram.sendMessage(
        toCharacter.chat_id,
        `üéÅ **–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç ${character.name}!**\n\n` +
          `–í–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç: üí∞ ${amount} –∑–æ–ª–æ—Ç–∞`,
        {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                  callback_data: `trade_accept_${result.tradeId}`,
                },
                {
                  text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                  callback_data: `trade_decline_${result.tradeId}`,
                },
              ],
            ],
          },
        }
      );
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`, "error");
    }
  }

  // –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞
  else if (data.startsWith("trade_select_items_")) {
    const targetId = parseInt(data.replace("trade_select_items_", ""));
    session.tradeTargetId = targetId;
    await showItemSelectionForTrade(
      ctx,
      character,
      targetId,
      session.selectedItems
    );
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
  else if (data.startsWith("trade_add_item_")) {
    const parts = data.split("_");
    const itemId = parseInt(parts[3]);
    const targetId = parseInt(parts[4]);

    session.selectedItems.push(itemId);

    await ctx.answerCbQuery("‚úÖ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω");
    await showItemSelectionForTrade(
      ctx,
      character,
      targetId,
      session.selectedItems
    );
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞
  else if (data.startsWith("trade_add_gold_")) {
    const targetId = parseInt(data.replace("trade_add_gold_", ""));

    // –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã
    let message = `üí∞ **–°–∫–æ–ª—å–∫–æ –∑–æ–ª–æ—Ç–∞ –¥–æ–±–∞–≤–∏—Ç—å?**\n\n`;
    message += `–£ –≤–∞—Å: ${character.gold} –∑–æ–ª–æ—Ç–∞\n\n`;

    const keyboard = [];
    const amounts = [50, 100, 200, 500];

    for (const amount of amounts) {
      if (character.gold >= amount) {
        keyboard.push([
          {
            text: `üí∞ ${amount}`,
            callback_data: `trade_set_gold_${amount}_${targetId}`,
          },
        ]);
      }
    }

    keyboard.push([
      { text: "‚ùå –ù–∞–∑–∞–¥", callback_data: `trade_select_items_${targetId}` },
    ]);

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard },
    });
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–æ–ª–æ—Ç–∞
  else if (data.startsWith("trade_set_gold_")) {
    const parts = data.split("_");
    const amount = parseInt(parts[3]);
    const targetId = parseInt(parts[4]);

    session.selectedGold = amount;

    await ctx.answerCbQuery(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} –∑–æ–ª–æ—Ç–∞`);
    await showItemSelectionForTrade(
      ctx,
      character,
      targetId,
      session.selectedItems
    );
  }

  // –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞
  else if (data.startsWith("trade_reset_")) {
    const targetId = parseInt(data.replace("trade_reset_", ""));
    session.selectedItems = [];
    session.selectedGold = 0;

    await ctx.answerCbQuery("üîÑ –í—ã–±–æ—Ä —Å–±—Ä–æ—à–µ–Ω");
    await showItemSelectionForTrade(ctx, character, targetId, []);
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±–º–µ–Ω–∞
  else if (data.startsWith("trade_confirm_giving_")) {
    const targetId = parseInt(data.replace("trade_confirm_giving_", ""));

    const toCharacter = await Character.findById(targetId);
    if (!toCharacter) {
      await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–æ–∑–¥–∞–µ–º –æ–±–º–µ–Ω –∫–∞–∫ –ø–æ–¥–∞—Ä–æ–∫
    const offer = {
      giving: {
        items: session.selectedItems,
        gold: session.selectedGold,
      },
      requesting: {
        items: [],
        gold: 0,
      },
    };

    const result = await tradeSystem.createTradeOffer(
      character,
      toCharacter,
      offer
    );

    if (!result.success) {
      await ctx.editMessageText(`‚ùå ${result.message}`, {
        parse_mode: "Markdown",
      });
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `‚úÖ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n\n`;
    message += `–ö–æ–º—É: ${toCharacter.name}\n\n`;
    message += `**–í—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ:**\n`;

    if (session.selectedGold > 0) {
      message += `‚Ä¢ üí∞ ${session.selectedGold} –∑–æ–ª–æ—Ç–∞\n`;
    }

    const inventory = await character.getInventory();
    for (const itemId of session.selectedItems) {
      const item = inventory.find((i) => i.id === itemId);
      if (item) {
        message += `‚Ä¢ ${item.name}\n`;
      }
    }

    message += `\n–≠—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ (–Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ—Å–∏—Ç–µ –≤–∑–∞–º–µ–Ω)`;

    await ctx.editMessageText(message, { parse_mode: "Markdown" });

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    clearTradeSession(userId, chatId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try {
      const tradeMessage = tradeSystem.formatTradeOffer(result.trade);

      await ctx.telegram.sendMessage(
        toCharacter.chat_id,
        `${tradeMessage}\n\n–û—Ç: ${character.name}`,
        {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                  callback_data: `trade_accept_${result.tradeId}`,
                },
                {
                  text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                  callback_data: `trade_decline_${result.tradeId}`,
                },
              ],
            ],
          },
        }
      );
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`, "error");
    }
  }

  // –û—Ç–º–µ–Ω–∞
  else if (data === "trade_cancel") {
    clearTradeSession(userId, chatId);
    await ctx.answerCbQuery("–û—Ç–º–µ–Ω–µ–Ω–æ");
    await ctx.deleteMessage();
  }

  // –ü—Ä–∏–Ω—è—Ç–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
  else if (data.startsWith("trade_accept_")) {
    const tradeId = data.replace("trade_accept_", "");
    const result = await tradeSystem.acceptTrade(tradeId, character.id);

    await ctx.answerCbQuery(result.message);
    if (result.success) {
      await ctx.editMessageText(
        `‚úÖ **–û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n${tradeSystem.formatTradeOffer(
          result.trade
        )}`,
        { parse_mode: "Markdown" }
      );
    }
  } else if (
    data.startsWith("trade_decline_") ||
    data.startsWith("trade_cancel_")
  ) {
    const tradeId = data.replace(/trade_(decline|cancel)_/, "");
    tradeSystem.cancelTrade(tradeId);
    await ctx.answerCbQuery("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω");
    await ctx.deleteMessage();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞
async function handleChestCallback(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;
  const data = ctx.callbackQuery.data;

  if (data.startsWith("chest_open_")) {
    const chestId = parseInt(data.replace("chest_open_", ""));

    const character = await Character.findActive(userId, chatId);
    if (!character) {
      await ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
      return;
    }

    const result = await lootSystem.openChest(chestId, character.id);

    if (!result.success) {
      await ctx.answerCbQuery(result.message);
      return;
    }

    await ctx.answerCbQuery("üéâ –°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç!");

    let message = `üéâ **${character.name} –æ—Ç–∫—Ä—ã–ª —Å—É–Ω–¥—É–∫!**\n\n`;
    message += `**–ü–æ–ª—É—á–µ–Ω–æ:**\n`;

    if (result.loot.gold > 0) {
      message += `üí∞ ${result.loot.gold} –∑–æ–ª–æ—Ç–∞\n`;
    }

    const rarityEmojis = {
      common: "‚ö™",
      uncommon: "üü¢",
      rare: "üîµ",
      epic: "üü£",
      legendary: "üü†",
    };

    for (const item of result.loot.items) {
      const emoji = rarityEmojis[item.rarity] || "‚ùì";
      message += `${emoji} ${item.name}\n`;
    }

    await ctx.editMessageText(message, { parse_mode: "Markdown" });
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
async function handleUseItem(ctx) {
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  const text = ctx.message.text;
  const itemName = text.replace("/use ", "").trim();

  if (!itemName) {
    await ctx.reply(
      "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞!\n" +
        "–ü—Ä–∏–º–µ—Ä: /use –ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è\n\n" +
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /inventory",
      { parse_mode: "Markdown" }
    );
    return;
  }

  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–µ—Ä—Ç–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
  if (character.hp_current <= 0) {
    await ctx.reply("‚ò†Ô∏è –ú–µ—Ä—Ç–≤—ã–µ –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã!", {
      parse_mode: "Markdown",
    });
    return;
  }

  // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  const item = await db.get(
    `
    SELECT i.*, inv.id as inventory_id, inv.quantity 
    FROM inventory inv
    JOIN items i ON inv.item_id = i.id
    WHERE inv.character_id = ? 
      AND LOWER(i.name) = LOWER(?)
      AND i.type = 'consumable'
  `,
    [character.id, itemName]
  );

  if (!item) {
    // –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    const partialMatch = await db.get(
      `
      SELECT i.*, inv.id as inventory_id, inv.quantity 
      FROM inventory inv
      JOIN items i ON inv.item_id = i.id
      WHERE inv.character_id = ? 
        AND LOWER(i.name) LIKE LOWER(?)
        AND i.type = 'consumable'
      LIMIT 1
    `,
      [character.id, `%${itemName}%`]
    );

    if (!partialMatch) {
      await ctx.reply(
        `‚ùå –ü—Ä–µ–¥–º–µ—Ç "${itemName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /inventory –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤.`,
        { parse_mode: "Markdown" }
      );
      return;
    }

    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    item = partialMatch;
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–∞
  const effects = JSON.parse(item.effects || "{}");
  let message = `üß™ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${item.name}**\n`;
  message += `_${item.description}_\n\n`;

  let actuallyUsed = false;

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ—á–µ–Ω–∏–µ
  if (effects.hp && effects.hp > 0) {
    const hpBefore = character.hp_current;
    await character.modifyHP(effects.hp);
    const hpAfter = character.hp_current;
    const actualHealed = hpAfter - hpBefore;

    if (actualHealed > 0) {
      message += `‚ù§Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${actualHealed} HP (${hpBefore} ‚Üí ${hpAfter}/${character.hp_max})\n`;
      actuallyUsed = true;
    } else {
      message += `‚ù§Ô∏è HP —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ (${character.hp_max}/${character.hp_max})\n`;
    }
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥—Ä—É–≥–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π)
  if (effects.mp) {
    message += `üíô –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${effects.mp} MP\n`;
    actuallyUsed = true;
  }

  if (effects.invisibility) {
    message += `üëª –í—ã –Ω–µ–≤–∏–¥–∏–º—ã –Ω–∞ ${effects.invisibility} –º–∏–Ω—É—Ç\n`;
    actuallyUsed = true;
  }

  if (effects.teleport) {
    message += `‚ú® –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n`;
    actuallyUsed = true;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª–µ–∑–µ–Ω
  if (!actuallyUsed && effects.hp) {
    await ctx.reply(
      `‚ö†Ô∏è **${item.name}** —Å–µ–π—á–∞—Å –Ω–µ –Ω—É–∂–µ–Ω!\n\n` +
        `–í–∞—à–µ HP —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: ${character.hp_current}/${character.hp_max}`,
      { parse_mode: "Markdown" }
    );
    return;
  }

  // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞
  await db.run("UPDATE inventory SET quantity = quantity - 1 WHERE id = ?", [
    item.inventory_id,
  ]);

  // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
  await db.run("DELETE FROM inventory WHERE id = ? AND quantity <= 0", [
    item.inventory_id,
  ]);

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–µ–º—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
  if (item.quantity > 1) {
    message += `\nüì¶ –û—Å—Ç–∞–ª–æ—Å—å: ${item.quantity - 1} —à—Ç.`;
  } else {
    message += `\nüì¶ –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç!`;
  }

  await ctx.reply(message, { parse_mode: "Markdown" });

  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
  log(`${character.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª ${item.name}`);
}

// Callback –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
async function handleEquipItemCallback(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;
  const itemId = parseInt(ctx.callbackQuery.data.replace("equip_item_", ""));

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  try {
    const result = await equipmentSystem.equipItem(character.id, itemId);
    await ctx.answerCbQuery("‚úÖ –ü—Ä–µ–¥–º–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!");

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.editMessageText(`‚úÖ –ü—Ä–µ–¥–º–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω –≤ —Å–ª–æ—Ç: ${result.slot}`, {
      parse_mode: "Markdown",
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É
    setTimeout(() => handleEquipment(ctx), 1000);
  } catch (error) {
    await ctx.answerCbQuery(`‚ùå ${error.message}`);
  }
}

// Callback –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—Ü–∞
async function handleVisitMerchantCallback(ctx) {
  const merchantId = parseInt(
    ctx.callbackQuery.data.replace("visit_merchant_", "")
  );
  const character = await Character.findActive(ctx.from.id, ctx.chat.id);

  if (!character) {
    await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  const greeting = await advancedMerchantSystem.getMerchantGreeting(
    character.id,
    merchantId
  );
  const merchant = advancedMerchantSystem.merchants[merchantId];

  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
  const rep = await advancedMerchantSystem.getReputation(
    character.id,
    merchantId
  );
  const mood = advancedMerchantSystem.getMerchantMood(rep.reputation);

  let message = `**${merchant.name}** ${mood.emoji}\n`;
  message += `_${greeting}_\n\n`;
  message += `üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: ${character.gold}\n`;
  message += `ü§ù –†–µ–ø—É—Ç–∞—Ü–∏—è: ${rep.reputation}\n\n`;

  const keyboard = [
    [
      { text: "üì¶ –ö—É–ø–∏—Ç—å", callback_data: `merchant_buy_${merchantId}` },
      { text: "üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data: `merchant_sell_${merchantId}` },
    ],
  ];

  if (merchant.canCraft) {
    keyboard[0].push({
      text: "üî® –ö—Ä–∞—Ñ—Ç",
      callback_data: `merchant_craft_${merchantId}`,
    });
  }

  keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "shop_main" }]);

  await ctx.editMessageText(message, {
    parse_mode: "Markdown",
    reply_markup: { inline_keyboard: keyboard },
  });
}

// Callback –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É —Ç–æ—Ä–≥–æ–≤—Ü–∞
async function handleMerchantBuyCallback(ctx) {
  const merchantId = parseInt(
    ctx.callbackQuery.data.replace("merchant_buy_", "")
  );
  const character = await Character.findActive(ctx.from.id, ctx.chat.id);

  if (!character) {
    await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  try {
    const inventory = await advancedMerchantSystem.getMerchantInventory(
      merchantId,
      character.id
    );

    if (inventory.length === 0) {
      await ctx.answerCbQuery("‚ùå –£ —Ç–æ—Ä–≥–æ–≤—Ü–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!");
      return;
    }

    let message = `üõí **–¢–æ–≤–∞—Ä—ã —Ç–æ—Ä–≥–æ–≤—Ü–∞**\n\n`;
    message += `üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: ${character.gold}\n\n`;

    const keyboard = [];
    const rarityEmoji = {
      common: "‚ö™",
      uncommon: "üü¢",
      rare: "üîµ",
      epic: "üü£",
      legendary: "üü†",
    };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    for (let i = 0; i < Math.min(10, inventory.length); i++) {
      const item = inventory[i];
      const emoji = rarityEmoji[item.rarity] || "‚ö™";

      message += `${emoji} **${item.name}** - ${item.buyPrice} üí∞\n`;
      if (item.description) {
        message += `_${item.description}_\n`;
      }
      message += "\n";

      keyboard.push([
        {
          text: `${emoji} ${item.name} (${item.buyPrice}üí∞)`,
          callback_data: `buy_item_${merchantId}_${item.id}`,
        },
      ]);
    }

    keyboard.push([
      { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: `visit_merchant_${merchantId}` },
    ]);

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard },
    });
  } catch (error) {
    await ctx.answerCbQuery(`‚ùå ${error.message}`);
  }
}

// Callback –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
async function handleBuyItemCallback(ctx) {
  const parts = ctx.callbackQuery.data.split("_");
  const merchantId = parseInt(parts[2]);
  const itemId = parseInt(parts[3]);

  const character = await Character.findActive(ctx.from.id, ctx.chat.id);
  if (!character) {
    await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  try {
    const result = await advancedMerchantSystem.buyItem(
      character.id,
      merchantId,
      itemId
    );

    await ctx.answerCbQuery(`‚úÖ ${result.comment}`);

    let message = `‚úÖ **–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!**\n\n`;
    message += `–ö—É–ø–ª–µ–Ω–æ: ${result.item}\n`;
    message += `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${result.price} üí∞\n\n`;
    message += `–û—Å—Ç–∞–ª–æ—Å—å –∑–æ–ª–æ—Ç–∞: ${character.gold - result.price} üí∞`;

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "‚óÄÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º",
              callback_data: `merchant_buy_${merchantId}`,
            },
            { text: "üè™ –ö —Ç–æ—Ä–≥–æ–≤—Ü–∞–º", callback_data: "shop_main" },
          ],
        ],
      },
    });
  } catch (error) {
    await ctx.answerCbQuery(`‚ùå ${error.message}`);
  }
}

// Callback –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
async function handleCraftItemCallback(ctx) {
  const recipeId = parseInt(ctx.callbackQuery.data.replace("craft_item_", ""));
  const character = await Character.findActive(ctx.from.id, ctx.chat.id);

  if (!character) {
    await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  try {
    const result = await craftingSystem.craftItem(character.id, recipeId);

    if (result.success) {
      const rarityEmoji =
        {
          common: "‚ö™",
          uncommon: "üü¢",
          rare: "üîµ",
          epic: "üü£",
          legendary: "üü†",
        }[result.item.rarity] || "‚ö™";

      await ctx.answerCbQuery(result.message);
      await ctx.editMessageText(
        `${result.message}\n\n` +
          `–ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ${rarityEmoji} **${result.item.name}**\n` +
          `_${result.item.description}_`,
        { parse_mode: "Markdown" }
      );
    } else {
      await ctx.answerCbQuery(result.message);
    }
  } catch (error) {
    await ctx.answerCbQuery(`‚ùå ${error.message}`);
  }
}

async function handleRecipes(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
    const recipes = await db.all(
      `
      SELECT * FROM crafting_recipes 
      WHERE required_level <= ? 
      ORDER BY required_level, name
    `,
      [character.level]
    );

    if (recipes.length === 0) {
      await ctx.reply("üìú –†–µ—Ü–µ–ø—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!");
      return;
    }

    let message = `üìú **–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤** (–£—Ä–æ–≤–µ–Ω—å ${character.level})\n\n`;

    for (const recipe of recipes) {
      const canCraft = await craftingSystem.canCraft(character.id, recipe.id);
      const status = canCraft.canCraft ? "‚úÖ" : "‚ùå";

      message += `${status} **${recipe.name}**\n`;
      message += `   _${recipe.description}_\n`;
      message += `   –£—Ä–æ–≤–µ–Ω—å: ${recipe.required_level} | –ó–æ–ª–æ—Ç–æ: ${recipe.required_gold}\n`;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      const materials = JSON.parse(recipe.materials || "[]");
      if (materials.length > 0) {
        const matList = materials
          .map((m) => `${m.name} x${m.quantity}`)
          .join(", ");
        message += `   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${matList}\n`;
      }

      message += `\n`;
    }

    message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /craft –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤.`;

    await ctx.reply(message, { parse_mode: "Markdown" });
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤: ${error.message}`, "error");
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤");
  }
}

// Callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
async function handleCraftViewCallback(ctx) {
  const recipeId = parseInt(ctx.callbackQuery.data.replace("craft_view_", ""));
  const character = await Character.findActive(ctx.from.id, ctx.chat.id);

  if (!character) {
    await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  const recipe = await db.get("SELECT * FROM crafting_recipes WHERE id = ?", [
    recipeId,
  ]);
  if (!recipe) {
    await ctx.answerCbQuery("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    return;
  }

  const materials = JSON.parse(recipe.materials);
  const canCraft = await craftingSystem.canCraft(character.id, recipeId);

  let message = `üî® **${recipe.name}**\n\n`;
  message += `_${recipe.description}_\n\n`;
  message += `**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n`;
  message += `‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${recipe.required_level}\n`;
  message += `‚Ä¢ –ó–æ–ª–æ—Ç–æ: ${recipe.required_gold} üí∞\n\n`;

  message += `**–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:**\n`;
  for (const mat of materials) {
    const check = await craftingSystem.checkInventory(
      character.id,
      mat.name,
      mat.quantity
    );
    const status = check.has ? "‚úÖ" : "‚ùå";
    message += `${status} ${mat.name} x${mat.quantity} (–µ—Å—Ç—å ${check.quantity})\n`;
  }

  message += `\n–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: ${Math.floor(recipe.success_rate * 100)}%`;

  const keyboard = [];

  if (canCraft.canCraft) {
    keyboard.push([
      {
        text: "üî® –°–æ–∑–¥–∞—Ç—å",
        callback_data: `craft_item_${recipeId}`,
      },
    ]);
  }

  keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "craft_main" }]);

  await ctx.editMessageText(message, {
    parse_mode: "Markdown",
    reply_markup: { inline_keyboard: keyboard },
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ —á–µ—Ä–µ–∑ callback
async function handleUseItemCallback(ctx) {
  const data = ctx.callbackQuery.data;
  const itemId = data.replace("use_", ""); // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥–º–µ—Ç–∞

  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–µ—Ä—Ç–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
  if (character.hp_current <= 0) {
    await ctx.answerCbQuery("‚ò†Ô∏è –ú–µ—Ä—Ç–≤—ã–µ –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã!");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  const item = await db.get(
    `
    SELECT i.*, inv.id as inventory_id, inv.quantity 
    FROM inventory inv
    JOIN items i ON inv.item_id = i.id
    WHERE inv.character_id = ? AND inv.item_id = ?
  `,
    [character.id, itemId]
  );

  if (!item || item.type !== "consumable") {
    await ctx.answerCbQuery(
      "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!"
    );
    return;
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
  const effects = JSON.parse(item.effects || "{}");
  let message = `üß™ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${item.name}**\n`;
  message += `_${item.description}_\n\n`;

  let actuallyUsed = false;

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ—á–µ–Ω–∏–µ
  if (effects.hp && effects.hp > 0) {
    const hpBefore = character.hp_current;
    await character.modifyHP(effects.hp);
    const hpAfter = character.hp_current;
    const actualHealed = hpAfter - hpBefore;

    if (actualHealed > 0) {
      message += `‚ù§Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${actualHealed} HP (${hpBefore} ‚Üí ${hpAfter}/${character.hp_max})\n`;
      actuallyUsed = true;
    } else {
      await ctx.answerCbQuery("‚ö†Ô∏è HP —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ!");
      return;
    }
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥—Ä—É–≥–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  if (effects.mp) {
    message += `üíô –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${effects.mp} MP\n`;
    actuallyUsed = true;
  }

  if (effects.invisibility) {
    message += `üëª –í—ã –Ω–µ–≤–∏–¥–∏–º—ã –Ω–∞ ${effects.invisibility} –º–∏–Ω—É—Ç\n`;
    actuallyUsed = true;
  }

  if (effects.teleport) {
    message += `‚ú® –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n`;
    actuallyUsed = true;
  }

  // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω, –Ω–µ —Ç—Ä–∞—Ç–∏–º –µ–≥–æ
  if (!actuallyUsed) {
    await ctx.answerCbQuery("‚ö†Ô∏è –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —Å–µ–π—á–∞—Å –Ω–µ –Ω—É–∂–µ–Ω!");
    return;
  }

  // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  await db.run("UPDATE inventory SET quantity = quantity - 1 WHERE id = ?", [
    item.inventory_id,
  ]);

  // –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å
  await db.run("DELETE FROM inventory WHERE id = ? AND quantity <= 0", [
    item.inventory_id,
  ]);

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–µ–º—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
  if (item.quantity > 1) {
    message += `\nüì¶ –û—Å—Ç–∞–ª–æ—Å—å: ${item.quantity - 1} —à—Ç.`;
  } else {
    message += `\nüì¶ –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç!`;
  }

  await ctx.answerCbQuery("‚úÖ –ü—Ä–µ–¥–º–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!");

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  await ctx.reply(message, { parse_mode: "Markdown" });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
  try {
    await ctx.deleteMessage();
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
  await handleShowInventory(ctx);
}

async function handleGraveyard(ctx) {
  const telegramId = ctx.from.id;
  const chatId = ctx.chat.id;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const user = await db.get("SELECT id FROM users WHERE telegram_id = ?", [
      telegramId,
    ]);

    if (!user) {
      await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ—Ä—Ç–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const deadCharacters = await db.all(
      `SELECT * FROM characters 
       WHERE user_id = ? AND chat_id = ? AND hp_current <= 0 
       ORDER BY created_at DESC 
       LIMIT 10`,
      [user.id, chatId]
    );

    if (deadCharacters.length === 0) {
      await ctx.reply(
        "‚ö∞Ô∏è **–ö–ª–∞–¥–±–∏—â–µ –≥–µ—Ä–æ–µ–≤**\n\n" +
          "–ü–æ–∫–∞ —á—Ç–æ –∑–¥–µ—Å—å –ø—É—Å—Ç–æ. –í–∞—à–∏ –≥–µ—Ä–æ–∏ –µ—â–µ –∂–∏–≤—ã!\n" +
          "–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å –Ω–∏–º–∏ —É–¥–∞—á–∞ –≤ –æ–ø–∞—Å–Ω—ã—Ö –∫–≤–µ—Å—Ç–∞—Ö.",
        { parse_mode: "Markdown" }
      );
      return;
    }

    let message = "‚ö∞Ô∏è **–ö–ª–∞–¥–±–∏—â–µ –≥–µ—Ä–æ–µ–≤**\n\n";
    message += "_–ó–¥–µ—Å—å –ø–æ–∫–æ—è—Ç—Å—è –æ—Ç–≤–∞–∂–Ω—ã–µ –≥–µ—Ä–æ–∏, –ø–∞–≤—à–∏–µ –≤ –±–∏—Ç–≤–∞—Ö..._\n\n";

    for (const char of deadCharacters) {
      const character = new Character(char);
      const deathDate = new Date(char.created_at).toLocaleDateString("ru-RU");

      message += `ü™¶ **${character.name}**\n`;
      message += `${character.getFullTitle()} ‚Ä¢ ${character.level} —É—Ä–æ–≤–µ–Ω—å\n`;
      message += `üíÄ –ü–æ–≥–∏–±: ${deathDate}\n`;
      message += `‚ú® –û–ø—ã—Ç: ${character.experience} XP\n`;
      message += `üí∞ –ó–æ–ª–æ—Ç–æ: ${character.gold}\n\n`;
    }

    message += "_–ü–æ–∫–æ–π—Ç–µ—Å—å —Å –º–∏—Ä–æ–º, —Ö—Ä–∞–±—Ä—ã–µ –≤–æ–∏–Ω—ã._";

    await ctx.reply(message, { parse_mode: "Markdown" });
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–ª–∞–¥–±–∏—â–∞: ${error.message}`, "error");
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∞–¥–±–∏—â–∞ –≥–µ—Ä–æ–µ–≤");
  }
}


  /

// –ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–æ–≤
async function handleListQuests(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const character = await Character.findActive(userId, chatId);
  if (!character) {
    await ctx.reply(
      "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.",
      { parse_mode: "Markdown" }
    );
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
  const history = await questSystem.getQuestHistory(character.id, 10);

  if (history.length === 0) {
    await ctx.reply(
      `üìú **–ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–æ–≤ ${character.name}**\n\n–í—ã –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞!`,
      { parse_mode: "Markdown" }
    );
    return;
  }

  const difficultyEmoji = {
    easy: "üü¢",
    medium: "üü°",
    hard: "üî¥",
    epic: "üü£",
    legendary: "‚≠ê",
  };

  let message = `üìú **–ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–æ–≤ ${character.name}**\n\n`;

  for (const quest of history) {
    const date = new Date(quest.completed_at).toLocaleDateString("ru-RU");
    const successEmoji = quest.success ? "‚úÖ" : "‚ùå";

    message += `${successEmoji} ${difficultyEmoji[quest.difficulty]} **${
      quest.title
    }**\n`;
    message += `   –ë—Ä–æ—Å–æ–∫: ${quest.roll_result} | +${quest.xp_gained} XP | +${quest.gold_gained} üí∞\n`;
    message += `   ${date}\n\n`;
  }

  await ctx.reply(message, { parse_mode: "Markdown" });
}

async function handleAdmin(ctx) {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞
  await ctx.reply("üöß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!");
}

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
async function handleDebugSessions(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;
  const sessionKey = `${userId}_${chatId}`;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
  const currentSession = characterCreation.creationSessions.get(sessionKey);

  let debugText = `üîç **–û—Ç–ª–∞–¥–∫–∞ —Å–µ—Å—Å–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞**\n\n`;

  if (currentSession) {
    debugText += `**–í–∞—à–∞ —Å–µ—Å—Å–∏—è:**\n`;
    debugText += `‚Ä¢ –ö–ª—é—á: ${sessionKey}\n`;
    debugText += `‚Ä¢ –®–∞–≥: ${currentSession.step}\n`;
    debugText += `‚Ä¢ –†–∞—Å–∞: ${currentSession.data.race || "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞"}\n`;
    debugText += `‚Ä¢ –ö–ª–∞—Å—Å: ${currentSession.data.class || "–Ω–µ –≤—ã–±—Ä–∞–Ω"}\n`;
    debugText += `‚Ä¢ –ò–º—è: ${currentSession.data.name || "–Ω–µ –≤–≤–µ–¥–µ–Ω–æ"}\n`;
    debugText += `‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: ${new Date(
      currentSession.timestamp
    ).toLocaleString()}\n`;
  } else {
    debugText += `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è\n`;
    debugText += `–í–∞—à –∫–ª—é—á —Å–µ—Å—Å–∏–∏: ${sessionKey}\n`;
  }

  debugText += `\n**–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:** ${characterCreation.creationSessions.size}`;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–µ—Å—Å–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  if (characterCreation.creationSessions.size > 0) {
    debugText += "\n\n**–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:**\n";
    for (const [key, session] of characterCreation.creationSessions.entries()) {
      debugText += `‚Ä¢ ${key} (—à–∞–≥: ${session.step})\n`;
    }
  }

  await ctx.reply(debugText, { parse_mode: "Markdown" });
}

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
async function handleTestName(ctx) {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;
  const sessionKey = `${userId}_${chatId}`;

  log(`[TestName] –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è ${sessionKey}`);

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
  characterCreation.creationSessions.set(sessionKey, {
    userId,
    chatId,
    chatType: ctx.chat.type,
    step: "name",
    data: {
      race: "human",
      class: "WARRIOR",
    },
    timestamp: Date.now(),
  });

  await ctx.reply(
    `üß™ **–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º**\n\n` +
      `–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏.\n` +
      `–†–∞—Å–∞: –ß–µ–ª–æ–≤–µ–∫\n` +
      `–ö–ª–∞—Å—Å: –í–æ–∏–Ω\n` +
      `ChatId: \`${chatId}\`\n` +
      `UserId: \`${userId}\`\n` +
      `–ö–ª—é—á —Å–µ—Å—Å–∏–∏: \`${sessionKey}\`\n\n` +
      `**–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:**\n` +
      `‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –≤ —á–∞—Ç\n` +
      `‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setname –ò–º—è–ü–µ—Ä—Å–æ–Ω–∞–∂–∞`,
    { parse_mode: "Markdown" }
  );
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
async function handleCheckBot(ctx) {
  const chatId = ctx.chat.id;
  const chatType = ctx.chat.type;
  const botId = ctx.botInfo.id;

  let info = `ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**\n\n`;
  info += `‚Ä¢ –¢–∏–ø —á–∞—Ç–∞: ${chatType}\n`;
  info += `‚Ä¢ ID —á–∞—Ç–∞: \`${chatId}\`\n`;
  info += `‚Ä¢ ID –±–æ—Ç–∞: ${botId}\n`;

  if (chatType === "group" || chatType === "supergroup") {
    try {
      const chatMember = await ctx.getChatMember(botId);
      info += `‚Ä¢ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: ${chatMember.status}\n`;

      if (chatMember.status === "administrator") {
        info += `‚Ä¢ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: ‚úÖ\n`;
        info += `‚Ä¢ –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: ${
          chatMember.can_read_all_group_messages ? "‚úÖ" : "‚ùå"
        }\n`;
      } else {
        info += `‚Ä¢ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞: ‚ùå\n`;
      }
    } catch (error) {
      info += `‚Ä¢ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤: ${error.message}\n`;
    }

    info += `\n‚ö†Ô∏è **–í–ê–ñ–ù–û –¥–ª—è –≥—Ä—É–ø–ø:**\n`;
    info += `–î–ª—è —Ä–∞–±–æ—Ç—ã –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –≥—Ä—É–ø–ø–µ, –±–æ—Ç –¥–æ–ª–∂–µ–Ω:\n`;
    info += `1. –ë—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã\n`;
    info += `2. –ò–º–µ—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π "–†–µ–∂–∏–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏" –≤ @BotFather\n\n`;
    info += `**–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:**\n`;
    info += `1. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã\n`;
    info += `2. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @BotFather:\n`;
    info += `   ‚Ä¢ /mybots ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞\n`;
    info += `   ‚Ä¢ Bot Settings ‚Üí Group Privacy\n`;
    info += `   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ "Turn off"\n`;
    info += `3. –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–¥–∞–ª–∏—Ç–µ –∏ –∑–∞–Ω–æ–≤–æ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É\n`;
  } else {
    info += `\n‚úÖ –í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –≤—Å–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å!`;
  }

  await ctx.reply(info, { parse_mode: "Markdown" });
}

async function handleDebugCharacters(ctx) {
  const telegramId = ctx.from.id;
  const chatId = ctx.chat.id;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const db = require("../database");
    const user = await db.get("SELECT * FROM users WHERE telegram_id = ?", [
      telegramId,
    ]);

    if (!user) {
      await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    const characters = await db.all(
      "SELECT * FROM characters WHERE user_id = ? AND chat_id = ? ORDER BY created_at DESC",
      [user.id, chatId]
    );

    let message = `üîç **–û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π**\n\n`;
    message += `Telegram ID: \`${telegramId}\`\n`;
    message += `User DB ID: \`${user.id}\`\n`;
    message += `Chat ID: \`${chatId}\`\n\n`;

    if (characters.length === 0) {
      message += `‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
    } else {
      message += `**–ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: ${characters.length}**\n\n`;

      for (const char of characters) {
        message += `**${char.name}**\n`;
        message += `‚Ä¢ ID: ${char.id}\n`;
        message += `‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: ${char.is_active ? "‚úÖ" : "‚ùå"}\n`;
        message += `‚Ä¢ –°–æ–∑–¥–∞–Ω: ${new Date(char.created_at).toLocaleString()}\n`;
        message += `‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${char.level}\n\n`;
      }
    }

    await ctx.reply(message, { parse_mode: "Markdown" });
  } catch (error) {
    const errorMessage = escapeMarkdown(error.message);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`, { parse_mode: "Markdown" });
  }
}

// –ü—Ä—è–º–æ–π –≤–≤–æ–¥ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É


    
module.exports = {
  setupCommands,
};
