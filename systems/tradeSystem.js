const db = require('../database');
const { log } = require('../utils/logger');

class TradeSystem {
  constructor() {
    this.activeTrades = new Map(); // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
    this.TRADE_TIMEOUT = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ
  }

  // –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
  async createTradeOffer(fromCharacter, toCharacter, offer) {
    const tradeId = `${fromCharacter.id}_${toCharacter.id}_${Date.now()}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    const validation = await this.validateOffer(fromCharacter.id, offer.giving);
    if (!validation.valid) {
      return { success: false, message: validation.message };
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    const trade = {
      id: tradeId,
      from: {
        character: fromCharacter,
        giving: offer.giving || { items: [], gold: 0 }
      },
      to: {
        character: toCharacter,
        giving: offer.requesting || { items: [], gold: 0 }
      },
      createdAt: Date.now(),
      status: 'pending'
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
    this.activeTrades.set(tradeId, trade);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    setTimeout(() => {
      if (this.activeTrades.has(tradeId)) {
        this.cancelTrade(tradeId);
      }
    }, this.TRADE_TIMEOUT);

    return { success: true, tradeId, trade };
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  async validateOffer(characterId, offer) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–ª–æ—Ç–æ
    if (offer.gold > 0) {
      const character = await db.get(
        'SELECT gold FROM characters WHERE id = ?',
        [characterId]
      );
      
      if (!character || character.gold < offer.gold) {
        return { valid: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!' };
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
    for (const item of offer.items) {
      const inventory = await db.get(`
        SELECT inv.quantity, i.name 
        FROM inventory inv
        JOIN items i ON inv.item_id = i.id
        WHERE inv.character_id = ? AND inv.item_id = ?
      `, [characterId, item.id]);

      if (!inventory || inventory.quantity < item.quantity) {
        return { 
          valid: false, 
          message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${inventory?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'}` 
        };
      }
    }

    return { valid: true };
  }

  // –ü—Ä–∏–Ω—è—Ç—å –æ–±–º–µ–Ω
  async acceptTrade(tradeId, acceptingCharacterId) {
    const trade = this.activeTrades.get(tradeId);
    
    if (!trade) {
      return { success: false, message: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ!' };
    }

    if (trade.to.character.id !== acceptingCharacterId) {
      return { success: false, message: '–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–º–µ–Ω
    const fromValidation = await this.validateOffer(trade.from.character.id, trade.from.giving);
    const toValidation = await this.validateOffer(trade.to.character.id, trade.to.giving);

    if (!fromValidation.valid) {
      this.cancelTrade(tradeId);
      return { success: false, message: `–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${fromValidation.message}` };
    }

    if (!toValidation.valid) {
      this.cancelTrade(tradeId);
      return { success: false, message: `–í—ã: ${toValidation.message}` };
    }

    try {
      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await db.run('BEGIN TRANSACTION');

      // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∑–æ–ª–æ—Ç–æ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫–æ –≤—Ç–æ—Ä–æ–º—É
      await this.transferItems(
        trade.from.character.id, 
        trade.to.character.id, 
        trade.from.giving
      );

      // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∑–æ–ª–æ—Ç–æ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∫ –ø–µ—Ä–≤–æ–º—É
      await this.transferItems(
        trade.to.character.id, 
        trade.from.character.id, 
        trade.to.giving
      );

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      await db.run(`
        INSERT INTO trade_history (
          from_character_id, to_character_id,
          from_items, from_gold,
          to_items, to_gold,
          completed_at
        ) VALUES (?, ?, ?, ?, ?, ?, datetime('now'))
      `, [
        trade.from.character.id,
        trade.to.character.id,
        JSON.stringify(trade.from.giving.items),
        trade.from.giving.gold,
        JSON.stringify(trade.to.giving.items),
        trade.to.giving.gold
      ]);

      await db.run('COMMIT');
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
      this.activeTrades.delete(tradeId);

      log(`–û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –º–µ–∂–¥—É ${trade.from.character.name} –∏ ${trade.to.character.name}`);

      return { 
        success: true, 
        trade,
        message: '–û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!' 
      };

    } catch (error) {
      await db.run('ROLLBACK');
      log(`–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞: ${error.message}`, 'error');
      return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞!' };
    }
  }

  // –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã
  async transferItems(fromId, toId, items) {
    // –ü–µ—Ä–µ–¥–∞–µ–º –∑–æ–ª–æ—Ç–æ
    if (items.gold > 0) {
      await db.run(
        'UPDATE characters SET gold = gold - ? WHERE id = ?',
        [items.gold, fromId]
      );
      await db.run(
        'UPDATE characters SET gold = gold + ? WHERE id = ?',
        [items.gold, toId]
      );
    }

    // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
    for (const item of items.items) {
      // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      await db.run(`
        UPDATE inventory 
        SET quantity = quantity - ? 
        WHERE character_id = ? AND item_id = ?
      `, [item.quantity, fromId, item.id]);

      // –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 0
      await db.run(
        'DELETE FROM inventory WHERE character_id = ? AND item_id = ? AND quantity <= 0',
        [fromId, item.id]
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
      const existing = await db.get(
        'SELECT * FROM inventory WHERE character_id = ? AND item_id = ?',
        [toId, item.id]
      );

      if (existing) {
        await db.run(
          'UPDATE inventory SET quantity = quantity + ? WHERE id = ?',
          [item.quantity, existing.id]
        );
      } else {
        await db.run(
          'INSERT INTO inventory (character_id, item_id, quantity) VALUES (?, ?, ?)',
          [toId, item.id, item.quantity]
        );
      }
    }
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –æ–±–º–µ–Ω
  cancelTrade(tradeId) {
    const trade = this.activeTrades.get(tradeId);
    if (trade) {
      this.activeTrades.delete(tradeId);
      log(`–û–±–º–µ–Ω ${tradeId} –æ—Ç–º–µ–Ω–µ–Ω`);
      return true;
    }
    return false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  getActiveTradesForCharacter(characterId) {
    const trades = [];
    
    for (const [id, trade] of this.activeTrades) {
      if (trade.from.character.id === characterId || 
          trade.to.character.id === characterId) {
        trades.push({ id, ...trade });
      }
    }

    return trades;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  formatTradeOffer(trade) {
    let message = `üì¶ **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞**\n\n`;
    
    // –û—Ç –∫–æ–≥–æ
    message += `**${trade.from.character.name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:**\n`;
    if (trade.from.giving.gold > 0) {
      message += `üí∞ ${trade.from.giving.gold} –∑–æ–ª–æ—Ç–∞\n`;
    }
    for (const item of trade.from.giving.items) {
      message += `üì¶ ${item.name} x${item.quantity}\n`;
    }
    if (trade.from.giving.gold === 0 && trade.from.giving.items.length === 0) {
      message += `_–ù–∏—á–µ–≥–æ_\n`;
    }

    message += `\n**–í –æ–±–º–µ–Ω –Ω–∞:**\n`;
    if (trade.to.giving.gold > 0) {
      message += `üí∞ ${trade.to.giving.gold} –∑–æ–ª–æ—Ç–∞\n`;
    }
    for (const item of trade.to.giving.items) {
      message += `üì¶ ${item.name} x${item.quantity}\n`;
    }
    if (trade.to.giving.gold === 0 && trade.to.giving.items.length === 0) {
      message += `_–ù–∏—á–µ–≥–æ_\n`;
    }

    const timeLeft = Math.ceil((this.TRADE_TIMEOUT - (Date.now() - trade.createdAt)) / 1000 / 60);
    message += `\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å ${timeLeft} –º–∏–Ω.`;

    return message;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
module.exports = new TradeSystem();