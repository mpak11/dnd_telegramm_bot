// –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞

const config = require('../../../config/config');
const CreationUI = require('../utils/CreationUI');
const { log } = require('../../../utils/logger');

class ClassSelector {
  constructor(sessionManager) {
    this.sessionManager = sessionManager;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
  async show(ctx) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const session = this.sessionManager.get(userId, chatId);

    if (!session) {
      await ctx.reply("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create");
      return false;
    }

    const selectedRace = session.data.race;
    const message = CreationUI.createClassMessage(selectedRace);
    const buttons = CreationUI.createClassButtons(selectedRace);

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: buttons,
      },
    });

    return true;
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
  async handleSelection(ctx, characterClass) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;

    log(`[ClassSelector] –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ ${characterClass} –æ—Ç ${userId} –≤ —á–∞—Ç–µ ${chatId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    if (!this.sessionManager.isValid(userId, chatId, 'class')) {
      await ctx.answerCbQuery("–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create");
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å
    const classConfig = config.CLASSES[characterClass];
    if (!classConfig) {
      await ctx.answerCbQuery("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å!");
      return false;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    const session = this.sessionManager.update(userId, chatId, {
      step: 'name',
      data: { 
        ...this.sessionManager.get(userId, chatId).data,
        class: characterClass 
      }
    });

    log(`[ClassSelector] –ö–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω: ${characterClass}, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏`);

    await ctx.answerCbQuery(`–í—ã–±—Ä–∞–Ω –∫–ª–∞—Å—Å: ${classConfig.name}!`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ
    await ctx.editMessageText(
      `${classConfig.emoji} **${classConfig.name}**\n\n` +
      `${classConfig.description}\n\n` +
      `‚ù§Ô∏è –ë–∞–∑–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: ${classConfig.baseHP}\n` +
      `üìà HP –∑–∞ —É—Ä–æ–≤–µ–Ω—å: ${classConfig.hpPerLevel}\n` +
      `üìä –û—Å–Ω–æ–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${config.STATS[classConfig.primaryStat].emoji} ` +
      `${config.STATS[classConfig.primaryStat].name}\n\n` +
      `‚úÖ –ö–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω!`,
      { parse_mode: "Markdown" }
    );

    await new Promise(resolve => setTimeout(resolve, 1500));

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    await ctx.reply(
      `**–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞**\n\n` +
      `–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤\n` +
      `–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã\n\n` +
      `‚ö†Ô∏è **–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ:**\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setname –ò–º—è–ü–µ—Ä—Å–æ–Ω–∞–∂–∞\n` +
      `–ù–∞–ø—Ä–∏–º–µ—Ä: /setname –ì–æ—Ä–∞–∫ –°–∏–ª—å–Ω—ã–π`,
      { parse_mode: "Markdown" }
    );

    return true;
  }
}

module.exports = ClassSelector;