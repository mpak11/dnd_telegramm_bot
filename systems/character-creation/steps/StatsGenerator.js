// –®–∞–≥ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫

const config = require('../../../config/config');
const { Character } = require('../../../database/models');
const CreationUI = require('../utils/CreationUI');
const { log } = require('../../../utils/logger');

class StatsGenerator {
  constructor(sessionManager) {
    this.sessionManager = sessionManager;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  async show(ctx, isNewMessage = false) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const session = this.sessionManager.get(userId, chatId);

    if (!session) return false;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const baseStats = Character.rollStats();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    this.sessionManager.update(userId, chatId, {
      data: {
        ...session.data,
        stats: baseStats
      }
    });

    const message = CreationUI.createStatsMessage(baseStats, session.data.race);
    const fullMessage = message + 
      "\n‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n" +
      "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å";

    const keyboard = {
      inline_keyboard: [
        [
          { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: "stats_accept" },
          { text: "üé≤ –ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å", callback_data: "stats_reroll" },
        ],
      ],
    };

    if (isNewMessage) {
      // –î–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏)
      await ctx.reply(fullMessage, {
        parse_mode: "Markdown",
        reply_markup: keyboard,
      });
    } else {
      // –î–ª—è callback (–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑)
      await this.showAnimated(ctx, baseStats, session.data.race);
    }

    return true;
  }

  // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  async showAnimated(ctx, baseStats, race) {
    const animMessage = await ctx.reply(
      `üé≤ **–ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...**\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ 4d6, –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∏–Ω–∏–º—É–º`,
      { parse_mode: "Markdown" }
    );

    let message = `**üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤:**\n\n`;
    const raceConfig = config.RACES[race];

    // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    for (const [stat, value] of Object.entries(baseStats)) {
      await new Promise(resolve => setTimeout(resolve, 500));

      const statConfig = config.STATS[stat];
      const raceBonus = raceConfig.bonuses[stat];
      const finalValue = value + raceBonus;
      const modifier = Math.floor((finalValue - 10) / 2);

      message += `${statConfig.emoji} ${statConfig.name}: **${finalValue}** `;
      message += `(${modifier >= 0 ? "+" : ""}${modifier})\n`;

      try {
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          animMessage.message_id,
          null,
          message,
          { parse_mode: "Markdown" }
        );
      } catch (error) {
        log(`[StatsGenerator] –û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: ${error.message}`, "warning");
      }
    }

    await new Promise(resolve => setTimeout(resolve, 1000));

    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const fullMessage = message + 
      "\n‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n" +
      "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å";

    try {
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        animMessage.message_id,
        null,
        fullMessage,
        {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: "stats_accept" },
                { text: "üé≤ –ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å", callback_data: "stats_reroll" },
              ],
            ],
          },
        }
      );
    } catch (error) {
      log(`[StatsGenerator] –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`, "warning");
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
  async handleDecision(ctx, decision) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;

    if (!this.sessionManager.isValid(userId, chatId, 'stats')) {
      await ctx.answerCbQuery("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create");
      return false;
    }

    if (decision === 'reroll') {
      await ctx.answerCbQuery("üé≤ –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º...");
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      const session = this.sessionManager.get(userId, chatId);
      const baseStats = Character.rollStats();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
      this.sessionManager.update(userId, chatId, {
        data: {
          ...session.data,
          stats: baseStats
        }
      });

      const message = CreationUI.createStatsMessage(baseStats, session.data.race);
      const fullMessage = message + 
        "\n‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n" +
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å";

      await ctx.editMessageText(fullMessage, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: "stats_accept" },
              { text: "üé≤ –ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å", callback_data: "stats_reroll" },
            ],
          ],
        },
      });

      return true;
    }

    // decision === 'accept'
    await ctx.answerCbQuery("‚úÖ –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...");
    return true;
  }
}

module.exports = StatsGenerator;