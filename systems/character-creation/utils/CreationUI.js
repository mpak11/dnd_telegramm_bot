// UI —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

const { Markup } = require('telegraf');
const config = require('../../../config/config');

class CreationUI {
  // –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—ã
  static createRaceButtons() {
    const races = Object.entries(config.RACES);
    const buttons = [];

    for (let i = 0; i < races.length; i += 2) {
      const row = [];

      row.push({
        text: `${races[i][1].emoji} ${races[i][1].name}`,
        callback_data: `race_${races[i][0]}`,
      });

      if (races[i + 1]) {
        row.push({
          text: `${races[i + 1][1].emoji} ${races[i + 1][1].name}`,
          callback_data: `race_${races[i + 1][0]}`,
        });
      }

      buttons.push(row);
    }

    return buttons;
  }

  // –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
  static createClassButtons(selectedRace) {
    const classes = Object.entries(config.CLASSES);
    const buttons = [];

    for (let i = 0; i < classes.length; i += 2) {
      const row = [];

      const class1 = classes[i];
      const isRecommended1 = class1[1].recommendedRaces.includes(selectedRace);
      row.push({
        text: `${class1[1].emoji} ${class1[1].name}${isRecommended1 ? " ‚≠ê" : ""}`,
        callback_data: `class_${class1[0]}`,
      });

      if (classes[i + 1]) {
        const class2 = classes[i + 1];
        const isRecommended2 = class2[1].recommendedRaces.includes(selectedRace);
        row.push({
          text: `${class2[1].emoji} ${class2[1].name}${isRecommended2 ? " ‚≠ê" : ""}`,
          callback_data: `class_${class2[0]}`,
        });
      }

      buttons.push(row);
    }

    return buttons;
  }

  // –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å–µ
  static createRaceMessage() {
    const races = Object.entries(config.RACES);
    
    return (
      `üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞**\n\n` +
      `**–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É**\n\n` +
      races
        .map(([key, race]) => 
          `${race.emoji} **${race.name}** - ${race.description}`
        )
        .join("\n")
    );
  }

  // –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∞—Å—Å–µ
  static createClassMessage(selectedRace) {
    const classes = Object.entries(config.CLASSES);
    
    return (
      `üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞**\n\n` +
      `**–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å**\n` +
      `‚≠ê –æ—Ç–º–µ—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –≤–∞—à–µ–π —Ä–∞—Å—ã\n\n` +
      classes
        .map(([key, cls]) => {
          const isRecommended = cls.recommendedRaces.includes(selectedRace);
          return (
            `${cls.emoji} **${cls.name}** - ${cls.description}` +
            `\n   HP: ${cls.baseHP}, –û—Å–Ω–æ–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${
              config.STATS[cls.primaryStat].name
            }` +
            (isRecommended ? " ‚≠ê" : "")
          );
        })
        .join("\n\n")
    );
  }

  // –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å–æ–≤—ã—Ö –±–æ–Ω—É—Å–∞—Ö
  static createRaceBonusMessage(race) {
    const raceConfig = config.RACES[race];
    
    const bonusText = Object.entries(raceConfig.bonuses)
      .filter(([_, value]) => value > 0)
      .map(([stat, value]) =>
        `${config.STATS[stat].emoji} ${config.STATS[stat].name}: +${value}`
      )
      .join("\n");

    const abilitiesText = raceConfig.abilities
      .map((a) => `‚Ä¢ ${a}`)
      .join("\n");

    return (
      `${raceConfig.emoji} **${raceConfig.name}**\n\n` +
      `**–†–∞—Å–æ–≤—ã–µ –±–æ–Ω—É—Å—ã:**\n${bonusText}\n\n` +
      `**–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:**\n${abilitiesText}`
    );
  }

  // –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
  static createStatsMessage(baseStats, race) {
    const raceConfig = config.RACES[race];
    let message = `**üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤:**\n\n`;

    for (const [stat, value] of Object.entries(baseStats)) {
      const statConfig = config.STATS[stat];
      const raceBonus = raceConfig.bonuses[stat];
      const finalValue = value + raceBonus;
      const modifier = Math.floor((finalValue - 10) / 2);

      message += `${statConfig.emoji} ${statConfig.name}: **${finalValue}** `;
      message += `(${modifier >= 0 ? "+" : ""}${modifier})`;
      
      if (raceBonus > 0) {
        message += ` _[${value} + ${raceBonus}]_`;
      }
      
      message += '\n';
    }

    return message;
  }
}

module.exports = CreationUI;