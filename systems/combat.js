// –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Ä–æ–Ω–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –æ—Ç –∫–≤–µ—Å—Ç–æ–≤

const Dice = require('../utils/dice');
const config = require('../config/config');
const { log } = require('../utils/logger');

class CombatSystem {
  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–µ—Å—Ç–∞ –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É
  static async applyQuestResult(character, questResult) {
    const results = {
      damage: null,
      effects: [],
      statusText: []
    };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω
    if (questResult.damage) {
      results.damage = await this.applyDamage(character, questResult.damage);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    if (questResult.effects) {
      results.effects = await this.applyEffects(character, questResult.effects);
    }

    return results;
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É—Ä–æ–Ω
  static async applyDamage(character, damageFormula) {
    const damageRoll = Dice.rollDice(damageFormula);
    const actualDamage = damageRoll.total;

    // –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –±—Ä–æ–Ω–∏ (–µ—Å–ª–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
    // const defense = await character.getTotalDefense();
    // const finalDamage = Math.max(1, actualDamage - defense);

    await character.modifyHP(-actualDamage);

    log(`üíî ${character.name} –ø–æ–ª—É—á–∏–ª ${actualDamage} —É—Ä–æ–Ω–∞ (${damageRoll.breakdown})`);

    return {
      formula: damageFormula,
      rolled: damageRoll.rolls,
      total: actualDamage,
      currentHP: character.hp_current,
      maxHP: character.hp_max,
      isDead: character.hp_current <= 0
    };
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã
  static async applyEffects(character, effects) {
    const appliedEffects = [];
    const db = require('../database');

    for (const [effect, value] of Object.entries(effects)) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º duration
      if (effect === 'duration') continue;

      // –û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
      if (effect === 'level_loss' && value === true) {
        // –ü–æ—Ç–µ—Ä—è —É—Ä–æ–≤–Ω—è
        character.level = Math.max(1, character.level - 1);
        character.experience = config.XP_PER_LEVEL[character.level - 1] || 0;
        await db.run(
          'UPDATE characters SET level = ?, experience = ? WHERE id = ?',
          [character.level, character.experience, character.id]
        );
        appliedEffects.push({ type: 'level_loss', text: 'üìâ –ü–æ—Ç–µ—Ä—è–Ω —É—Ä–æ–≤–µ–Ω—å!' });
        continue;
      }

      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      if (['strength', 'dexterity', 'intelligence', 'wisdom', 'constitution', 'charisma'].includes(effect)) {
        await this.applyStatEffect(character.id, effect, value, effects.duration || 0);
        const sign = value > 0 ? '+' : '';
        appliedEffects.push({
          type: 'stat',
          stat: effect,
          value: value,
          duration: effects.duration,
          text: `${config.STATS[effect].emoji} ${sign}${value} –∫ ${config.STATS[effect].name}`
        });
      }

      // –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞ –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      if (effect === 'all_stats') {
        for (const stat of Object.keys(config.STATS)) {
          await this.applyStatEffect(character.id, stat, value, effects.duration || 0);
        }
        const sign = value > 0 ? '+' : '';
        appliedEffects.push({
          type: 'all_stats',
          value: value,
          duration: effects.duration,
          text: `üìä ${sign}${value} –∫–æ –≤—Å–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º`
        });
      }

      // –û—Å–æ–±—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (['cursed', 'dragon_enemy', 'demon_mark', 'madness', 'soul_trapped'].includes(effect)) {
        await this.applySpecialEffect(character.id, effect, effects.duration || -1);
        appliedEffects.push({
          type: 'special',
          effect: effect,
          text: this.getSpecialEffectText(effect)
        });
      }

      // –¢–∏—Ç—É–ª—ã
      if (effect === 'title') {
        await this.applyTitle(character.id, value);
        appliedEffects.push({
          type: 'title',
          title: value,
          text: `üèÜ –ü–æ–ª—É—á–µ–Ω —Ç–∏—Ç—É–ª: "${value}"`
        });
      }
    }

    return appliedEffects;
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
  static async applyStatEffect(characterId, stat, modifier, duration) {
    const db = require('../database');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await db.run(`
      CREATE TABLE IF NOT EXISTS character_effects (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        character_id INTEGER NOT NULL,
        effect_type TEXT NOT NULL,
        effect_value INTEGER NOT NULL,
        expires_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (character_id) REFERENCES characters(id)
      )
    `);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    let expiresAt = null;
    if (duration > 0) {
      expiresAt = new Date();
      expiresAt.setHours(expiresAt.getHours() + duration);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
    await db.run(`
      INSERT INTO character_effects (character_id, effect_type, effect_value, expires_at)
      VALUES (?, ?, ?, ?)
    `, [characterId, stat, modifier, expiresAt]);
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç
  static async applySpecialEffect(characterId, effect, duration) {
    await this.applyStatEffect(characterId, `special_${effect}`, 1, duration);
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–∏—Ç—É–ª
  static async applyTitle(characterId, title) {
    const db = require('../database');
    
    await db.run(`
      CREATE TABLE IF NOT EXISTS character_titles (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        character_id INTEGER NOT NULL,
        title TEXT NOT NULL,
        obtained_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (character_id) REFERENCES characters(id)
      )
    `);

    await db.run(
      'INSERT INTO character_titles (character_id, title) VALUES (?, ?)',
      [characterId, title]
    );
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  static async getActiveEffects(characterId) {
    const db = require('../database');
    
    // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    await db.run(
      'DELETE FROM character_effects WHERE expires_at IS NOT NULL AND expires_at < datetime("now")'
    );

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ
    const effects = await db.all(`
      SELECT * FROM character_effects 
      WHERE character_id = ? AND (expires_at IS NULL OR expires_at > datetime("now"))
    `, [characterId]);

    return effects;
  }

  // –ü–æ—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å —É—á–µ—Ç–æ–º —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  static async calculateTotalBonus(character, stat) {
    let bonus = character.getRollBonus(stat);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    const effects = await this.getActiveEffects(character.id);
    for (const effect of effects) {
      if (effect.effect_type === stat || effect.effect_type === 'all_stats') {
        bonus += effect.effect_value;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
    // const equipment = await character.getEquippedItems();
    // bonus += this.getEquipmentBonus(equipment, stat);

    return bonus;
  }

  // –¢–µ–∫—Å—Ç –¥–ª—è –æ—Å–æ–±—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  static getSpecialEffectText(effect) {
    const texts = {
      cursed: 'üíÄ –í—ã –ø—Ä–æ–∫–ª—è—Ç—ã!',
      dragon_enemy: 'üêâ –î—Ä–∞–∫–æ–Ω—ã —Å—á–∏—Ç–∞—é—Ç –≤–∞—Å –≤—Ä–∞–≥–æ–º!',
      demon_mark: 'üòà –ù–∞ –≤–∞—Å –º–µ—Ç–∫–∞ –¥–µ–º–æ–Ω–∞!',
      madness: 'üåÄ –í—ã –æ—Ö–≤–∞—á–µ–Ω—ã –±–µ–∑—É–º–∏–µ–º!',
      soul_trapped: 'üëª –í–∞—à–∞ –¥—É—à–∞ –≤ –ª–æ–≤—É—à–∫–µ!',
      water_breathing: 'üí® –í—ã –º–æ–∂–µ—Ç–µ –¥—ã—à–∞—Ç—å –ø–æ–¥ –≤–æ–¥–æ–π!',
      fire_vulnerability: 'üî• –£—è–∑–≤–∏–º–æ—Å—Ç—å –∫ –æ–≥–Ω—é!',
      demon_servant: 'üëπ –£ –≤–∞—Å –µ—Å—Ç—å –¥–µ–º–æ–Ω-—Å–ª—É–≥–∞!'
    };
    return texts[effect] || `‚ùì –û—Å–æ–±—ã–π —ç—Ñ—Ñ–µ–∫—Ç: ${effect}`;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  static formatCombatResults(results) {
    let text = '';

    // –£—Ä–æ–Ω
    if (results.damage) {
      text += `\nüíî **–ü–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω:** ${results.damage.total} (${results.damage.formula})`;
      text += `\n‚ù§Ô∏è **HP:** ${results.damage.currentHP}/${results.damage.maxHP}`;
      
      if (results.damage.isDead) {
        text += '\n\n‚ò†Ô∏è **–í–´ –ú–ï–†–¢–í–´!** –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ!';
      }
    }

    // –≠—Ñ—Ñ–µ–∫—Ç—ã
    if (results.effects.length > 0) {
      text += '\n\n**–ü–æ–ª—É—á–µ–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç—ã:**';
      for (const effect of results.effects) {
        text += `\n${effect.text}`;
        if (effect.duration && effect.duration > 0) {
          text += ` (${effect.duration} —á–∞—Å–æ–≤)`;
        } else if (effect.duration === -1) {
          text += ' (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ)';
        }
      }
    }

    return text;
  }
}

module.exports = CombatSystem;