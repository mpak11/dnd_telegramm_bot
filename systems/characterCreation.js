// –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π

const { Markup } = require("telegraf");
const config = require("../config/config");
const { Character } = require("../database/models");
const { log } = require("../utils/logger");
const { escapeMarkdown } = require("../utils/markdown");

class CharacterCreationSystem {
  constructor() {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    this.creationSessions = new Map();

    // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => this.cleanupSessions(), 5 * 60 * 1000);
  }

  // –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  async startCreation(ctx) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const existing = await Character.findActive(userId, chatId);
    if (existing) {
      await ctx.reply(
        `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂: **${existing.name}**!\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hero –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`,
        { parse_mode: "Markdown" }
      );
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    const sessionKey = `${userId}_${chatId}`;
    this.creationSessions.set(sessionKey, {
      userId,
      chatId,
      step: "race",
      data: {},
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞—Å—ã
    await this.showRaceSelection(ctx);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–∞—Å—ã
  async showRaceSelection(ctx) {
    log(`[CharCreate] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞—Å—ã`);

    const races = Object.entries(config.RACES);
    const buttons = [];

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for (let i = 0; i < races.length; i += 2) {
      const row = [];

      row.push({
        text: `${races[i][1].emoji} ${races[i][1].name}`,
        callback_data: `race_${races[i][0]}`,
      });

      if (races[i + 1]) {
        row.push({
          text: `${races[i + 1][1].emoji} ${races[i + 1][1].name}`,
          callback_data: `race_${races[i + 1][0]}`,
        });
      }

      buttons.push(row);
    }

    const message =
      `üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞**\n\n` +
      `**–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É**\n\n` +
      races
        .map(
          ([key, race]) =>
            `${race.emoji} **${race.name}** - ${race.description}`
        )
        .join("\n");

    log(`[CharCreate] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ${buttons.length} —Ä—è–¥–∞–º–∏ –∫–Ω–æ–ø–æ–∫`);

    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: buttons,
      },
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ä–∞—Å—ã
  async handleRaceSelection(ctx, race) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const sessionKey = `${userId}_${chatId}`;
    const session = this.creationSessions.get(sessionKey);

    log(`[CharCreate] –í—ã–±–æ—Ä —Ä–∞—Å—ã ${race} –æ—Ç ${userId} –≤ —á–∞—Ç–µ ${chatId}`);

    if (!session || session.step !== "race") {
      await ctx.answerCbQuery("–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create");
      return;
    }

    const raceConfig = config.RACES[race];
    if (!raceConfig) {
      await ctx.answerCbQuery("–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–∞—Å–∞!");
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    session.data.race = race;
    session.step = "class";
    session.timestamp = Date.now(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

    log(`[CharCreate] –†–∞—Å–∞ –≤—ã–±—Ä–∞–Ω–∞: ${race}, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞—Å—Å–∞`);

    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞
    await ctx.answerCbQuery(`–í—ã–±—Ä–∞–Ω–∞ —Ä–∞—Å–∞: ${raceConfig.name}!`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    await ctx.editMessageText(
      `${raceConfig.emoji} **${raceConfig.name}**\n\n` +
        `${raceConfig.description}\n\n` +
        `üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–æ–≤—ã–µ –±–æ–Ω—É—Å—ã...`,
      { parse_mode: "Markdown" }
    );

    await new Promise((resolve) => setTimeout(resolve, 1500));

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã
    const bonusText = Object.entries(raceConfig.bonuses)
      .filter(([_, value]) => value > 0)
      .map(
        ([stat, value]) =>
          `${config.STATS[stat].emoji} ${config.STATS[stat].name}: +${value}`
      )
      .join("\n");

    const abilitiesText = raceConfig.abilities.map((a) => `‚Ä¢ ${a}`).join("\n");

    await ctx.editMessageText(
      `${raceConfig.emoji} **${raceConfig.name}**\n\n` +
        `**–†–∞—Å–æ–≤—ã–µ –±–æ–Ω—É—Å—ã:**\n${bonusText}\n\n` +
        `**–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:**\n${abilitiesText}\n\n` +
        `‚úÖ –†–∞—Å–∞ –≤—ã–±—Ä–∞–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞—Å—Å–∞...`,
      { parse_mode: "Markdown" }
    );

    await new Promise((resolve) => setTimeout(resolve, 1500));

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
    await this.showClassSelection(ctx);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
  async showClassSelection(ctx) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const sessionKey = `${userId}_${chatId}`;
    const session = this.creationSessions.get(sessionKey);

    if (!session) {
      await ctx.reply("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create");
      return;
    }

    const selectedRace = session.data.race;
    const classes = Object.entries(config.CLASSES);
    const buttons = [];

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for (let i = 0; i < classes.length; i += 2) {
      const row = [];

      const class1 = classes[i];
      const isRecommended1 = class1[1].recommendedRaces.includes(selectedRace);
      row.push({
        text: `${class1[1].emoji} ${class1[1].name}${
          isRecommended1 ? " ‚≠ê" : ""
        }`,
        callback_data: `class_${class1[0]}`,
      });

      if (classes[i + 1]) {
        const class2 = classes[i + 1];
        const isRecommended2 =
          class2[1].recommendedRaces.includes(selectedRace);
        row.push({
          text: `${class2[1].emoji} ${class2[1].name}${
            isRecommended2 ? " ‚≠ê" : ""
          }`,
          callback_data: `class_${class2[0]}`,
        });
      }

      buttons.push(row);
    }

    const message =
      `üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞**\n\n` +
      `**–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å**\n` +
      `‚≠ê –æ—Ç–º–µ—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –≤–∞—à–µ–π —Ä–∞—Å—ã\n\n` +
      classes
        .map(([key, cls]) => {
          const isRecommended = cls.recommendedRaces.includes(selectedRace);
          return (
            `${cls.emoji} **${cls.name}** - ${cls.description}` +
            `\n   HP: ${cls.baseHP}, –û—Å–Ω–æ–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${
              config.STATS[cls.primaryStat].name
            }` +
            (isRecommended ? " ‚≠ê" : "")
          );
        })
        .join("\n\n");

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: buttons,
      },
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
  async handleClassSelection(ctx, characterClass) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const sessionKey = `${userId}_${chatId}`;
    const session = this.creationSessions.get(sessionKey);

    log(
      `[CharCreate] –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ ${characterClass} –æ—Ç ${userId} –≤ —á–∞—Ç–µ ${chatId}`
    );

    if (!session || session.step !== "class") {
      await ctx.answerCbQuery("–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create");
      return;
    }

    const classConfig = config.CLASSES[characterClass];
    if (!classConfig) {
      await ctx.answerCbQuery("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å!");
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    session.data.class = characterClass;
    session.step = "name";
    session.timestamp = Date.now(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

    log(`[CharCreate] –ö–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω: ${characterClass}, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏`);

    await ctx.answerCbQuery(`–í—ã–±—Ä–∞–Ω –∫–ª–∞—Å—Å: ${classConfig.name}!`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ
    await ctx.editMessageText(
      `${classConfig.emoji} **${classConfig.name}**\n\n` +
        `${classConfig.description}\n\n` +
        `‚ù§Ô∏è –ë–∞–∑–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: ${classConfig.baseHP}\n` +
        `üìà HP –∑–∞ —É—Ä–æ–≤–µ–Ω—å: ${classConfig.hpPerLevel}\n` +
        `üìä –û—Å–Ω–æ–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${
          config.STATS[classConfig.primaryStat].emoji
        } ${config.STATS[classConfig.primaryStat].name}\n\n` +
        `‚úÖ –ö–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω!`,
      { parse_mode: "Markdown" }
    );

    await new Promise((resolve) => setTimeout(resolve, 1500));

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    await ctx.reply(
      `**–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞**\n\n` +
        `–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤\n` +
        `–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã\n\n` +
        `‚ö†Ô∏è **–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ:**\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setname –ò–º—è–ü–µ—Ä—Å–æ–Ω–∞–∂–∞\n` +
        `–ù–∞–ø—Ä–∏–º–µ—Ä: /setname –ì–æ—Ä–∞–∫ –°–∏–ª—å–Ω—ã–π`,
      { parse_mode: "Markdown" }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏
  async handleNameInput(ctx) {
    if (!ctx.message || !ctx.message.text) {
      return false;
    }

    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const chatType = ctx.chat.type;
    const sessionKey = `${userId}_${chatId}`;

    log(
      `[CharCreate] handleNameInput –≤—ã–∑–≤–∞–Ω: userId=${userId}, chatId=${chatId}, chatType=${chatType}, key=${sessionKey}`
    );

    const session = this.creationSessions.get(sessionKey);

    log(
      `[CharCreate] –ü–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –æ—Ç ${userId} –≤ —á–∞—Ç–µ ${chatId}, —Å–µ—Å—Å–∏—è: ${
        session ? "–Ω–∞–π–¥–µ–Ω–∞" : "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      }`
    );

    // –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–µ—Å—Å–∏–π
    if (!session) {
      log(
        `[CharCreate] –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏: ${Array.from(
          this.creationSessions.keys()
        ).join(", ")}`
      );

      // –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—Å—Ç—å —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ
      for (const [key, sess] of this.creationSessions.entries()) {
        if (sess.userId === userId) {
          log(
            `[CharCreate] –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å –∫–ª—é—á–æ–º ${key} (chatId: ${sess.chatId}, chatType: ${sess.chatType})`
          );
        }
      }
    }

    if (!session || session.step !== "name") {
      log(`[CharCreate] –°–µ—Å—Å–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: step = ${session?.step}`);
      return false; // –ù–µ –Ω–∞—à–∞ —Å–µ—Å—Å–∏—è
    }

    const name = ctx.message.text.trim();
    log(`[CharCreate] –í–≤–µ–¥–µ–Ω–æ –∏–º—è: "${name}"`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if (name.length < 2 || name.length > 20) {
      await ctx.reply("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!");
      return true;
    }

    if (!/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s-]+$/.test(name)) {
      await ctx.reply("‚ùå –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã!");
      return true;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    session.data.name = name;
    session.step = "stats";
    log(
      `[CharCreate] –ò–º—è –ø—Ä–∏–Ω—è—Ç–æ: "${name}", –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫`
    );

    // –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await ctx.reply(
      `‚úÖ –ò–º—è –ø—Ä–∏–Ω—è—Ç–æ: **${name}**\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏...`,
      { parse_mode: "Markdown" }
    );

    // –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    // –ü–µ—Ä–µ–¥–∞–µ–º true –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä isTextInput —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å reply –≤–º–µ—Å—Ç–æ edit
    await this.generateStats(ctx, true, true);
    return true;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
  async generateStats(ctx, isNewMessage = false, isTextInput = false) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const sessionKey = `${userId}_${chatId}`;
    const session = this.creationSessions.get(sessionKey);

    if (!session) return;

    const raceConfig = config.RACES[session.data.race];

    if (isNewMessage || isTextInput) {
      // –î–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–º–∞–Ω–¥–∞ /setname –∏–ª–∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
      const baseStats = Character.rollStats();
      session.data.stats = baseStats;

      let message = `**üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤:**\n\n`;

      for (const [stat, value] of Object.entries(baseStats)) {
        const statConfig = config.STATS[stat];
        const raceBonus = raceConfig.bonuses[stat];
        const finalValue = value + raceBonus;
        const modifier = Math.floor((finalValue - 10) / 2);

        message += `${statConfig.emoji} ${
          statConfig.name
        }: **${finalValue}** (${modifier >= 0 ? "+" : ""}${modifier})\n`;
      }

      message += "\n‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n";
      message += "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å";

      await ctx.reply(message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: "stats_accept" },
              { text: "üé≤ –ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å", callback_data: "stats_reroll" },
            ],
          ],
        },
      });
    } else {
      // –î–ª—è callback (–æ–±—ã—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const animMessage = await ctx.reply(
        `üé≤ **–ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...**\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ 4d6, –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∏–Ω–∏–º—É–º`,
        { parse_mode: "Markdown" }
      );

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      const baseStats = Character.rollStats();
      session.data.stats = baseStats;

      // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      let message = `**üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤:**\n\n`;

      for (const [stat, value] of Object.entries(baseStats)) {
        await new Promise((resolve) => setTimeout(resolve, 500));

        const statConfig = config.STATS[stat];
        const raceBonus = raceConfig.bonuses[stat];
        const finalValue = value + raceBonus;
        const modifier = Math.floor((finalValue - 10) / 2);

        message += `${statConfig.emoji} ${
          statConfig.name
        }: **${finalValue}** (${modifier >= 0 ? "+" : ""}${modifier})\n`;

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        try {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            animMessage.message_id,
            null,
            message,
            { parse_mode: "Markdown" }
          );
        } catch (error) {
          log(
            `[CharCreate] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`,
            "warning"
          );
        }
      }

      await new Promise((resolve) => setTimeout(resolve, 1000));

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      message += "\n‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n";
      message += "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å";

      try {
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          animMessage.message_id,
          null,
          message,
          {
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: [
                [
                  { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: "stats_accept" },
                  { text: "üé≤ –ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å", callback_data: "stats_reroll" },
                ],
              ],
            },
          }
        );
      } catch (error) {
        log(
          `[CharCreate] –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`,
          "warning"
        );
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.reply(message, {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: "stats_accept" },
                { text: "üé≤ –ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å", callback_data: "stats_reroll" },
              ],
            ],
          },
        });
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
  async handleStatsDecision(ctx, decision) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const sessionKey = `${userId}_${chatId}`;
    const session = this.creationSessions.get(sessionKey);

    if (!session || session.step !== "stats") {
      await ctx.answerCbQuery("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create");
      return;
    }

    if (decision === "reroll") {
      await ctx.answerCbQuery("üé≤ –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º...");

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      const baseStats = Character.rollStats();
      session.data.stats = baseStats;

      const raceConfig = config.RACES[session.data.race];

      let message = `**üé≤ –ù–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤:**\n\n`;

      for (const [stat, value] of Object.entries(baseStats)) {
        const statConfig = config.STATS[stat];
        const raceBonus = raceConfig.bonuses[stat];
        const finalValue = value + raceBonus;
        const modifier = Math.floor((finalValue - 10) / 2);

        message += `${statConfig.emoji} ${
          statConfig.name
        }: **${finalValue}** (${modifier >= 0 ? "+" : ""}${modifier})\n`;
      }

      message += "\n‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n";
      message += "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å";

      await ctx.editMessageText(message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: "stats_accept" },
              { text: "üé≤ –ü–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å", callback_data: "stats_reroll" },
            ],
          ],
        },
      });

      return;
    }

    // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    await ctx.answerCbQuery("‚úÖ –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...");

    try {
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
      await ctx.editMessageText(
        `‚ú® **–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...**\n\n` + `üé≠ –§–æ—Ä–º–∏—Ä—É–µ–º –ª–∏—á–Ω–æ—Å—Ç—å...`,
        { parse_mode: "Markdown" }
      );

      await new Promise((resolve) => setTimeout(resolve, 1000));

      await ctx.editMessageText(
        `‚ú® **–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...**\n\n` +
          `üé≠ –§–æ—Ä–º–∏—Ä—É–µ–º –ª–∏—á–Ω–æ—Å—Ç—å...\n` +
          `‚ö° –ù–∞–¥–µ–ª—è–µ–º —Å–∏–ª–æ–π...`,
        { parse_mode: "Markdown" }
      );

      await new Promise((resolve) => setTimeout(resolve, 1000));

      await ctx.editMessageText(
        `‚ú® **–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...**\n\n` +
          `üé≠ –§–æ—Ä–º–∏—Ä—É–µ–º –ª–∏—á–Ω–æ—Å—Ç—å...\n` +
          `‚ö° –ù–∞–¥–µ–ª—è–µ–º —Å–∏–ª–æ–π...\n` +
          `üåü –î–∞—Ä—É–µ–º —Å—É–¥—å–±—É...`,
        { parse_mode: "Markdown" }
      );

      await new Promise((resolve) => setTimeout(resolve, 1000));

      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { User } = require("../database/models");
      const user = await User.findOrCreate(ctx.from);

      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const character = await Character.create(
        user.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –±–∞–∑—ã, –∞ –Ω–µ telegram_id
        chatId,
        session.data.name,
        session.data.race,
        session.data.class,
        session.data.stats
      );

      // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
      this.creationSessions.delete(sessionKey);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const display = await character.getFullDisplay();

      await ctx.editMessageText(
        `üéâ **–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!**\n\n${display}\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hero –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n` +
          `–ö–≤–µ—Å—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å 10:00 –¥–æ 22:00 –ú–°–ö`,
        {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üë§ –ú–æ–π –≥–µ—Ä–æ–π", callback_data: "show_hero" }],
            ],
          },
        }
      );

      log(
        `–°–æ–∑–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: ${character.name} (${character.race} ${character.class}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`
      );
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${error.message}`, "error");

      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
      const errorMessage = escapeMarkdown(error.message);

      await ctx.editMessageText(
        `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${errorMessage}`,
        { parse_mode: "Markdown" }
      );
      this.creationSessions.delete(sessionKey);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
  async handleCallback(ctx) {
    const data = ctx.callbackQuery.data;

    log(`[CharCreate] –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: ${data}`);

    if (data.startsWith("race_")) {
      const race = data.substring(5);
      await this.handleRaceSelection(ctx, race);
      return true;
    }

    if (data.startsWith("class_")) {
      const characterClass = data.substring(6);
      await this.handleClassSelection(ctx, characterClass);
      return true;
    }

    if (data.startsWith("stats_")) {
      const decision = data.substring(6);
      await this.handleStatsDecision(ctx, decision);
      return true;
    }

    return false;
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
  cleanupSessions() {
    const now = Date.now();
    let cleaned = 0;

    for (const [key, session] of this.creationSessions.entries()) {
      // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç
      if (now - session.timestamp > 30 * 60 * 1000) {
        this.creationSessions.delete(key);
        cleaned++;
      }
    }

    if (cleaned > 0) {
      log(`[CharCreate] –û—á–∏—â–µ–Ω–æ ${cleaned} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π`);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
const characterCreationSystem = new CharacterCreationSystem();

// –î–µ–ª–∞–µ–º –º–µ—Ç–æ–¥ generateStats –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–∑–≤–Ω–µ
characterCreationSystem.generateStats =
  characterCreationSystem.generateStats.bind(characterCreationSystem);

module.exports = characterCreationSystem;
