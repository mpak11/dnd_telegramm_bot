// systems/equipmentSystem.js
const db = require('../database');
const { log } = require('../utils/logger');

class EquipmentSystem {
  constructor() {
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    this.slots = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–æ—Ç—ã
      weapon_main: { name: '–û—Å–Ω–æ–≤–Ω–æ–µ –æ—Ä—É–∂–∏–µ', types: ['weapon'] },
      weapon_off: { name: '–í—Ç–æ—Ä–æ–µ –æ—Ä—É–∂–∏–µ/–©–∏—Ç', types: ['weapon', 'shield'] },
      armor: { name: '–ë—Ä–æ–Ω—è', types: ['armor'] },
      head: { name: '–ì–æ–ª–æ–≤–∞', types: ['accessory'] },
      cloak: { name: '–ü–ª–∞—â', types: ['accessory'] },
      gloves: { name: '–ü–µ—Ä—á–∞—Ç–∫–∏', types: ['accessory'] },
      boots: { name: '–û–±—É–≤—å', types: ['accessory'] },
      belt: { name: '–ü–æ—è—Å', types: ['accessory'] },
      
      // –£–∫—Ä–∞—à–µ–Ω–∏—è
      ring1: { name: '–ö–æ–ª—å—Ü–æ 1', types: ['accessory'] },
      ring2: { name: '–ö–æ–ª—å—Ü–æ 2', types: ['accessory'] },
      amulet: { name: '–ê–º—É–ª–µ—Ç', types: ['accessory'] },
      trinket: { name: '–ê–∫—Å–µ—Å—Å—É–∞—Ä', types: ['accessory'] }
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  async getEquipment(characterId) {
    const equipment = {};
    
    const rows = await db.all(`
      SELECT ce.*, i.*, ce.slot_name as equipped_slot
      FROM character_equipment ce
      JOIN items i ON ce.item_id = i.id
      WHERE ce.character_id = ?
    `, [characterId]);
    
    for (const row of rows) {
      equipment[row.equipped_slot] = {
        id: row.item_id,
        name: row.name,
        type: row.type,
        rarity: row.rarity,
        stats_bonus: row.stats_bonus ? JSON.parse(row.stats_bonus) : {},
        effects: row.effects ? JSON.parse(row.effects) : {}
      };
    }
    
    return equipment;
  }

  // –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
  async equipItem(characterId, itemId) {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    const item = await db.get(`
      SELECT i.*, inv.id as inventory_id
      FROM inventory inv
      JOIN items i ON inv.item_id = i.id
      WHERE inv.character_id = ? AND inv.item_id = ?
    `, [characterId, itemId]);
    
    if (!item) {
      throw new Error('–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ');
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç
    const slot = this.findSlotForItem(item);
    if (!slot) {
      throw new Error('–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    await this.checkRequirements(characterId, item);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤—É—Ä—É—á–Ω–æ–µ –æ—Ä—É–∂–∏–µ
    if (item.is_two_handed) {
      await this.handleTwoHandedWeapon(characterId);
    }
    
    // –°–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ª–æ—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const currentItem = await db.get(
      'SELECT item_id FROM character_equipment WHERE character_id = ? AND slot_name = ?',
      [characterId, slot]
    );
    
    if (currentItem) {
      await this.unequipItem(characterId, currentItem.item_id, false);
    }
    
    // –≠–∫–∏–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
    await db.run(
      'INSERT OR REPLACE INTO character_equipment (character_id, slot_name, item_id) VALUES (?, ?, ?)',
      [characterId, slot, itemId]
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await this.trackItemUsage(itemId, 'equipped');
    
    log(`–ü–µ—Ä—Å–æ–Ω–∞–∂ ${characterId} —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª ${item.name} –≤ —Å–ª–æ—Ç ${slot}`);
    
    return {
      success: true,
      item: item.name,
      slot: this.slots[slot].name
    };
  }

  // –°–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç
  async unequipItem(characterId, itemId, trackStats = true) {
    const equipment = await db.get(
      'SELECT * FROM character_equipment WHERE character_id = ? AND item_id = ?',
      [characterId, itemId]
    );
    
    if (!equipment) {
      throw new Error('–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    await db.run(
      'DELETE FROM character_equipment WHERE character_id = ? AND item_id = ?',
      [characterId, itemId]
    );
    
    if (trackStats) {
      await this.trackItemUsage(itemId, 'unequipped');
    }
    
    return { success: true };
  }

  // –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
  findSlotForItem(item) {
    // –î–ª—è –æ—Ä—É–∂–∏—è
    if (item.type === 'weapon') {
      return 'weapon_main';
    }
    
    // –î–ª—è —â–∏—Ç–æ–≤
    if (item.type === 'shield') {
      return 'weapon_off';
    }
    
    // –î–ª—è –±—Ä–æ–Ω–∏
    if (item.type === 'armor') {
      return 'armor';
    }
    
    // –î–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º slot_type
    if (item.type === 'accessory' && item.slot_type) {
      // –î–ª—è –∫–æ–ª–µ—Ü –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
      if (item.slot_type === 'ring') {
        return this.findFreeRingSlot();
      }
      
      return item.slot_type;
    }
    
    return null;
  }

  // –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –∫–æ–ª—å—Ü–∞
  async findFreeRingSlot(characterId) {
    const ring1 = await db.get(
      'SELECT 1 FROM character_equipment WHERE character_id = ? AND slot_name = ?',
      [characterId, 'ring1']
    );
    
    if (!ring1) return 'ring1';
    
    const ring2 = await db.get(
      'SELECT 1 FROM character_equipment WHERE character_id = ? AND slot_name = ?',
      [characterId, 'ring2']
    );
    
    if (!ring2) return 'ring2';
    
    // –ï—Å–ª–∏ –æ–±–∞ —Å–ª–æ—Ç–∞ –∑–∞–Ω—è—Ç—ã, –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –∫–æ–ª—å—Ü–æ
    return 'ring1';
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤—É—Ä—É—á–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è
  async handleTwoHandedWeapon(characterId) {
    // –°–Ω–∏–º–∞–µ–º –æ—Ä—É–∂–∏–µ –∏–∑ –≤—Ç–æ—Ä–æ–π —Ä—É–∫–∏
    const offHand = await db.get(
      'SELECT item_id FROM character_equipment WHERE character_id = ? AND slot_name = ?',
      [characterId, 'weapon_off']
    );
    
    if (offHand) {
      await this.unequipItem(characterId, offHand.item_id, false);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
  async checkRequirements(characterId, item) {
    if (!item.requirements) return true;
    
    const character = await db.get('SELECT * FROM characters WHERE id = ?', [characterId]);
    const requirements = JSON.parse(item.requirements);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    if (requirements.level && character.level < requirements.level) {
      throw new Error(`–¢—Ä–µ–±—É–µ—Ç—Å—è ${requirements.level} —É—Ä–æ–≤–µ–Ω—å (—É –≤–∞—Å ${character.level})`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å
    if (requirements.class && character.class !== requirements.class) {
      throw new Error(`–¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–∞ ${requirements.class}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const stats = ['strength', 'dexterity', 'intelligence', 'wisdom', 'constitution', 'charisma'];
    for (const stat of stats) {
      if (requirements[stat] && character[stat] < requirements[stat]) {
        const statNames = {
          strength: '–°–∏–ª–∞',
          dexterity: '–õ–æ–≤–∫–æ—Å—Ç—å',
          intelligence: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
          wisdom: '–ú—É–¥—Ä–æ—Å—Ç—å',
          constitution: '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ',
          charisma: '–•–∞—Ä–∏–∑–º–∞'
        };
        throw new Error(`–¢—Ä–µ–±—É–µ—Ç—Å—è ${statNames[stat]} ${requirements[stat]} (—É –≤–∞—Å ${character[stat]})`);
      }
    }
    
    return true;
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–µ –±–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
  async calculateEquipmentBonuses(characterId) {
    const equipment = await this.getEquipment(characterId);
    const bonuses = {
      stats: {
        strength: 0,
        dexterity: 0,
        intelligence: 0,
        wisdom: 0,
        constitution: 0,
        charisma: 0
      },
      combat: {
        damage: 0,
        defense: 0,
        hp_max: 0,
        mp_max: 0
      },
      resistances: {},
      special: []
    };
    
    for (const [slot, item] of Object.entries(equipment)) {
      if (item.stats_bonus) {
        // –°—É–º–º–∏—Ä—É–µ–º –±–æ–Ω—É—Å—ã –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
        for (const [stat, value] of Object.entries(item.stats_bonus)) {
          if (bonuses.stats[stat] !== undefined) {
            bonuses.stats[stat] += value;
          } else if (bonuses.combat[stat] !== undefined) {
            bonuses.combat[stat] += value;
          } else if (stat.includes('resistance')) {
            bonuses.resistances[stat] = (bonuses.resistances[stat] || 0) + value;
          } else if (stat === 'all_stats') {
            // –ë–æ–Ω—É—Å –∫–æ –≤—Å–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
            for (const s of Object.keys(bonuses.stats)) {
              bonuses.stats[s] += value;
            }
          } else {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            bonuses.special.push({ stat, value, item: item.name });
          }
        }
      }
    }
    
    return bonuses;
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  async trackItemUsage(itemId, action) {
    const column = `times_${action}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å
    const exists = await db.get('SELECT 1 FROM item_statistics WHERE item_id = ?', [itemId]);
    
    if (!exists) {
      await db.run('INSERT INTO item_statistics (item_id) VALUES (?)', [itemId]);
    }
    
    await db.run(
      `UPDATE item_statistics SET ${column} = ${column} + 1 WHERE item_id = ?`,
      [itemId]
    );
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async getEquipmentDisplay(characterId) {
    const equipment = await this.getEquipment(characterId);
    const bonuses = await this.calculateEquipmentBonuses(characterId);
    
    let display = 'üõ°Ô∏è **–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞:**\n\n';
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç
    for (const [slotKey, slotInfo] of Object.entries(this.slots)) {
      const item = equipment[slotKey];
      if (item) {
        const rarityEmoji = this.getRarityEmoji(item.rarity);
        display += `**${slotInfo.name}:** ${rarityEmoji} ${item.name}\n`;
      } else {
        display += `**${slotInfo.name}:** _–ø—É—Å—Ç–æ_\n`;
      }
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â–∏–µ –±–æ–Ω—É—Å—ã
    display += '\nüìä **–ë–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:**\n';
    
    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const hasStatBonuses = Object.values(bonuses.stats).some(v => v !== 0);
    if (hasStatBonuses) {
      display += '\n**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n';
      for (const [stat, value] of Object.entries(bonuses.stats)) {
        if (value !== 0) {
          const sign = value > 0 ? '+' : '';
          const statNames = {
            strength: '–°–∏–ª–∞',
            dexterity: '–õ–æ–≤–∫–æ—Å—Ç—å',
            intelligence: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
            wisdom: '–ú—É–¥—Ä–æ—Å—Ç—å',
            constitution: '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ',
            charisma: '–•–∞—Ä–∏–∑–º–∞'
          };
          display += `‚Ä¢ ${statNames[stat]}: ${sign}${value}\n`;
        }
      }
    }
    
    // –ë–æ–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const hasCombatBonuses = Object.values(bonuses.combat).some(v => v !== 0);
    if (hasCombatBonuses) {
      display += '\n**–ë–æ–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n';
      if (bonuses.combat.damage) display += `‚Ä¢ –£—Ä–æ–Ω: +${bonuses.combat.damage}\n`;
      if (bonuses.combat.defense) display += `‚Ä¢ –ó–∞—â–∏—Ç–∞: +${bonuses.combat.defense}\n`;
      if (bonuses.combat.hp_max) display += `‚Ä¢ –ú–∞–∫—Å. HP: +${bonuses.combat.hp_max}\n`;
      if (bonuses.combat.mp_max) display += `‚Ä¢ –ú–∞–∫—Å. MP: +${bonuses.combat.mp_max}\n`;
    }
    
    // –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    if (Object.keys(bonuses.resistances).length > 0) {
      display += '\n**–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è:**\n';
      for (const [resist, value] of Object.entries(bonuses.resistances)) {
        display += `‚Ä¢ ${resist}: ${value}%\n`;
      }
    }
    
    // –û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    if (bonuses.special.length > 0) {
      display += '\n**–û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:**\n';
      for (const effect of bonuses.special) {
        display += `‚Ä¢ ${effect.stat}: ${effect.value} (${effect.item})\n`;
      }
    }
    
    return display;
  }

  getRarityEmoji(rarity) {
    const emojis = {
      common: '‚ö™',
      uncommon: 'üü¢',
      rare: 'üîµ',
      epic: 'üü£',
      legendary: 'üü†'
    };
    return emojis[rarity] || '‚ö™';
  }
}

module.exports = new EquipmentSystem();