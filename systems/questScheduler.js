// systems/questScheduler.js
// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏ –∫–≤–µ—Å—Ç–æ–≤

const schedule = require('node-schedule');
const db = require('../database');
const questSystem = require('./questSystem');
const { log, logQuest } = require('../utils/logger');

class QuestScheduler {
  constructor() {
    this.jobs = [];
    this.bot = null;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  init(bot) {
    this.bot = bot;
    
    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–≤–µ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
    this.jobs.push(
      schedule.scheduleJob('0 * * * *', async () => {
        await questSystem.cleanupExpiredQuests();
      })
    );

    // –í—ã–¥–∞—á–∞ –∫–≤–µ—Å—Ç–æ–≤ –≤ 10:00, 14:00 –∏ 18:00 –ú–°–ö
    const questTimes = ['0 10 * * *', '0 14 * * *', '0 18 * * *'];
    
    questTimes.forEach(time => {
      this.jobs.push(
        schedule.scheduleJob(time, async () => {
          await this.distributeQuests();
        })
      );
    });

    logQuest('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–≤–µ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω');
    log(`–ö–≤–µ—Å—Ç—ã –±—É–¥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –≤ 10:00, 14:00 –∏ 18:00 –ú–°–ö`, 'info');
  }

  // –†–∞–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç—ã –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —á–∞—Ç–∞–º
  async distributeQuests() {
    try {
      logQuest('–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–¥–∞—á—É –∫–≤–µ—Å—Ç–æ–≤...');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
      const activeChats = await db.all(`
        SELECT DISTINCT chat_id 
        FROM characters 
        WHERE is_active = 1
      `);

      let distributed = 0;

      for (const chat of activeChats) {
        const canReceive = await questSystem.canReceiveQuest(chat.chat_id);
        
        if (canReceive.can) {
          const quest = await questSystem.assignQuest(chat.chat_id);
          
          if (quest && this.bot) {
            await this.notifyChat(chat.chat_id, quest);
            distributed++;
          }
        }
      }

      logQuest(`–†–∞–∑–¥–∞–Ω–æ ${distributed} –∫–≤–µ—Å—Ç–æ–≤`);

    } catch (error) {
      log(`–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–∞—á–∏ –∫–≤–µ—Å—Ç–æ–≤: ${error.message}`, 'error');
    }
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å —á–∞—Ç –æ –Ω–æ–≤–æ–º –∫–≤–µ—Å—Ç–µ
  async notifyChat(chatId, quest) {
    try {
      const statInfo = this.getStatName(quest.stat_check);
      const difficultyEmoji = this.getDifficultyEmoji(quest.difficulty);
      
      const message = `
üéØ **–ù–û–í–´–ô –ö–í–ï–°–¢!**

${difficultyEmoji} **${quest.title}**
${quest.description}

üìä –ü—Ä–æ–≤–µ—Ä–∫–∞: ${statInfo.emoji} ${statInfo.name}
‚è∞ –í—Ä–µ–º—è: 4 —á–∞—Å–∞
üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${quest.xp_reward} XP, ${quest.gold_reward} –∑–æ–ª–æ—Ç–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /quest —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å!
`;

      await this.bot.telegram.sendMessage(chatId, message, {
        parse_mode: 'Markdown'
      });

    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}: ${error.message}`, 'error');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  getStatName(stat) {
    const stats = {
      strength: { name: '–°–∏–ª–∞', emoji: 'üí™' },
      dexterity: { name: '–õ–æ–≤–∫–æ—Å—Ç—å', emoji: 'üèÉ' },
      intelligence: { name: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', emoji: 'üß†' },
      wisdom: { name: '–ú—É–¥—Ä–æ—Å—Ç—å', emoji: 'üëÅÔ∏è' },
      constitution: { name: '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ', emoji: 'üõ°Ô∏è' },
      charisma: { name: '–•–∞—Ä–∏–∑–º–∞', emoji: '‚ú®' }
    };
    return stats[stat] || { name: stat, emoji: 'üìä' };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  getDifficultyEmoji(difficulty) {
    const emojis = {
      easy: 'üü¢',
      medium: 'üü°', 
      hard: 'üî¥',
      epic: 'üü£',
      legendary: '‚≠ê'
    };
    return emojis[difficulty] || '‚ùì';
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
  stop() {
    this.jobs.forEach(job => job.cancel());
    this.jobs = [];
    logQuest('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–≤–µ—Å—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
module.exports = new QuestScheduler();