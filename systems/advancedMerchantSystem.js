const db = require('../database');
const { log } = require('../utils/logger');

class AdvancedMerchantSystem {
  constructor() {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
    this.merchants = {
      1: {
        name: '–ì–∞—Ä–æ–ª—å–¥',
        title: '–¢–æ—Ä–≥–æ–≤–µ—Ü –æ–±—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏',
        specialization: 'general',
        personality: 'friendly',
        baseMarkup: 1.2, // 20% –Ω–∞—Ü–µ–Ω–∫–∞
        greetings: {
          friendly: [
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥—Ä—É–≥ –º–æ–π! –ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?',
            '–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –£ –º–µ–Ω—è –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!'
          ],
          neutral: [
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—é –ª–∞–≤–∫—É.',
            '–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'
          ],
          unfriendly: [
            '–ß—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ?',
            '–ü–æ–∫—É–ø–∞–µ—Ç–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç–µ?'
          ]
        },
        specialEvents: {
          firstVisit: '–ù–æ–≤–æ–µ –ª–∏—Ü–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É –º–µ–Ω—è –µ—Å—Ç—å —Å–∫–∏–¥–∫–∞!',
          bigSpender: '–û, –º–æ–π –ª—É—á—à–∏–π –∫–ª–∏–µ–Ω—Ç! –î–ª—è –≤–∞—Å –≤—Å–µ–≥–¥–∞ –æ—Å–æ–±—ã–µ —Ü–µ–Ω—ã!',
          levelUp: '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º! –í–∑–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∏—Å–∫–∞—Ç–µ–ª–µ–π –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!'
        }
      },
      2: {
        name: '–ú–µ—Ä–ª–∏–Ω',
        title: '–ú–∞—Å—Ç–µ—Ä –∑–µ–ª–∏–π',
        specialization: 'potions',
        personality: 'eccentric',
        baseMarkup: 1.3,
        greetings: {
          friendly: [
            '–ê—Ö, –º–æ–π –ª—é–±–∏–º—ã–π –ø–æ–¥–æ–ø—ã—Ç–Ω—ã–π... —Ç–æ –µ—Å—Ç—å, –∫–ª–∏–µ–Ω—Ç!',
            '–ì–æ—Ç–æ–≤—ã –∏—Å–ø—ã—Ç–∞—Ç—å –º–æ–∏ –Ω–æ–≤–µ–π—à–∏–µ —Ç–≤–æ—Ä–µ–Ω–∏—è?'
          ],
          neutral: [
            '–ù—É–∂–Ω—ã –∑–µ–ª—å—è? –£ –º–µ–Ω—è –µ—Å—Ç—å –≤—Å—ë... –ø–æ—á—Ç–∏ –≤—Å—ë –Ω–µ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è.',
            '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º–∏ - –æ–Ω–∏ –µ—â–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ.'
          ],
          unfriendly: [
            '–ù–µ —Ç—Ä–æ–≥–∞–π—Ç–µ –Ω–∏—á–µ–≥–æ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è!',
            '–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–∑–æ—Ä–≤–µ—Ç—Å—è - –ø–ª–∞—Ç–∏—Ç—å –±—É–¥–µ—Ç–µ –≤—ã.'
          ]
        }
      },
      3: {
        name: '–¢–æ—Ä–∏–Ω',
        title: '–ú–∞—Å—Ç–µ—Ä-–æ—Ä—É–∂–µ–π–Ω–∏–∫',
        specialization: 'weapons',
        personality: 'gruff',
        baseMarkup: 1.25,
        canCraft: true,
        greetings: {
          friendly: [
            '–•–æ—Ä–æ—à–∞—è —Å—Ç–∞–ª—å –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –≤–æ–∏–Ω–∞!',
            '–ú–æ–∏ –∫–ª–∏–Ω–∫–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–¥–≤–æ–¥—è—Ç!'
          ],
          neutral: [
            '–ù—É–∂–Ω–æ –æ—Ä—É–∂–∏–µ? –£ –º–µ–Ω—è –ª—É—á—à–µ–µ –≤ –≥–æ—Ä–æ–¥–µ.',
            '–°–º–æ—Ç—Ä–∏—Ç–µ, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–π—Ç–µ –ª–µ–∑–≤–∏—è.'
          ],
          unfriendly: [
            '–ù–µ –≤–∏–∂—É –≤ –≤–∞—Å –≤–æ–∏–Ω–∞.',
            '–ú–æ–µ –æ—Ä—É–∂–∏–µ –Ω–µ –¥–ª—è –≤—Å—è–∫–∏—Ö.'
          ]
        }
      },
      4: {
        name: '–≠–ª—å–∑–∞',
        title: '–Æ–≤–µ–ª–∏—Ä',
        specialization: 'accessories',
        personality: 'sophisticated',
        baseMarkup: 1.5,
        greetings: {
          friendly: [
            '–ö–∞–∫–∞—è —á–µ—Å—Ç—å! –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ª—É—á—à–∏–µ —Ç–≤–æ—Ä–µ–Ω–∏—è!',
            '–î–ª—è —Ç–∞–∫–æ–≥–æ —É–≤–∞–∂–∞–µ–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —É –º–µ–Ω—è –µ—Å—Ç—å –æ—Å–æ–±—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è!'
          ],
          neutral: [
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –£ –º–µ–Ω—è —Ç–æ–ª—å–∫–æ –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–µ –≤–µ—â–∏.',
            '–ö–∞–∂–¥–æ–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ - –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞.'
          ],
          unfriendly: [
            '–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –º–æ–∂–µ—Ç–µ —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å –º–æ–∏ —Ç–æ–≤–∞—Ä—ã?',
            '–≠—Ç–æ –Ω–µ —Ä—ã–Ω–æ—á–Ω–∞—è –ª–∞–≤–∫–∞, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º.'
          ]
        }
      }
    };
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
  async initialize() {
    for (const [id, merchant] of Object.entries(this.merchants)) {
      await this.createMerchant(id, merchant);
    }
  }

  // –°–æ–∑–¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—Ü–∞
  async createMerchant(id, merchantData) {
    const existing = await db.get('SELECT id FROM merchants WHERE id = ?', [id]);
    if (existing) return;
    
    await db.run(`
      INSERT INTO merchants (id, name, description, location, is_active)
      VALUES (?, ?, ?, ?, 1)
    `, [
      id,
      merchantData.name,
      merchantData.title,
      '–ì–ª–∞–≤–Ω–∞—è –ø–ª–æ—â–∞–¥—å'
    ]);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await this.stockMerchant(id, merchantData.specialization);
  }

  // –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Ç–æ—Ä–≥–æ–≤—Ü–∞
  async stockMerchant(merchantId, specialization) {
    let itemTypes = [];
    
    switch(specialization) {
      case 'general':
        itemTypes = ['consumable', 'weapon', 'armor'];
        break;
      case 'potions':
        itemTypes = ['consumable'];
        break;
      case 'weapons':
        itemTypes = ['weapon', 'shield'];
        break;
      case 'accessories':
        itemTypes = ['accessory'];
        break;
    }
    
    const items = await db.all(`
      SELECT id FROM items 
      WHERE type IN (${itemTypes.map(() => '?').join(',')})
      AND rarity IN ('common', 'uncommon')
      AND is_unique = 0
      LIMIT 20
    `, itemTypes);
    
    for (const item of items) {
      await db.run(`
        INSERT OR IGNORE INTO merchant_inventory (merchant_id, item_id, quantity)
        VALUES (?, ?, ?)
      `, [merchantId, item.id, -1]); // -1 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º
  async getReputation(characterId, merchantId) {
    const rep = await db.get(`
      SELECT * FROM merchant_reputation
      WHERE character_id = ? AND merchant_id = ?
    `, [characterId, merchantId]);
    
    if (!rep) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
      await db.run(`
        INSERT INTO merchant_reputation (character_id, merchant_id, reputation)
        VALUES (?, ?, 0)
      `, [characterId, merchantId]);
      
      return {
        reputation: 0,
        total_spent: 0,
        total_sold: 0,
        special_flags: {}
      };
    }
    
    return {
      ...rep,
      special_flags: rep.special_flags ? JSON.parse(rep.special_flags) : {}
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—Ü–∞
  getMerchantMood(reputation) {
    const moods = {
      veryhappy: { min: 100, emoji: 'üòä', priceModifier: 0.9 },
      happy: { min: 50, emoji: 'üôÇ', priceModifier: 0.95 },
      neutral: { min: -20, emoji: 'üòê', priceModifier: 1.0 },
      unhappy: { min: -50, emoji: 'üòí', priceModifier: 1.1 },
      angry: { min: -100, emoji: 'üò†', priceModifier: 1.2 },
      furious: { min: -200, emoji: 'ü§¨', priceModifier: 1.5, refuseService: true }
    };
    
    for (const [mood, config] of Object.entries(moods)) {
      if (reputation >= config.min) {
        return { mood, ...config };
      }
    }
    
    return moods.furious;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ—Ä–≥–æ–≤—Ü–∞
  async getMerchantGreeting(characterId, merchantId) {
    const merchant = this.merchants[merchantId];
    if (!merchant) return '–ü—Ä–∏–≤–µ—Ç, –ø—É—Ç–Ω–∏–∫.';
    
    const rep = await this.getReputation(characterId, merchantId);
    const mood = this.getMerchantMood(rep.reputation);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    const character = await db.get('SELECT * FROM characters WHERE id = ?', [characterId]);
    
    // –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç
    if (!rep.special_flags.firstVisit) {
      await this.updateSpecialFlag(characterId, merchantId, 'firstVisit', true);
      return merchant.specialEvents?.firstVisit || merchant.greetings.neutral[0];
    }
    
    // –ë–æ–ª—å—à–æ–π —Å–ø–µ–Ω–¥–µ—Ä
    if (rep.total_spent > 5000 && !rep.special_flags.bigSpender) {
      await this.updateSpecialFlag(characterId, merchantId, 'bigSpender', true);
      await this.changeReputation(characterId, merchantId, 20);
      return merchant.specialEvents?.bigSpender || '–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–∞–∫–æ–≥–æ —â–µ–¥—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!';
    }
    
    // –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    const greetingType = mood.mood.includes('happy') ? 'friendly' : 
                        mood.mood.includes('angry') ? 'unfriendly' : 'neutral';
    
    const greetings = merchant.greetings[greetingType];
    return greetings[Math.floor(Math.random() * greetings.length)] + ` ${mood.emoji}`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
  async getPricesForCharacter(characterId, merchantId, items) {
    const merchant = this.merchants[merchantId];
    const rep = await this.getReputation(characterId, merchantId);
    const mood = this.getMerchantMood(rep.reputation);
    
    if (mood.refuseService) {
      throw new Error(`${merchant.name} –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å –≤–∞–º–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å! ${mood.emoji}`);
    }
    
    const pricesWithMarkup = items.map(item => ({
      ...item,
      buyPrice: Math.floor(item.value_gold * merchant.baseMarkup * mood.priceModifier),
      sellPrice: Math.floor(item.value_gold * 0.5 * (2 - mood.priceModifier))
    }));
    
    return pricesWithMarkup;
  }

  // –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
  async buyItem(characterId, merchantId, itemId, quantity = 1) {
    const character = await db.get('SELECT * FROM characters WHERE id = ?', [characterId]);
    const item = await db.get('SELECT * FROM items WHERE id = ?', [itemId]);
    const merchant = this.merchants[merchantId];
    
    if (!character || !item || !merchant) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —Ç–æ—Ä–≥–æ–≤—Ü–∞
    const stock = await db.get(`
      SELECT * FROM merchant_inventory
      WHERE merchant_id = ? AND item_id = ?
    `, [merchantId, itemId]);
    
    if (!stock) {
      throw new Error('–£ —Ç–æ—Ä–≥–æ–≤—Ü–∞ –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    const [priceData] = await this.getPricesForCharacter(characterId, merchantId, [item]);
    const totalPrice = priceData.buyPrice * quantity;
    
    if (character.gold < totalPrice) {
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù—É–∂–Ω–æ ${totalPrice}, —É –≤–∞—Å ${character.gold}`);
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await db.run('BEGIN TRANSACTION');
    
    try {
      // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–æ–ª–æ—Ç–æ
      await db.run(
        'UPDATE characters SET gold = gold - ? WHERE id = ?',
        [totalPrice, characterId]
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
      const existing = await db.get(
        'SELECT * FROM inventory WHERE character_id = ? AND item_id = ?',
        [characterId, itemId]
      );
      
      if (existing) {
        await db.run(
          'UPDATE inventory SET quantity = quantity + ? WHERE id = ?',
          [quantity, existing.id]
        );
      } else {
        await db.run(
          'INSERT INTO inventory (character_id, item_id, quantity) VALUES (?, ?, ?)',
          [characterId, itemId, quantity]
        );
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.updatePurchaseStats(characterId, merchantId, totalPrice);
      await this.trackItemUsage(itemId, 'bought');
      
      await db.run('COMMIT');
      
      // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–æ—Ä–≥–æ–≤—Ü–∞
      const comments = [
        '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!',
        '–≠—Ç–æ –≤–∞–º –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è!',
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!',
        '–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ!'
      ];
      
      return {
        success: true,
        item: item.name,
        price: totalPrice,
        comment: comments[Math.floor(Math.random() * comments.length)]
      };
      
    } catch (error) {
      await db.run('ROLLBACK');
      throw error;
    }
  }

  // –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
  async sellItem(characterId, merchantId, itemId, quantity = 1) {
    const item = await db.get('SELECT * FROM items WHERE id = ?', [itemId]);
    const merchant = this.merchants[merchantId];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const inventory = await db.get(
      'SELECT * FROM inventory WHERE character_id = ? AND item_id = ?',
      [characterId, itemId]
    );
    
    if (!inventory || inventory.quantity < quantity) {
      throw new Error('–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
    const [priceData] = await this.getPricesForCharacter(characterId, merchantId, [item]);
    const totalPrice = priceData.sellPrice * quantity;
    
    await db.run('BEGIN TRANSACTION');
    
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–ª–æ—Ç–æ
      await db.run(
        'UPDATE characters SET gold = gold + ? WHERE id = ?',
        [totalPrice, characterId]
      );
      
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      if (inventory.quantity === quantity) {
        await db.run('DELETE FROM inventory WHERE id = ?', [inventory.id]);
      } else {
        await db.run(
          'UPDATE inventory SET quantity = quantity - ? WHERE id = ?',
          [quantity, inventory.id]
        );
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.updateSaleStats(characterId, merchantId, totalPrice);
      await this.trackItemUsage(itemId, 'sold');
      
      await db.run('COMMIT');
      
      return {
        success: true,
        item: item.name,
        price: totalPrice,
        comment: '–°–¥–µ–ª–∫–∞ –∑–∞–∫–ª—é—á–µ–Ω–∞!'
      };
      
    } catch (error) {
      await db.run('ROLLBACK');
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫
  async updatePurchaseStats(characterId, merchantId, amount) {
    await db.run(`
      UPDATE merchant_reputation
      SET total_spent = total_spent + ?,
          last_interaction = CURRENT_TIMESTAMP
      WHERE character_id = ? AND merchant_id = ?
    `, [amount, characterId, merchantId]);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∑–∞ –ø–æ–∫—É–ø–∫–∏
    const repGain = Math.floor(amount / 100); // 1 —Ä–µ–ø—É—Ç–∞—Ü–∏—è –∑–∞ –∫–∞–∂–¥—ã–µ 100 –∑–æ–ª–æ—Ç–∞
    if (repGain > 0) {
      await this.changeReputation(characterId, merchantId, repGain);
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂
  async updateSaleStats(characterId, merchantId, amount) {
    await db.run(`
      UPDATE merchant_reputation
      SET total_sold = total_sold + ?,
          last_interaction = CURRENT_TIMESTAMP
      WHERE character_id = ? AND merchant_id = ?
    `, [amount, characterId, merchantId]);
    
    // –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞ –ø—Ä–æ–¥–∞–∂–∏
    const repGain = Math.floor(amount / 200);
    if (repGain > 0) {
      await this.changeReputation(characterId, merchantId, repGain);
    }
  }

  // –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é
  async changeReputation(characterId, merchantId, amount) {
    await db.run(`
      UPDATE merchant_reputation
      SET reputation = reputation + ?
      WHERE character_id = ? AND merchant_id = ?
    `, [amount, characterId, merchantId]);
    
    log(`–†–µ–ø—É—Ç–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${characterId} —Å —Ç–æ—Ä–≥–æ–≤—Ü–µ–º ${merchantId} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${amount}`);
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
  async updateSpecialFlag(characterId, merchantId, flag, value) {
    const rep = await this.getReputation(characterId, merchantId);
    const flags = rep.special_flags;
    flags[flag] = value;
    
    await db.run(`
      UPDATE merchant_reputation
      SET special_flags = ?
      WHERE character_id = ? AND merchant_id = ?
    `, [JSON.stringify(flags), characterId, merchantId]);
  }

  // –û—Ç—Å–ª–µ–¥–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
  async trackItemUsage(itemId, action) {
    const column = `times_${action}`;
    
    const exists = await db.get(
      'SELECT 1 FROM item_statistics WHERE item_id = ?',
      [itemId]
    );
    
    if (!exists) {
      await db.run('INSERT INTO item_statistics (item_id) VALUES (?)', [itemId]);
    }
    
    await db.run(
      `UPDATE item_statistics SET ${column} = ${column} + 1 WHERE item_id = ?`,
      [itemId]
    );
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Ç–æ—Ä–≥–æ–≤—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async getMerchantInventory(merchantId, characterId) {
    const items = await db.all(`
      SELECT i.*, mi.quantity, mi.price_modifier
      FROM merchant_inventory mi
      JOIN items i ON mi.item_id = i.id
      WHERE mi.merchant_id = ?
      ORDER BY i.type, i.rarity, i.name
    `, [merchantId]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    const itemsWithPrices = await this.getPricesForCharacter(characterId, merchantId, items);
    
    return itemsWithPrices;
  }
}

module.exports = new AdvancedMerchantSystem();