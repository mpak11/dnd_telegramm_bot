// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤ –≤ —Å—Ç–∏–ª–µ D&D

class Dice {
  // –ü–∞—Ä—Å–∏–Ω–≥ –∏ –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "2d6+3", "1d20", "3d4-2")
  static rollDice(formula) {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    formula = formula.replace(/\s/g, '');
    
    // –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º—É–ª—É
    const match = formula.match(/^(\d+)d(\d+)([+-]\d+)?$/i);
    if (!match) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –±—Ä–æ—Å–∫–∞: ${formula}`);
    }

    const count = parseInt(match[1]);
    const sides = parseInt(match[2]);
    const modifier = match[3] ? parseInt(match[3]) : 0;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (count < 1 || count > 100) {
      throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100');
    }
    if (sides < 2 || sides > 100) {
      throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100');
    }

    // –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏
    const rolls = [];
    let sum = 0;

    for (let i = 0; i < count; i++) {
      const roll = Math.floor(Math.random() * sides) + 1;
      rolls.push(roll);
      sum += roll;
    }

    const total = sum + modifier;

    return {
      formula: formula,
      rolls: rolls,
      modifier: modifier,
      sum: sum,
      total: Math.max(0, total), // –ú–∏–Ω–∏–º—É–º 0
      breakdown: this.formatBreakdown(rolls, modifier)
    };
  }

  // –ü—Ä–æ—Å—Ç–æ–π –±—Ä–æ—Å–æ–∫ d20
  static rollD20() {
    return Math.floor(Math.random() * 20) + 1;
  }

  // –ë—Ä–æ—Å–æ–∫ —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º (2d20, –±–µ—Ä–µ–º –±–æ–ª—å—à–∏–π)
  static rollAdvantage() {
    const roll1 = this.rollD20();
    const roll2 = this.rollD20();
    return {
      result: Math.max(roll1, roll2),
      rolls: [roll1, roll2],
      type: 'advantage'
    };
  }

  // –ë—Ä–æ—Å–æ–∫ —Å –ø–æ–º–µ—Ö–æ–π (2d20, –±–µ—Ä–µ–º –º–µ–Ω—å—à–∏–π)
  static rollDisadvantage() {
    const roll1 = this.rollD20();
    const roll2 = this.rollD20();
    return {
      result: Math.min(roll1, roll2),
      rolls: [roll1, roll2],
      type: 'disadvantage'
    };
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–∞
  static formatBreakdown(rolls, modifier) {
    let breakdown = rolls.join(' + ');
    if (modifier > 0) {
      breakdown += ` + ${modifier}`;
    } else if (modifier < 0) {
      breakdown += ` - ${Math.abs(modifier)}`;
    }
    return breakdown;
  }

  // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ –¥–ª—è Telegram
  static async animateDiceRoll(ctx, messageId = null) {
    const frames = [
      'üé≤ –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫...',
      'üé≤ ‚öÄ',
      'üé≤ ‚öÅ',
      'üé≤ ‚öÇ',
      'üé≤ ‚öÉ',
      'üé≤ ‚öÑ',
      'üé≤ ‚öÖ'
    ];

    let currentMessage = messageId;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    for (let i = 0; i < 5; i++) {
      const frame = frames[Math.floor(Math.random() * (frames.length - 1)) + 1];
      
      if (currentMessage) {
        try {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            currentMessage,
            null,
            frame
          );
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        }
      } else {
        const msg = await ctx.reply(frame);
        currentMessage = msg.message_id;
      }

      await new Promise(resolve => setTimeout(resolve, 300));
    }

    return currentMessage;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å–ø–µ—Ö–∞/–ø—Ä–æ–≤–∞–ª–∞
  static checkCritical(roll) {
    if (roll === 20) return 'critical_success';
    if (roll === 1) return 'critical_fail';
    return null;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–∞
  static getDiceEmoji(value, maxValue = 20) {
    const percentage = value / maxValue;
    
    if (value === maxValue) return 'üéØ'; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö
    if (value === 1) return 'üíÄ'; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª
    if (percentage >= 0.9) return '‚ú®'; // –û—Ç–ª–∏—á–Ω—ã–π –±—Ä–æ—Å–æ–∫
    if (percentage >= 0.7) return '‚úÖ'; // –•–æ—Ä–æ—à–∏–π –±—Ä–æ—Å–æ–∫
    if (percentage >= 0.5) return 'üëç'; // –°—Ä–µ–¥–Ω–∏–π –±—Ä–æ—Å–æ–∫
    if (percentage >= 0.3) return 'üòê'; // –ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
    return 'üòü'; // –ü–ª–æ—Ö–æ–π –±—Ä–æ—Å–æ–∫
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  static formatRollResult(roll, modifier = 0, stat = null) {
    const total = roll + modifier;
    const emoji = this.getDiceEmoji(roll);
    const critical = this.checkCritical(roll);
    
    let text = `${emoji} **–ë—Ä–æ—Å–æ–∫ d20:** ${roll}`;
    
    if (modifier !== 0) {
      const sign = modifier > 0 ? '+' : '';
      text += ` ${sign}${modifier} = **${total}**`;
    }
    
    if (stat) {
      text += ` (${stat})`;
    }
    
    if (critical === 'critical_success') {
      text += '\nüéâ **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•!**';
    } else if (critical === 'critical_fail') {
      text += '\nüí• **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–í–ê–õ!**';
    }
    
    return text;
  }

  // –ë—Ä–æ—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
  static rollAbilityCheck(abilityModifier, proficiencyBonus = 0, advantage = null) {
    let roll;
    
    if (advantage === 'advantage') {
      const result = this.rollAdvantage();
      roll = result.result;
    } else if (advantage === 'disadvantage') {
      const result = this.rollDisadvantage();
      roll = result.result;
    } else {
      roll = this.rollD20();
    }
    
    const totalModifier = abilityModifier + proficiencyBonus;
    const total = roll + totalModifier;
    
    return {
      roll: roll,
      modifier: totalModifier,
      total: total,
      critical: this.checkCritical(roll),
      success: total >= 10 // DC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    };
  }

  // –ë—Ä–æ—Å–æ–∫ —É—Ä–æ–Ω–∞
  static rollDamage(damageFormula) {
    try {
      const result = this.rollDice(damageFormula);
      return {
        ...result,
        text: `üí• –£—Ä–æ–Ω: ${result.total} (${result.breakdown})`
      };
    } catch (error) {
      return {
        total: 0,
        text: '‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ —É—Ä–æ–Ω–∞',
        error: error.message
      };
    }
  }

  // –ú–∞—Å—Å–æ–≤—ã–π –±—Ä–æ—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)
  static rollMultiple(count, formula) {
    const results = [];
    for (let i = 0; i < count; i++) {
      results.push(this.rollDice(formula));
    }
    return results;
  }

  // –ë—Ä–æ—Å–æ–∫ —Å –ø–µ—Ä–µ–±—Ä–æ—Å–æ–º –µ–¥–∏–Ω–∏—Ü (—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ–ª—É—Ä–æ—Å–ª–∏–∫–∞)
  static rollWithReroll(advantage = null) {
    let roll = this.rollD20();
    let rerolled = false;
    
    if (roll === 1) {
      roll = this.rollD20();
      rerolled = true;
    }
    
    return {
      result: roll,
      rerolled: rerolled,
      critical: this.checkCritical(roll)
    };
  }
}

module.exports = Dice;