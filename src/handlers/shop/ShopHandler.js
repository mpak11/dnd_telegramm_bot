const BaseHandler = require('../../core/BaseHandler');
const { Character } = require('../../../database/models');
const advancedMerchantSystem = require('../../../systems/advancedMerchantSystem');
const { log } = require('../../../utils/logger');

class ShopHandler extends BaseHandler {
  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
  async handleShop(ctx) {
    await this.withCharacter(ctx, async (character) => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
      const merchants = Object.entries(advancedMerchantSystem.merchants);

      let message = "üè™ **–¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å**\n\n";
      message += `üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: ${character.gold}\n\n`;
      message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—Ü–∞:\n";

      const keyboard = merchants.map(([id, merchant]) => [
        {
          text: `${merchant.name} - ${merchant.title}`,
          callback_data: `visit_merchant_${id}`,
        },
      ]);

      keyboard.push([{ text: "‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data: "cancel" }]);

      // –ï—Å–ª–∏ —ç—Ç–æ callback, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: "Markdown",
          reply_markup: { inline_keyboard: keyboard },
        });
      } else {
        await ctx.reply(message, {
          parse_mode: "Markdown",
          reply_markup: { inline_keyboard: keyboard },
        });
      }
    });
  }

  // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
  async handleBuy(ctx) {
    await ctx.reply(
      "üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /shop\n\n" +
      "–¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ —Å –∏—Ö —Ç–æ–≤–∞—Ä–∞–º–∏.",
      { parse_mode: "Markdown" }
    );
  }

  // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–¥–∞–∂–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
  async handleSell(ctx) {
    await ctx.reply(
      "üí∞ –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /shop\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—Ü–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–∞—Ç—å'.",
      { parse_mode: "Markdown" }
    );
  }

  // Callback –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—Ü–∞
  async handleVisitMerchantCallback(ctx) {
    const merchantId = parseInt(ctx.callbackQuery.data.replace("visit_merchant_", ""));
    const character = await Character.findActive(ctx.from.id, ctx.chat.id);

    if (!character) {
      await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    const greeting = await advancedMerchantSystem.getMerchantGreeting(character.id, merchantId);
    const merchant = advancedMerchantSystem.merchants[merchantId];

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
    const rep = await advancedMerchantSystem.getReputation(character.id, merchantId);
    const mood = advancedMerchantSystem.getMerchantMood(rep.reputation);

    let message = `**${merchant.name}** ${mood.emoji}\n`;
    message += `_${greeting}_\n\n`;
    message += `üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: ${character.gold}\n`;
    message += `ü§ù –†–µ–ø—É—Ç–∞—Ü–∏—è: ${rep.reputation}\n\n`;

    const keyboard = [
      [
        { text: "üì¶ –ö—É–ø–∏—Ç—å", callback_data: `merchant_buy_${merchantId}` },
        { text: "üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data: `merchant_sell_${merchantId}` },
      ],
    ];

    if (merchant.canCraft) {
      keyboard[0].push({
        text: "üî® –ö—Ä–∞—Ñ—Ç",
        callback_data: `merchant_craft_${merchantId}`,
      });
    }

    keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "shop_main" }]);

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard },
    });
  }

  // Callback –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É —Ç–æ—Ä–≥–æ–≤—Ü–∞
  async handleMerchantBuyCallback(ctx) {
    const merchantId = parseInt(ctx.callbackQuery.data.replace("merchant_buy_", ""));
    const character = await Character.findActive(ctx.from.id, ctx.chat.id);

    if (!character) {
      await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    try {
      const inventory = await advancedMerchantSystem.getMerchantInventory(merchantId, character.id);

      if (inventory.length === 0) {
        await ctx.answerCbQuery("‚ùå –£ —Ç–æ—Ä–≥–æ–≤—Ü–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!");
        return;
      }

      let message = `üõí **–¢–æ–≤–∞—Ä—ã —Ç–æ—Ä–≥–æ–≤—Ü–∞**\n\n`;
      message += `üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: ${character.gold}\n\n`;

      const keyboard = [];
      const rarityEmoji = {
        common: "‚ö™",
        uncommon: "üü¢",
        rare: "üîµ",
        epic: "üü£",
        legendary: "üü†",
      };

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      for (let i = 0; i < Math.min(10, inventory.length); i++) {
        const item = inventory[i];
        const emoji = rarityEmoji[item.rarity] || "‚ö™";

        message += `${emoji} **${item.name}** - ${item.buyPrice} üí∞\n`;
        if (item.description) {
          message += `_${item.description}_\n`;
        }
        message += "\n";

        keyboard.push([
          {
            text: `${emoji} ${item.name} (${item.buyPrice}üí∞)`,
            callback_data: `buy_item_${merchantId}_${item.id}`,
          },
        ]);
      }

      keyboard.push([
        { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: `visit_merchant_${merchantId}` },
      ]);

      await ctx.editMessageText(message, {
        parse_mode: "Markdown",
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      await ctx.answerCbQuery(`‚ùå ${error.message}`);
    }
  }

  // Callback –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ—Ä–≥–æ–≤—Ü—É
  async handleMerchantSellCallback(ctx) {
    const merchantId = parseInt(ctx.callbackQuery.data.replace("merchant_sell_", ""));
    const character = await Character.findActive(ctx.from.id, ctx.chat.id);

    if (!character) {
      await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    try {
      const inventory = await character.getInventory();

      if (inventory.length === 0) {
        await ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!");
        return;
      }

      let message = `üí∞ **–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤**\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:\n\n`;

      const keyboard = [];
      const rarityEmoji = {
        common: "‚ö™",
        uncommon: "üü¢",
        rare: "üîµ",
        epic: "üü£",
        legendary: "üü†",
      };

      for (const item of inventory.slice(0, 10)) {
        const emoji = rarityEmoji[item.rarity] || "‚ö™";
        const sellPrice = Math.floor(item.value_gold * 0.5); // 50% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏

        message += `${emoji} ${item.name} - ${sellPrice} üí∞\n`;

        keyboard.push([
          {
            text: `${emoji} ${item.name} (${sellPrice}üí∞)`,
            callback_data: `sell_item_${merchantId}_${item.id}`,
          },
        ]);
      }

      keyboard.push([
        { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: `visit_merchant_${merchantId}` },
      ]);

      await ctx.editMessageText(message, {
        parse_mode: "Markdown",
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      await ctx.answerCbQuery(`‚ùå ${error.message}`);
    }
  }

  // Callback –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
  async handleBuyItemCallback(ctx) {
    const parts = ctx.callbackQuery.data.split("_");
    const merchantId = parseInt(parts[2]);
    const itemId = parseInt(parts[3]);

    const character = await Character.findActive(ctx.from.id, ctx.chat.id);
    if (!character) {
      await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    try {
      const result = await advancedMerchantSystem.buyItem(character.id, merchantId, itemId);

      await ctx.answerCbQuery(`‚úÖ ${result.comment}`);

      let message = `‚úÖ **–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!**\n\n`;
      message += `–ö—É–ø–ª–µ–Ω–æ: ${result.item}\n`;
      message += `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${result.price} üí∞\n\n`;
      message += `–û—Å—Ç–∞–ª–æ—Å—å –∑–æ–ª–æ—Ç–∞: ${character.gold - result.price} üí∞`;

      await ctx.editMessageText(message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚óÄÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º",
                callback_data: `merchant_buy_${merchantId}`,
              },
              { text: "üè™ –ö —Ç–æ—Ä–≥–æ–≤—Ü–∞–º", callback_data: "shop_main" },
            ],
          ],
        },
      });
    } catch (error) {
      await ctx.answerCbQuery(`‚ùå ${error.message}`);
    }
  }

  // Callback –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
  async handleSellItemCallback(ctx) {
    const parts = ctx.callbackQuery.data.split("_");
    const merchantId = parseInt(parts[2]);
    const itemId = parseInt(parts[3]);

    const character = await Character.findActive(ctx.from.id, ctx.chat.id);
    if (!character) {
      await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    try {
      const result = await advancedMerchantSystem.sellItem(character.id, merchantId, itemId);

      await ctx.answerCbQuery(`‚úÖ ${result.comment}`);

      let message = `‚úÖ **–ü—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω!**\n\n`;
      message += `–ü—Ä–æ–¥–∞–Ω–æ: ${result.item}\n`;
      message += `–ü–æ–ª—É—á–µ–Ω–æ: ${result.price} üí∞\n\n`;
      message += `–ó–æ–ª–æ—Ç–æ: ${character.gold} ‚Üí ${character.gold + result.price} üí∞`;

      await ctx.editMessageText(message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üí∞ –ü—Ä–æ–¥–∞—Ç—å –µ—â–µ",
                callback_data: `merchant_sell_${merchantId}`,
              },
              { text: "üè™ –ö —Ç–æ—Ä–≥–æ–≤—Ü–∞–º", callback_data: "shop_main" },
            ],
          ],
        },
      });
    } catch (error) {
      await ctx.answerCbQuery(`‚ùå ${error.message}`);
    }
  }
}

module.exports = new ShopHandler();