const BaseHandler = require('../../core/BaseHandler');
const { Character } = require('../../../database/models');
const { log } = require('../../../utils/logger');
const db = require('../../../database');

class GraveyardHandler extends BaseHandler {
  async handleGraveyard(ctx) {
    const telegramId = ctx.from.id;
    const chatId = ctx.chat.id;

    try {
      const user = await db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId]);

      if (!user) {
        await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const deadCharacters = await db.all(
        `SELECT * FROM characters 
         WHERE user_id = ? AND chat_id = ? AND hp_current <= 0 
         ORDER BY created_at DESC 
         LIMIT 10`,
        [user.id, chatId]
      );

      if (deadCharacters.length === 0) {
        await ctx.reply(
          "‚ö∞Ô∏è **–ö–ª–∞–¥–±–∏—â–µ –≥–µ—Ä–æ–µ–≤**\n\n" +
          "–ü–æ–∫–∞ —á—Ç–æ –∑–¥–µ—Å—å –ø—É—Å—Ç–æ. –í–∞—à–∏ –≥–µ—Ä–æ–∏ –µ—â–µ –∂–∏–≤—ã!\n" +
          "–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å –Ω–∏–º–∏ —É–¥–∞—á–∞ –≤ –æ–ø–∞—Å–Ω—ã—Ö –∫–≤–µ—Å—Ç–∞—Ö.",
          { parse_mode: "Markdown" }
        );
        return;
      }

      let message = "‚ö∞Ô∏è **–ö–ª–∞–¥–±–∏—â–µ –≥–µ—Ä–æ–µ–≤**\n\n";
      message += "_–ó–¥–µ—Å—å –ø–æ–∫–æ—è—Ç—Å—è –æ—Ç–≤–∞–∂–Ω—ã–µ –≥–µ—Ä–æ–∏, –ø–∞–≤—à–∏–µ –≤ –±–∏—Ç–≤–∞—Ö..._\n\n";

      for (const char of deadCharacters) {
        const character = new Character(char);
        const deathDate = new Date(char.created_at).toLocaleDateString("ru-RU");

        message += `ü™¶ **${character.name}**\n`;
        message += `${character.getFullTitle()} ‚Ä¢ ${character.level} —É—Ä–æ–≤–µ–Ω—å\n`;
        message += `üíÄ –ü–æ–≥–∏–±: ${deathDate}\n`;
        message += `‚ú® –û–ø—ã—Ç: ${character.experience} XP\n`;
        message += `üí∞ –ó–æ–ª–æ—Ç–æ: ${character.gold}\n\n`;
      }

      message += "_–ü–æ–∫–æ–π—Ç–µ—Å—å —Å –º–∏—Ä–æ–º, —Ö—Ä–∞–±—Ä—ã–µ –≤–æ–∏–Ω—ã._";

      await ctx.reply(message, { parse_mode: "Markdown" });
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–ª–∞–¥–±–∏—â–∞: ${error.message}`, "error");
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∞–¥–±–∏—â–∞ –≥–µ—Ä–æ–µ–≤");
    }
  }

  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–µ–º–æ—Ä–∏–∞–ª–∞
  async handleMemorial(ctx) {
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–≥–∏–±—à–∏—Ö –≥–µ—Ä–æ–µ–≤
    const chatId = ctx.chat.id;
    
    try {
      const stats = await db.get(
        `SELECT 
          COUNT(*) as total_dead,
          MAX(level) as highest_level,
          SUM(experience) as total_experience,
          SUM(gold) as total_gold
         FROM characters 
         WHERE chat_id = ? AND hp_current <= 0`,
        [chatId]
      );

      if (!stats || stats.total_dead === 0) {
        await ctx.reply(
          "üìä **–ú–µ–º–æ—Ä–∏–∞–ª –≥–µ—Ä–æ–µ–≤**\n\n" +
          "–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–≥–∏–± –≤ –±–∏—Ç–≤–∞—Ö.",
          { parse_mode: "Markdown" }
        );
        return;
      }

      let message = "üìä **–ú–µ–º–æ—Ä–∏–∞–ª –≥–µ—Ä–æ–µ–≤**\n\n";
      message += `‚ö∞Ô∏è –í—Å–µ–≥–æ –ø–æ–≥–∏–±–ª–æ –≥–µ—Ä–æ–µ–≤: ${stats.total_dead}\n`;
      message += `üèÜ –í—ã—Å—à–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å: ${stats.highest_level}\n`;
      message += `‚ú® –°—É–º–º–∞—Ä–Ω—ã–π –æ–ø—ã—Ç: ${stats.total_experience} XP\n`;
      message += `üí∞ –ü–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ –∑–æ–ª–æ—Ç–æ: ${stats.total_gold}\n\n`;
      message += "_–ò—Ö –∂–µ—Ä—Ç–≤–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–±—ã—Ç–∞._";

      await ctx.reply(message, { parse_mode: "Markdown" });
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–º–æ—Ä–∏–∞–ª–∞: ${error.message}`, "error");
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–º–æ—Ä–∏–∞–ª–∞");
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–≥–∏–±—à–µ–≥–æ –≥–µ—Ä–æ—è
  async handleFindHero(ctx) {
    const heroName = ctx.message.text.replace('/findhero', '').trim();
    
    if (!heroName) {
      await ctx.reply(
        "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≥–µ—Ä–æ—è –¥–ª—è –ø–æ–∏—Å–∫–∞!\n\n" +
        "–ü—Ä–∏–º–µ—Ä: /findhero –ì–æ—Ä–∞–∫",
        { parse_mode: "Markdown" }
      );
      return;
    }

    const telegramId = ctx.from.id;
    const chatId = ctx.chat.id;

    try {
      const user = await db.get("SELECT id FROM users WHERE telegram_id = ?", [telegramId]);
      
      if (!user) {
        await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const hero = await db.get(
        `SELECT * FROM characters 
         WHERE user_id = ? AND chat_id = ? AND hp_current <= 0 
         AND LOWER(name) LIKE LOWER(?)
         ORDER BY created_at DESC 
         LIMIT 1`,
        [user.id, chatId, `%${heroName}%`]
      );

      if (!hero) {
        await ctx.reply(
          `‚ùå –ì–µ—Ä–æ–π —Å –∏–º–µ–Ω–µ–º "${heroName}" –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –ø–∞–≤—à–∏—Ö.`,
          { parse_mode: "Markdown" }
        );
        return;
      }

      const character = new Character(hero);
      const deathDate = new Date(hero.created_at).toLocaleDateString("ru-RU");

      let message = `ü™¶ **–ù–∞–π–¥–µ–Ω –ø–∞–≤—à–∏–π –≥–µ—Ä–æ–π:**\n\n`;
      message += `**${character.name}**\n`;
      message += `${character.getFullTitle()} ‚Ä¢ ${character.level} —É—Ä–æ–≤–µ–Ω—å\n`;
      message += `üíÄ –ü–æ–≥–∏–±: ${deathDate}\n`;
      message += `‚ú® –û–ø—ã—Ç: ${character.experience} XP\n`;
      message += `üí∞ –ó–æ–ª–æ—Ç–æ: ${character.gold}\n\n`;
      message += `_–ü–æ–∫–æ–π—Å—è —Å –º–∏—Ä–æ–º, ${character.name}._`;

      await ctx.reply(message, { parse_mode: "Markdown" });
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–µ—Ä–æ—è: ${error.message}`, "error");
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–µ—Ä–æ—è");
    }
  }
}

module.exports = new GraveyardHandler();