const BaseHandler = require('../../core/BaseHandler');
const { Character } = require('../../../database/models');
const characterCreation = require('../../../systems/characterCreation');
const { log } = require('../../../utils/logger');
const { escapeMarkdown } = require('../../../utils/markdown');
const config = require('../../../config/config');
const db = require('../../../database');

class CharacterHandler extends BaseHandler {
  async handleCreateCharacter(ctx) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
    const existingCharacter = await Character.findActive(ctx.from.id, ctx.chat.id);
    
    if (existingCharacter) {
      await ctx.reply(
        `‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂: **${existingCharacter.name}**\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.`,
        { parse_mode: "Markdown" }
      );
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    await characterCreation.startCreation(ctx);
  }

  async handleShowCharacter(ctx) {
    await this.withCharacter(ctx, async (character) => {
      let display = await character.getDisplay();

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ—Ä—Ç–∏
      if (character.hp_current <= 0) {
        display =
          `‚ò†Ô∏è **–ú–ï–†–¢–í** ‚ò†Ô∏è\n\n${display}\n\n` +
          `_–≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–∞–ª –≤ –±–æ—é. –ï–≥–æ –ø–æ–¥–≤–∏–≥–∏ –±—É–¥—É—Ç –ø–æ–º–Ω–∏—Ç—å –≤ –≤–µ–∫–∞—Ö._\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è.`;
      }

      await ctx.reply(display, { parse_mode: "Markdown" });
    });
  }

  async handleQuickCreate(ctx) {
    const args = ctx.message.text.split(' ').slice(1);
    
    if (args.length < 3) {
      await ctx.reply(
        `‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n` +
        `/quickcreate —Ä–∞—Å–∞ –∫–ª–∞—Å—Å –∏–º—è\n\n` +
        `**–ü—Ä–∏–º–µ—Ä:**\n` +
        `/quickcreate human WARRIOR –ì–æ—Ä–∞–∫ –°–∏–ª—å–Ω—ã–π\n\n` +
        `**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—ã:** human, elf, dwarf, halfling\n` +
        `**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã:** WARRIOR, ROGUE, MAGE, CLERIC, BARBARIAN, RANGER`,
        { parse_mode: "Markdown" }
      );
      return;
    }

    const race = args[0].toLowerCase();
    const charClass = args[1].toUpperCase();
    const name = args.slice(2).join(' ');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!config.RACES[race]) {
      await ctx.reply(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–∞—Å–∞: ${race}`);
      return;
    }

    if (!config.CLASSES[charClass]) {
      await ctx.reply(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å: ${charClass}`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const existingCharacter = await Character.findActive(ctx.from.id, ctx.chat.id);
    if (existingCharacter) {
      await ctx.reply(
        `‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂: ${existingCharacter.name}\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`,
        { parse_mode: "Markdown" }
      );
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    try {
      const character = await Character.create({
        telegram_id: ctx.from.id,
        chat_id: ctx.chat.id,
        name: name,
        race: race,
        class: charClass
      });

      await ctx.reply(
        `‚úÖ **–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!**\n\n${character.getDisplay()}`,
        { parse_mode: "Markdown" }
      );

      log(`–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${name} –¥–ª—è ${ctx.from.id}`);
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: ${error.message}`, "error");
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${escapeMarkdown(error.message)}`, {
        parse_mode: "Markdown"
      });
    }
  }

  async handleSetName(ctx) {
    const name = ctx.message.text.replace('/setname', '').trim();
    
    if (!name) {
      await ctx.reply(
        `‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n\n` +
        `–ü—Ä–∏–º–µ—Ä: /setname –ì–æ—Ä–∞–∫ –°–∏–ª—å–Ω—ã–π`,
        { parse_mode: "Markdown" }
      );
      return;
    }

    // –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const handled = await characterCreation.handleNameCommand(ctx, name);
    
    if (!handled) {
      await ctx.reply(
        `‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è.`,
        { parse_mode: "Markdown" }
      );
    }
  }

  async handleDebugCharacters(ctx) {
    const telegramId = ctx.from.id;
    const chatId = ctx.chat.id;

    try {
      const user = await db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId]);

      if (!user) {
        await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î");
        return;
      }

      const characters = await db.all(
        "SELECT * FROM characters WHERE user_id = ? AND chat_id = ? ORDER BY created_at DESC",
        [user.id, chatId]
      );

      let message = `üîç **–û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π**\n\n`;
      message += `Telegram ID: \`${telegramId}\`\n`;
      message += `User DB ID: \`${user.id}\`\n`;
      message += `Chat ID: \`${chatId}\`\n\n`;

      if (characters.length === 0) {
        message += `‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
      } else {
        message += `**–ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: ${characters.length}**\n\n`;

        for (const char of characters) {
          message += `**${char.name}**\n`;
          message += `‚Ä¢ ID: ${char.id}\n`;
          message += `‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: ${char.is_active ? "‚úÖ" : "‚ùå"}\n`;
          message += `‚Ä¢ –°–æ–∑–¥–∞–Ω: ${new Date(char.created_at).toLocaleString()}\n`;
          message += `‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${char.level}\n`;
          message += `‚Ä¢ HP: ${char.hp_current}/${char.hp_max}\n\n`;
        }
      }

      await ctx.reply(message, { parse_mode: "Markdown" });
    } catch (error) {
      const errorMessage = escapeMarkdown(error.message);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`, { parse_mode: "Markdown" });
    }
  }
}

module.exports = new CharacterHandler();