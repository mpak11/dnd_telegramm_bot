const BaseHandler = require('../../core/BaseHandler');
const characterCreation = require('../../../systems/characterCreation');
const { log } = require('../../../utils/logger');

class AdminHandler extends BaseHandler {
  // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
  async handleAdmin(ctx) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞
    await ctx.reply("üöß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!");
  }

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
  async handleDebugSessions(ctx) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const sessionKey = `${userId}_${chatId}`;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    const currentSession = characterCreation.creationSessions.get(sessionKey);

    let debugText = `üîç **–û—Ç–ª–∞–¥–∫–∞ —Å–µ—Å—Å–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞**\n\n`;

    if (currentSession) {
      debugText += `**–í–∞—à–∞ —Å–µ—Å—Å–∏—è:**\n`;
      debugText += `‚Ä¢ –ö–ª—é—á: ${sessionKey}\n`;
      debugText += `‚Ä¢ –®–∞–≥: ${currentSession.step}\n`;
      debugText += `‚Ä¢ –†–∞—Å–∞: ${currentSession.data.race || "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞"}\n`;
      debugText += `‚Ä¢ –ö–ª–∞—Å—Å: ${currentSession.data.class || "–Ω–µ –≤—ã–±—Ä–∞–Ω"}\n`;
      debugText += `‚Ä¢ –ò–º—è: ${currentSession.data.name || "–Ω–µ –≤–≤–µ–¥–µ–Ω–æ"}\n`;
      debugText += `‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: ${new Date(
        currentSession.timestamp
      ).toLocaleString()}\n`;
    } else {
      debugText += `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è\n`;
      debugText += `–í–∞—à –∫–ª—é—á —Å–µ—Å—Å–∏–∏: ${sessionKey}\n`;
    }

    debugText += `\n**–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:** ${characterCreation.creationSessions.size}`;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–µ—Å—Å–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    if (characterCreation.creationSessions.size > 0) {
      debugText += "\n\n**–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:**\n";
      for (const [key, session] of characterCreation.creationSessions.entries()) {
        debugText += `‚Ä¢ ${key} (—à–∞–≥: ${session.step})\n`;
      }
    }

    await ctx.reply(debugText, { parse_mode: "Markdown" });
  }

  // –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
  async handleTestName(ctx) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const sessionKey = `${userId}_${chatId}`;

    log(`[TestName] –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è ${sessionKey}`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    characterCreation.creationSessions.set(sessionKey, {
      userId,
      chatId,
      chatType: ctx.chat.type,
      step: "name",
      data: {
        race: "human",
        class: "WARRIOR",
      },
      timestamp: Date.now(),
    });

    await ctx.reply(
      `üß™ **–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º**\n\n` +
      `–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏.\n` +
      `–†–∞—Å–∞: –ß–µ–ª–æ–≤–µ–∫\n` +
      `–ö–ª–∞—Å—Å: –í–æ–∏–Ω\n` +
      `ChatId: \`${chatId}\`\n` +
      `UserId: \`${userId}\`\n` +
      `–ö–ª—é—á —Å–µ—Å—Å–∏–∏: \`${sessionKey}\`\n\n` +
      `**–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:**\n` +
      `‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –≤ —á–∞—Ç\n` +
      `‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setname –ò–º—è–ü–µ—Ä—Å–æ–Ω–∞–∂–∞`,
      { parse_mode: "Markdown" }
    );
  }
}

module.exports = new AdminHandler();