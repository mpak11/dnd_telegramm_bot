const BaseHandler = require('../../core/BaseHandler');
const { Character } = require('../../../database/models');
const { log } = require('../../../utils/logger');
const db = require('../../../database');

class InventoryHandler extends BaseHandler {
  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
  async handleShowInventory(ctx) {
    await this.withCharacter(ctx, async (character) => {
      const inventory = await character.getInventory();

      // –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
      if (inventory.length > 0) {
        log(`[DEBUG] –ü–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ:`, inventory[0]);
      }

      if (inventory.length === 0) {
        await ctx.reply(
          `üéí **–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ${character.name}**\n\n` +
          `–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç\n\n` +
          `üí∞ –ó–æ–ª–æ—Ç–æ: ${character.gold}`,
          { parse_mode: "Markdown" }
        );
        return;
      }

      let inventoryText = `üéí **–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ${character.name}**\n\n`;

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
      const byType = {};
      for (const item of inventory) {
        if (!byType[item.type]) byType[item.type] = [];
        byType[item.type].push(item);
      }

      const typeNames = {
        weapon: "‚öîÔ∏è –û—Ä—É–∂–∏–µ",
        armor: "üõ°Ô∏è –ë—Ä–æ–Ω—è",
        consumable: "üß™ –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏",
        misc: "üì¶ –†–∞–∑–Ω–æ–µ",
        artifact: "üíé –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã",
      };

      const rarityEmojis = {
        common: "‚ö™",
        uncommon: "üü¢",
        rare: "üîµ",
        epic: "üü£",
        legendary: "üü†",
      };

      let itemIndex = 1;
      const itemButtons = [];

      for (const [type, items] of Object.entries(byType)) {
        inventoryText += `**${typeNames[type] || type}:**\n`;

        for (const item of items) {
          const emoji = rarityEmojis[item.rarity] || "‚ùì";
          inventoryText += `${itemIndex}. ${emoji} ${item.name}`;
          if (item.quantity > 1) inventoryText += ` x${item.quantity}`;
          if (item.equipped) inventoryText += " üìå";
          inventoryText += "\n";

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
          if (type === "consumable" && !character.isDead()) {
            itemButtons.push({
              text: `${itemIndex}. ${item.name}`,
              callback_data: `use_${item.id}`,
            });
          }

          itemIndex++;
        }
        inventoryText += "\n";
      }

      inventoryText += `üí∞ **–ó–æ–ª–æ—Ç–æ:** ${character.gold}`;

      const keyboard = [];

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      if (itemButtons.length > 0) {
        for (let i = 0; i < itemButtons.length; i += 2) {
          const row = [itemButtons[i]];
          if (itemButtons[i + 1]) {
            row.push(itemButtons[i + 1]);
          }
          keyboard.push(row);
        }
      }

      log(`[DEBUG] –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: ${itemButtons.length}`);

      await ctx.reply(inventoryText, {
        parse_mode: "Markdown",
        reply_markup: keyboard.length > 0 ? { inline_keyboard: keyboard } : undefined,
      });
    });
  }

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
  async handleUseItem(ctx) {
    const text = ctx.message.text;
    const itemName = text.replace("/use ", "").trim();

    if (!itemName) {
      await ctx.reply(
        "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞!\n" +
        "–ü—Ä–∏–º–µ—Ä: /use –ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è\n\n" +
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /inventory",
        { parse_mode: "Markdown" }
      );
      return;
    }

    await this.withCharacter(ctx, async (character) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–µ—Ä—Ç–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
      if (!await this.checkCharacterAlive(character, ctx)) return;

      // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const item = await db.get(
        `
        SELECT i.*, inv.id as inventory_id, inv.quantity 
        FROM inventory inv
        JOIN items i ON inv.item_id = i.id
        WHERE inv.character_id = ? 
          AND LOWER(i.name) = LOWER(?)
          AND i.type = 'consumable'
      `,
        [character.id, itemName]
      );

      if (!item) {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        const partialMatch = await db.get(
          `
          SELECT i.*, inv.id as inventory_id, inv.quantity 
          FROM inventory inv
          JOIN items i ON inv.item_id = i.id
          WHERE inv.character_id = ? 
            AND LOWER(i.name) LIKE LOWER(?)
            AND i.type = 'consumable'
          LIMIT 1
        `,
          [character.id, `%${itemName}%`]
        );

        if (!partialMatch) {
          await ctx.reply(
            `‚ùå –ü—Ä–µ–¥–º–µ—Ç "${itemName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /inventory –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤.`,
            { parse_mode: "Markdown" }
          );
          return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        await this._useItem(ctx, character, partialMatch);
      } else {
        await this._useItem(ctx, character, item);
      }
    });
  }

  // Callback –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
  async handleUseItemCallback(ctx) {
    const data = ctx.callbackQuery.data;
    const itemId = data.replace("use_", "");

    await this.withCharacter(ctx, async (character) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–µ—Ä—Ç–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
      if (character.hp_current <= 0) {
        await ctx.answerCbQuery("‚ò†Ô∏è –ú–µ—Ä—Ç–≤—ã–µ –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã!");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      const item = await db.get(
        `
        SELECT i.*, inv.id as inventory_id, inv.quantity 
        FROM inventory inv
        JOIN items i ON inv.item_id = i.id
        WHERE inv.character_id = ? AND inv.item_id = ?
      `,
        [character.id, itemId]
      );

      if (!item || item.type !== "consumable") {
        await ctx.answerCbQuery("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!");
        return;
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
      const result = await this._useItem(ctx, character, item);
      
      if (result.used) {
        await ctx.answerCbQuery("‚úÖ –ü—Ä–µ–¥–º–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!");
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
        try {
          await ctx.deleteMessage();
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        await this.handleShowInventory(ctx);
      } else {
        await ctx.answerCbQuery("‚ö†Ô∏è –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —Å–µ–π—á–∞—Å –Ω–µ –Ω—É–∂–µ–Ω!");
      }
    });
  }

  // –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é)
  async handleGive(ctx) {
    const text = ctx.message.text;
    const parts = text.split(" ");

    if (parts.length < 3) {
      await ctx.reply(
        `‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n` +
        `/give @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç\n` +
        `/give @username –∑–æ–ª–æ—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n` +
        `**–ü—Ä–∏–º–µ—Ä—ã:**\n` +
        `/give @friend 1 –ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è\n` +
        `/give @friend –∑–æ–ª–æ—Ç–æ 100`,
        { parse_mode: "Markdown" }
      );
      return;
    }

    await ctx.reply(
      `‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /trade –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞.`,
      { parse_mode: "Markdown" }
    );
  }

  // –ü–æ–¥–∞—Ä–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã
  async handleGift(ctx) {
    const text = ctx.message.text;
    const parts = text.split(" ");

    if (parts.length < 3) {
      await ctx.reply(
        `üéÅ **–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤**\n\n` +
        `**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n` +
        `/gift @–∏–º—è —Å—É–º–º–∞\n` +
        `/gift @–∏–º—è –ø—Ä–µ–¥–º–µ—Ç\n\n` +
        `**–ü—Ä–∏–º–µ—Ä—ã:**\n` +
        `‚Ä¢ /gift @Ivan 50\n` +
        `‚Ä¢ /gift @Maria 100 –∑–æ–ª–æ—Ç–∞\n` +
        `‚Ä¢ /gift @Alex –ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è\n\n` +
        `**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n` +
        `‚Ä¢ –ü–æ–¥–∞—Ä–∏—Ç—å –∑–æ–ª–æ—Ç–æ (—á–∏—Å–ª–æ)\n` +
        `‚Ä¢ –ü–æ–¥–∞—Ä–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ)\n`,
        { parse_mode: "Markdown" }
      );
      return;
    }

    await this.withCharacter(ctx, async (giver) => {
      // –ü–∞—Ä—Å–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      const recipientName = parts[1].replace("@", "");

      // –ü–∞—Ä—Å–∏–º —á—Ç–æ –¥–∞—Ä–∏–º
      const giftText = parts.slice(2).join(" ");
      const goldAmount = parseInt(giftText);

      if (!isNaN(goldAmount) && goldAmount > 0) {
        // –î–∞—Ä–∏–º –∑–æ–ª–æ—Ç–æ
        if (giver.gold < goldAmount) {
          await ctx.reply(
            `‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!\n` +
            `–£ –≤–∞—Å: ${giver.gold} üí∞\n` +
            `–ù—É–∂–Ω–æ: ${goldAmount} üí∞`,
            { parse_mode: "Markdown" }
          );
          return;
        }

        await ctx.reply(
          `üéÅ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞**\n\n` +
          `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @${recipientName}\n` +
          `–ü–æ–¥–∞—Ä–æ–∫: üí∞ ${goldAmount} –∑–æ–ª–æ—Ç–∞\n\n` +
          `‚ö†Ô∏è –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /trade –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞.`,
          { parse_mode: "Markdown" }
        );
      } else {
        // –î–∞—Ä–∏–º –ø—Ä–µ–¥–º–µ—Ç
        const itemName = giftText;

        // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        const inventory = await giver.getInventory();
        const item = inventory.find((i) =>
          i.name.toLowerCase().includes(itemName.toLowerCase())
        );

        if (!item) {
          await ctx.reply(
            `‚ùå –ü—Ä–µ–¥–º–µ—Ç "${itemName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /inventory –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.`,
            { parse_mode: "Markdown" }
          );
          return;
        }

        await ctx.reply(
          `üéÅ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞**\n\n` +
          `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @${recipientName}\n` +
          `–ü–æ–¥–∞—Ä–æ–∫: ${item.name}\n\n` +
          `‚ö†Ô∏è –û–±–º–µ–Ω –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∫–∞ –º–æ–∂–Ω–æ –¥–∞—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–æ–ª–æ—Ç–æ —á–µ—Ä–µ–∑ /trade.`,
          { parse_mode: "Markdown" }
        );
      }
    });
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–∞
  async _useItem(ctx, character, item) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–∞
    const effects = JSON.parse(item.effects || "{}");
    let message = `üß™ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ${item.name}**\n`;
    message += `_${item.description}_\n\n`;

    let actuallyUsed = false;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ—á–µ–Ω–∏–µ
    if (effects.hp && effects.hp > 0) {
      const hpBefore = character.hp_current;
      await character.modifyHP(effects.hp);
      const hpAfter = character.hp_current;
      const actualHealed = hpAfter - hpBefore;

      if (actualHealed > 0) {
        message += `‚ù§Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${actualHealed} HP (${hpBefore} ‚Üí ${hpAfter}/${character.hp_max})\n`;
        actuallyUsed = true;
      } else {
        message += `‚ù§Ô∏è HP —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ (${character.hp_max}/${character.hp_max})\n`;
      }
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥—Ä—É–≥–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π)
    if (effects.mp) {
      message += `üíô –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${effects.mp} MP\n`;
      actuallyUsed = true;
    }

    if (effects.invisibility) {
      message += `üëª –í—ã –Ω–µ–≤–∏–¥–∏–º—ã –Ω–∞ ${effects.invisibility} –º–∏–Ω—É—Ç\n`;
      actuallyUsed = true;
    }

    if (effects.teleport) {
      message += `‚ú® –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n`;
      actuallyUsed = true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª–µ–∑–µ–Ω
    if (!actuallyUsed && effects.hp) {
      if (ctx.callbackQuery) {
        return { used: false };
      }
      
      await ctx.reply(
        `‚ö†Ô∏è **${item.name}** —Å–µ–π—á–∞—Å –Ω–µ –Ω—É–∂–µ–Ω!\n\n` +
        `–í–∞—à–µ HP —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: ${character.hp_current}/${character.hp_max}`,
        { parse_mode: "Markdown" }
      );
      return { used: false };
    }

    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    await db.run("UPDATE inventory SET quantity = quantity - 1 WHERE id = ?", [
      item.inventory_id,
    ]);

    // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
    await db.run("DELETE FROM inventory WHERE id = ? AND quantity <= 0", [
      item.inventory_id,
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–µ–º—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
    if (item.quantity > 1) {
      message += `\nüì¶ –û—Å—Ç–∞–ª–æ—Å—å: ${item.quantity - 1} —à—Ç.`;
    } else {
      message += `\nüì¶ –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç!`;
    }

    await ctx.reply(message, { parse_mode: "Markdown" });

    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    log(`${character.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª ${item.name}`);
    
    return { used: true };
  }
}

module.exports = new InventoryHandler();