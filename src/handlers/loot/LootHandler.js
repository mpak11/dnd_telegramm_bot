const BaseHandler = require('../../core/BaseHandler');
const { Character } = require('../../../database/models');
const lootSystem = require('../../../systems/lootSystem');
const { log } = require('../../../utils/logger');

class LootHandler extends BaseHandler {
  // –°–æ–∑–¥–∞—Ç—å —Å—É–Ω–¥—É–∫ —Å –ª—É—Ç–æ–º
  async handleCreateChest(ctx) {
    await this.withCharacter(ctx, async (character) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏–ª–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö)
      if (ctx.chat.type === "private") {
        await ctx.reply("‚ùå –°—É–Ω–¥—É–∫–∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!");
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—É–Ω–¥—É–∫
      const difficulties = ["easy", "medium", "hard"];
      const difficulty = difficulties[Math.floor(Math.random() * difficulties.length)];

      const chest = await lootSystem.createLootChest(
        ctx.chat.id,
        difficulty,
        character.id
      );

      const difficultyNames = {
        easy: "üü¢ –ü—Ä–æ—Å—Ç–æ–π",
        medium: "üü° –û–±—ã—á–Ω—ã–π",
        hard: "üî¥ –†–µ–¥–∫–∏–π",
      };

      await ctx.reply(
        `üì¶ **–ü–æ—è–≤–∏–ª—Å—è —Å—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏!**\n\n` +
        `${difficultyNames[difficulty]} —Å—É–Ω–¥—É–∫\n` +
        `üí∞ –í–Ω—É—Ç—Ä–∏ —á—Ç–æ-—Ç–æ —Ü–µ–Ω–Ω–æ–µ...\n\n` +
        `–ü–µ—Ä–≤—ã–π, –∫—Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç, –ø–æ–ª—É—á–∏—Ç –≤—Å–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞!`,
        {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üîì –û—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫!",
                  callback_data: `chest_open_${chest.id}`,
                },
              ],
            ],
          },
        }
      );

      log(`${character.name} —Å–æ–∑–¥–∞–ª ${difficulty} —Å—É–Ω–¥—É–∫ –≤ —á–∞—Ç–µ ${ctx.chat.id}`);
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞
  async handleChestCallback(ctx) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const data = ctx.callbackQuery.data;

    if (data.startsWith("chest_open_")) {
      const chestId = parseInt(data.replace("chest_open_", ""));

      const character = await Character.findActive(userId, chatId);
      if (!character) {
        await ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
        return;
      }

      const result = await lootSystem.openChest(chestId, character.id);

      if (!result.success) {
        await ctx.answerCbQuery(result.message);
        return;
      }

      await ctx.answerCbQuery("üéâ –°—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç!");

      let message = `üéâ **${character.name} –æ—Ç–∫—Ä—ã–ª —Å—É–Ω–¥—É–∫!**\n\n`;
      message += `**–ü–æ–ª—É—á–µ–Ω–æ:**\n`;

      if (result.loot.gold > 0) {
        message += `üí∞ ${result.loot.gold} –∑–æ–ª–æ—Ç–∞\n`;
      }

      const rarityEmojis = {
        common: "‚ö™",
        uncommon: "üü¢",
        rare: "üîµ",
        epic: "üü£",
        legendary: "üü†",
      };

      for (const item of result.loot.items) {
        const emoji = rarityEmojis[item.rarity] || "‚ùì";
        message += `${emoji} ${item.name}\n`;
      }

      await ctx.editMessageText(message, { parse_mode: "Markdown" });

      log(`${character.name} –æ—Ç–∫—Ä—ã–ª —Å—É–Ω–¥—É–∫ ${chestId} –∏ –ø–æ–ª—É—á–∏–ª: ${result.loot.gold} –∑–æ–ª–æ—Ç–∞ –∏ ${result.loot.items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—É–Ω–¥—É–∫–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async handleCreateSpecialChest(ctx) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    const isAdmin = await this.checkAdminRights(ctx);
    if (!isAdmin) {
      await ctx.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!");
      return;
    }

    const args = ctx.message.text.split(' ').slice(1);
    
    if (args.length < 1) {
      await ctx.reply(
        `‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n` +
        `/create_chest [difficulty] [gold]\n\n` +
        `**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** easy, medium, hard, epic, legendary\n` +
        `**–ü—Ä–∏–º–µ—Ä:** /create_chest epic 1000`,
        { parse_mode: "Markdown" }
      );
      return;
    }

    const difficulty = args[0] || "medium";
    const goldAmount = parseInt(args[1]) || null;

    await this.withCharacter(ctx, async (character) => {
      const chest = await lootSystem.createLootChest(
        ctx.chat.id,
        difficulty,
        character.id,
        goldAmount
      );

      const difficultyNames = {
        easy: "üü¢ –ü—Ä–æ—Å—Ç–æ–π",
        medium: "üü° –û–±—ã—á–Ω—ã–π",
        hard: "üî¥ –†–µ–¥–∫–∏–π",
        epic: "üü£ –≠–ø–∏—á–µ—Å–∫–∏–π",
        legendary: "üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π",
      };

      await ctx.reply(
        `üì¶ **–°–æ–∑–¥–∞–Ω –æ—Å–æ–±—ã–π —Å—É–Ω–¥—É–∫!**\n\n` +
        `${difficultyNames[difficulty] || difficulty} —Å—É–Ω–¥—É–∫\n` +
        `${goldAmount ? `üí∞ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–æ–ª–æ—Ç–æ: ${goldAmount}\n` : ''}` +
        `‚ú® –°–æ–∑–¥–∞—Ç–µ–ª—å: ${character.name}\n\n` +
        `–ö—Ç–æ –ø–µ—Ä–≤—ã–π –æ—Ç–∫—Ä–æ–µ—Ç?`,
        {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üîì –û—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫!",
                  callback_data: `chest_open_${chest.id}`,
                },
              ],
            ],
          },
        }
      );
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  async checkAdminRights(ctx) {
    if (ctx.chat.type === "private") {
      // –í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º
      return true;
    }

    try {
      const member = await ctx.getChatMember(ctx.from.id);
      return member.status === "administrator" || member.status === "creator";
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞: ${error.message}`, "error");
      return false;
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—É–Ω–¥—É–∫–æ–≤ –≤ —á–∞—Ç–µ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
  async handleChestHistory(ctx) {
    const chatId = ctx.chat.id;
    
    try {
      const history = await lootSystem.getChestHistory(chatId, 10);
      
      if (!history || history.length === 0) {
        await ctx.reply("üì¶ –í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ –±—ã–ª–æ —Å—É–Ω–¥—É–∫–æ–≤!");
        return;
      }

      let message = "üì¶ **–ò—Å—Ç–æ—Ä–∏—è —Å—É–Ω–¥—É–∫–æ–≤**\n\n";
      
      for (const chest of history) {
        const date = new Date(chest.created_at).toLocaleDateString("ru-RU");
        const openedBy = chest.opened_by_name || "–ù–µ –æ—Ç–∫—Ä—ã—Ç";
        
        message += `‚Ä¢ ${date} - ${chest.difficulty} —Å—É–Ω–¥—É–∫\n`;
        message += `  –û—Ç–∫—Ä—ã–ª: ${openedBy}\n`;
        if (chest.gold_amount > 0) {
          message += `  –ó–æ–ª–æ—Ç–æ: ${chest.gold_amount} üí∞\n`;
        }
        message += "\n";
      }

      await ctx.reply(message, { parse_mode: "Markdown" });
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—É–Ω–¥—É–∫–æ–≤: ${error.message}`, "error");
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏");
    }
  }
}

module.exports = new LootHandler();