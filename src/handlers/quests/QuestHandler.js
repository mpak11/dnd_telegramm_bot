const BaseHandler = require('../../core/BaseHandler');
const { Character } = require('../../../database/models');
const questSystem = require('../../../systems/questSystem');
const { log } = require('../../../utils/logger');
const config = require('../../../config/config');

class QuestHandler extends BaseHandler {
  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–≤–µ—Å—Ç (–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ index.js)
  async handleShowQuest(ctx) {
    const chatId = ctx.chat.id;
    
    await this.withCharacter(ctx, async (character) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–µ—Ä—Ç–≤ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
      if (character.hp_current <= 0) {
        await ctx.reply(
          `‚ò†Ô∏è **${character.name} –º–µ—Ä—Ç–≤!**\n\n` +
          `–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–± —Å —á–µ—Å—Ç—å—é.\n` +
          `HP: ${character.hp_current}/${character.hp_max}\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`,
          { parse_mode: "Markdown" }
        );
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç (–ª–æ–≥–∏–∫–∞ –∏–∑ RollQuestDice.js)
      const quest = await questSystem.getActiveQuest(chatId);
      if (!quest) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç
        const canReceive = await questSystem.canReceiveQuest(chatId);

        if (canReceive.can) {
          // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç
          const newQuest = await questSystem.assignQuest(chatId);
          if (newQuest) {
            await this.showQuestInfo(ctx, newQuest, character);
            return;
          }
        }

        await ctx.reply(
          `‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞!\n\n${canReceive.reason || "–ñ–¥–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏."}`,
          { parse_mode: "Markdown" }
        );
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–µ
      await this.showQuestInfo(ctx, quest, character);
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π –±—Ä–æ—Å–∫–∞ (–∏–∑ RollQuestDice.js)
  async showQuestInfo(ctx, quest, character) {
    const statConfig = config.STATS[quest.stat_check];
    const timeLeft = Math.ceil(
      (new Date(quest.expires_at) - new Date()) / 1000 / 60
    );

    const difficultyEmoji = {
      easy: "üü¢",
      medium: "üü°",
      hard: "üî¥",
      epic: "üü£",
      legendary: "‚≠ê",
    };

    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const statModifier = character.getRollBonus(quest.stat_check);
    const modSign = statModifier >= 0 ? "+" : "";

    const message = `
üéØ **–ê–ö–¢–ò–í–ù–´–ô –ö–í–ï–°–¢**

${difficultyEmoji[quest.difficulty] || "‚ùì"} **${quest.title}**
${quest.description}

üìä **–ü—Ä–æ–≤–µ—Ä–∫–∞:** ${statConfig.emoji} ${statConfig.name}
üé≤ **–í–∞—à –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä:** ${modSign}${statModifier}
‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:** ${timeLeft} –º–∏–Ω
üí∞ **–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:** ${quest.xp_reward} XP, ${quest.gold_reward} –∑–æ–ª–æ—Ç–∞

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
- –í—ã –±—Ä–æ—Å–∏—Ç–µ 1d20 ${modSign}${statModifier}
- –†–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
- 20 - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö!
- 1 - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–∞–ª!
`;

    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [{ text: "üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫!", callback_data: "quest_roll" }],
        ],
      },
    });
  }

  // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ (–∏–∑ ResultQuest.js)
  async handleQuestRoll(ctx) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;

    try {
      await ctx.answerCbQuery("üé≤ –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫...");
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É answerCbQuery
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const character = await Character.findActive(userId, chatId);
      if (!character) {
        await ctx.editMessageText("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç
      const quest = await questSystem.getActiveQuest(chatId);
      if (!quest) {
        await ctx.editMessageText("‚ùå –ö–≤–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫!");
        return;
      }

      // –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫
      const roll = Math.floor(Math.random() * 20) + 1;

      // –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
      const diceEmojis = ["‚öÄ", "‚öÅ", "‚öÇ", "‚öÉ", "‚öÑ", "‚öÖ"];
      let lastDice = null;

      for (let i = 0; i < 3; i++) {
        let randomDice;
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–æ–π —ç–º–æ–¥–∑–∏
        do {
          randomDice = diceEmojis[Math.floor(Math.random() * diceEmojis.length)];
        } while (randomDice === lastDice && diceEmojis.length > 1);

        lastDice = randomDice;

        try {
          await ctx.editMessageText(`${randomDice} –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫...`);
        } catch (error) {
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          if (!error.message.includes("message is not modified")) {
            throw error;
          }
        }

        await new Promise((resolve) => setTimeout(resolve, 500));
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–≤–µ—Å—Ç
      const result = await questSystem.executeQuest(character, roll);

      if (!result.success) {
        await ctx.editMessageText(`‚ùå ${result.message}`);
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
      const statConfig = config.STATS[result.statUsed];
      const criticalText =
        roll === 20
          ? "‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•! ‚ö°\n"
          : roll === 1
            ? "üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–í–ê–õ! üíÄ\n"
            : "";

      let message = `üéØ **${result.questTitle}**\n\n`;
      message += criticalText;
      message += `üé≤ –ë—Ä–æ—Å–æ–∫: **${roll}**\n`;
      message += `${statConfig.emoji} –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä ${statConfig.name}: ${result.statModifier >= 0 ? "+" : ""}${result.statModifier}\n`;
      message += `üìä –ò—Ç–æ–≥–æ: **${result.totalRoll}**\n\n`;

      message += `${result.questResult.result_text}\n\n`;

      message += `**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n`;
      if (result.xpGained > 0) {
        message += `‚ú® –û–ø—ã—Ç: +${result.xpGained} XP\n`;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–æ–ª–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ
      if (result.goldGained > 0) {
        if (result.lootGold > 0) {
          message += `üí∞ –ó–æ–ª–æ—Ç–æ: +${result.goldGained - result.lootGold} (–∫–≤–µ—Å—Ç) +${result.lootGold} (–¥–æ–±—ã—á–∞) = **+${result.goldGained}**\n`;
        } else {
          message += `üí∞ –ó–æ–ª–æ—Ç–æ: +${result.goldGained}\n`;
        }
      } else if (result.goldGained < 0) {
        message += `üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ –∑–æ–ª–æ—Ç–∞: ${Math.abs(result.goldGained)}\n`;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      if (result.lootItems && result.lootItems.length > 0) {
        message += `\nüéÅ **–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:**\n`;

        const rarityEmojis = {
          common: "‚ö™",
          uncommon: "üü¢",
          rare: "üîµ",
          epic: "üü£",
          legendary: "üü†",
        };

        for (const item of result.lootItems) {
          const emoji = rarityEmojis[item.rarity] || "‚ùì";
          message += `${emoji} ${item.name}\n`;
        }
      }

      if (result.damageDealt > 0) {
        message += `üíî –£—Ä–æ–Ω: -${result.damageDealt} HP (${result.characterHp}/${result.characterMaxHp})\n`;
      }

      if (result.levelUp) {
        message += `\nüéâ **–ù–û–í–´–ô –£–†–û–í–ï–ù–¨! ${result.levelUp.from} ‚Üí ${result.levelUp.to}**\n`;

        if (result.levelUp.abilityPointsGained > 0) {
          message += `üíé **–ü–æ–ª—É—á–µ–Ω–æ ${result.levelUp.abilityPointsGained} –æ—á–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è!** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /improve\n`;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      if (result.isDead) {
        message += `\n‚ò†Ô∏è **–ü–ï–†–°–û–ù–ê–ñ –ü–û–ì–ò–ë!** ‚ò†Ô∏è\n`;
        message += `\n_${character.name} –ø–∞–ª —Å–º–µ—Ä—Ç—å—é —Ö—Ä–∞–±—Ä—ã—Ö, –≤—ã–ø–æ–ª–Ω—è—è –æ–ø–∞—Å–Ω—ã–π –∫–≤–µ—Å—Ç._\n`;
        message += `_–ü–æ–∫–æ–π—Å—è —Å –º–∏—Ä–æ–º, –æ—Ç–≤–∞–∂–Ω—ã–π ${character.getClassInfo()}._\n\n`;
        message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.`;
      }

      await ctx.editMessageText(message, { parse_mode: "Markdown" });

      log(`${character.name} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–≤–µ—Å—Ç "${result.questTitle}" —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º ${result.totalRoll}`);
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞: ${error.message}`, "error");

      try {
        await ctx.editMessageText(
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
          { parse_mode: "Markdown" }
        );
      } catch (editError) {
        // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await ctx.reply(
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
          { parse_mode: "Markdown" }
        );
      }
    }
  }

  // –ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–æ–≤ (–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ index.js)
  async handleListQuests(ctx) {
    await this.withCharacter(ctx, async (character) => {
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
      const history = await questSystem.getQuestHistory(character.id, 10);

      if (history.length === 0) {
        await ctx.reply(
          `üìú **–ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–æ–≤ ${character.name}**\n\n–í—ã –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞!`,
          { parse_mode: "Markdown" }
        );
        return;
      }

      const difficultyEmoji = {
        easy: "üü¢",
        medium: "üü°",
        hard: "üî¥",
        epic: "üü£",
        legendary: "‚≠ê",
      };

      let message = `üìú **–ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–æ–≤ ${character.name}**\n\n`;

      for (const quest of history) {
        const date = new Date(quest.completed_at).toLocaleDateString("ru-RU");
        const successEmoji = quest.success ? "‚úÖ" : "‚ùå";

        message += `${successEmoji} ${difficultyEmoji[quest.difficulty]} **${quest.title}**\n`;
        message += `   –ë—Ä–æ—Å–æ–∫: ${quest.roll_result} | +${quest.xp_gained} XP | +${quest.gold_gained} üí∞\n`;
        message += `   ${date}\n\n`;
      }

      await ctx.reply(message, { parse_mode: "Markdown" });
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç –≤—Ä—É—á–Ω—É—é (–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ index.js)
  async handleGetQuest(ctx) {
    const chatId = ctx.chat.id;
    const db = require('../../../database');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ñ–ò–í–´–ï –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ —á–∞—Ç–µ
    const characters = await db.all(
      "SELECT COUNT(*) as count FROM characters WHERE chat_id = ? AND is_active = 1 AND hp_current > 0",
      [chatId]
    );

    if (characters[0].count === 0) {
      await ctx.reply(
        "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∂–∏–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!\n\n" +
        "–í—Å–µ –≥–µ—Ä–æ–∏ –ø–∞–ª–∏ –≤ –±–∏—Ç–≤–∞—Ö. üò¢\n\n" +
        "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–æ–π /create",
        { parse_mode: "Markdown" }
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
    const canReceive = await questSystem.canReceiveQuest(chatId);

    if (!canReceive.can) {
      await ctx.reply(`‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç!\n\n${canReceive.reason}`, {
        parse_mode: "Markdown",
      });
      return;
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–≤–µ—Å—Ç
    const quest = await questSystem.assignQuest(chatId);

    if (!quest) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–≤–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {
        parse_mode: "Markdown",
      });
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–µ
    const statConfig = config.STATS[quest.stat_check];
    const difficultyEmoji = {
      easy: "üü¢",
      medium: "üü°",
      hard: "üî¥",
      epic: "üü£",
      legendary: "‚≠ê",
    };

    const message = `
üéØ **–ù–û–í–´–ô –ö–í–ï–°–¢ –ü–û–õ–£–ß–ï–ù!**

${difficultyEmoji[quest.difficulty] || "‚ùì"} **${quest.title}**
${quest.description}

üìä **–ü—Ä–æ–≤–µ—Ä–∫–∞:** ${statConfig.emoji} ${statConfig.name}
‚è∞ **–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:** 4 —á–∞—Å–∞
üí∞ **–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:** ${quest.xp_reward} XP, ${quest.gold_reward} –∑–æ–ª–æ—Ç–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /quest —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å!
`;

    await ctx.reply(message, { parse_mode: "Markdown" });

    log(`–ö–≤–µ—Å—Ç "${quest.title}" –≤—ã–¥–∞–Ω –≤—Ä—É—á–Ω—É—é –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
  }
}

module.exports = new QuestHandler();