const BaseHandler = require('../../core/BaseHandler');
const { Character } = require('../../../database/models');
const equipmentSystem = require('../../../systems/equipmentSystem');
const { log } = require('../../../utils/logger');
const db = require('../../../database');

class EquipmentHandler extends BaseHandler {
  // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É
  async handleEquipment(ctx) {
    await this.withCharacter(ctx, async (character) => {
      try {
        const display = await equipmentSystem.getEquipmentDisplay(character.id);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const keyboard = [
          [
            { text: "üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data: "show_inventory" },
            { text: "üéí –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data: "equip_menu" },
          ],
        ];

        await ctx.reply(display, {
          parse_mode: "Markdown",
          reply_markup: { inline_keyboard: keyboard },
        });
      } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏: ${error.message}`, "error");
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏");
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ
  async handleEquipmentCallback(ctx) {
    // –í—ã–∑—ã–≤–∞–µ–º handleEquipment –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    await this.handleEquipment(ctx);
  }

  // –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
  async handleEquipMenu(ctx) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;

    const character = await Character.findActive(userId, chatId);
    if (!character) {
      await ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!");
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å
      const inventory = await character.getInventory();
      
      // –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
      log(`[DEBUG] –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: ${inventory.length}`);
      
      for (let i = 0; i < Math.min(5, inventory.length); i++) {
        const item = inventory[i];
        log(`[DEBUG] –ü—Ä–µ–¥–º–µ—Ç ${i + 1}: ${item.name}`);
        log(`[DEBUG] - –¢–∏–ø: ${item.type}`);
        log(`[DEBUG] - slot_type: ${item.slot_type}`);
        log(`[DEBUG] - weapon_type: ${item.weapon_type}`);
        log(`[DEBUG] - armor_type: ${item.armor_type}`);
      }

      // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å (–æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—é)
      const equipableItems = inventory.filter(item => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É –ø—Ä–µ–¥–º–µ—Ç–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ slot_type
        const isWeapon = item.type === 'weapon';
        const isArmor = item.type === 'armor';
        const isShield = item.type === 'shield';
        const hasSlotType = item.slot_type && item.slot_type !== 'null' && item.slot_type !== '';
        
        log(`[DEBUG] –ü—Ä–µ–¥–º–µ—Ç ${item.name}: weapon=${isWeapon}, armor=${isArmor}, shield=${isShield}, slot_type=${item.slot_type}`);
        
        return isWeapon || isArmor || isShield || hasSlotType;
      });

      log(`[DEBUG] –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–æ: ${equipableItems.length}`);

      if (equipableItems.length === 0) {
        await ctx.answerCbQuery("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏!");
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        let debugMessage = "üîç **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n";
        debugMessage += `–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${inventory.length}\n\n`;
        
        for (let i = 0; i < Math.min(3, inventory.length); i++) {
          const item = inventory[i];
          debugMessage += `**${item.name}**\n`;
          debugMessage += `–¢–∏–ø: ${item.type}\n`;
          debugMessage += `slot_type: ${item.slot_type || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
          debugMessage += `weapon_type: ${item.weapon_type || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
        }
        
        await ctx.editMessageText(debugMessage, {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [[
              { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_equipment" }
            ]]
          }
        });
        return;
      }

      let message = "üéí **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:**\n\n";
      const keyboard = [];

      const rarityEmoji = {
        common: "‚ö™",
        uncommon: "üü¢",
        rare: "üîµ",
        epic: "üü£",
        legendary: "üü†",
      };

      // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–∫–∏–ø–∏—Ä—É–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      for (const item of equipableItems.slice(0, 10)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        const emoji = rarityEmoji[item.rarity] || "‚ö™";
        const typeInfo = item.weapon_type || item.armor_type || item.type;
        
        message += `${emoji} **${item.name}** (${typeInfo})\n`;
        
        keyboard.push([{
          text: `${emoji} ${item.name}`,
          callback_data: `equip_item_${item.id}`
        }]);
      }

      keyboard.push([
        { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ", callback_data: "back_to_equipment" }
      ]);

      await ctx.editMessageText(message, {
        parse_mode: "Markdown",
        reply_markup: { inline_keyboard: keyboard },
      });

    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –º–µ–Ω—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏: ${error.message}`, "error");
      await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏");
    }
  }

  // –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ
  async handleEquipItem(ctx) {
    await this.withCharacter(ctx, async (character) => {
      const itemName = ctx.message.text.replace("/equip_item", "").trim();

      if (!itemName) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        const inventory = await character.getInventory();
        const equipable = inventory.filter((item) =>
          ["weapon", "armor", "shield", "accessory"].includes(item.type)
        );

        if (equipable.length === 0) {
          await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏!");
          return;
        }

        let message = "üéí **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏:**\n\n";
        const keyboard = [];

        for (const item of equipable) {
          const rarityEmoji = {
            common: "‚ö™",
            uncommon: "üü¢",
            rare: "üîµ",
            epic: "üü£",
            legendary: "üü†",
          }[item.rarity] || "‚ö™";

          keyboard.push([
            {
              text: `${rarityEmoji} ${item.name}`,
              callback_data: `equip_item_${item.id}`,
            },
          ]);
        }

        keyboard.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]);

        await ctx.reply(message, {
          parse_mode: "Markdown",
          reply_markup: { inline_keyboard: keyboard },
        });
        return;
      }

      // –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ –∏–º–µ–Ω–∏
      const inventory = await character.getInventory();
      const item = inventory.find((i) =>
        i.name.toLowerCase().includes(itemName.toLowerCase())
      );

      if (!item) {
        await ctx.reply("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!");
        return;
      }

      try {
        const result = await equipmentSystem.equipItem(character.id, item.id);
        await ctx.reply(`‚úÖ ${item.name} —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω –≤ —Å–ª–æ—Ç: ${result.slot}`, {
          parse_mode: "Markdown",
        });
      } catch (error) {
        await ctx.reply(`‚ùå ${error.message}`);
      }
    });
  }

  // Callback –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
  async handleEquipItemCallback(ctx) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const itemId = parseInt(ctx.callbackQuery.data.replace("equip_item_", ""));

    const character = await Character.findActive(userId, chatId);
    if (!character) {
      await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
      const inventory = await character.getInventory();
      const item = inventory.find(i => i.id === itemId);
      
      if (!item) {
        await ctx.answerCbQuery("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!");
        return;
      }

      log(`[DEBUG] –ü–æ–ø—ã—Ç–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å: ${item.name} (ID: ${itemId})`);
      log(`[DEBUG] –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞: ${item.type}, slot_type: ${item.slot_type}`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ—Ç –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
      let targetSlot = item.slot_type;
      
      // –ï—Å–ª–∏ slot_type –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–∏–ø—É –ø—Ä–µ–¥–º–µ—Ç–∞
      if (!targetSlot || targetSlot === 'null') {
        if (item.type === 'weapon') {
          targetSlot = 'main_hand';
        } else if (item.type === 'armor') {
          targetSlot = 'chest';
        } else if (item.type === 'shield') {
          targetSlot = 'off_hand';
        } else {
          await ctx.answerCbQuery("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!");
          return;
        }
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      if (typeof equipmentSystem !== 'undefined') {
        const result = await equipmentSystem.equipItem(character.id, itemId);
        await ctx.answerCbQuery("‚úÖ –ü—Ä–µ–¥–º–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!");
        
        await ctx.editMessageText(`‚úÖ **${item.name}** —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω –≤ —Å–ª–æ—Ç: ${result.slot}`, {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [[
              { text: "‚óÄÔ∏è –ö —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ", callback_data: "back_to_equipment" },
              { text: "üéí –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data: "equip_menu" }
            ]]
          }
        });
      } else {
        // –ü—Ä–æ—Å—Ç–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –±–µ–∑ —Å–∏—Å—Ç–µ–º—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        // –ü–æ–º–µ—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∫–∞–∫ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        await db.run(
          "UPDATE inventory SET equipped = 1, equipped_slot = ? WHERE character_id = ? AND item_id = ?",
          [targetSlot, character.id, itemId]
        );
        
        await ctx.answerCbQuery("‚úÖ –ü—Ä–µ–¥–º–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!");
        
        await ctx.editMessageText(`‚úÖ **${item.name}** —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω!`, {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [[
              { text: "‚óÄÔ∏è –ö —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ", callback_data: "back_to_equipment" },
              { text: "üéí –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data: "equip_menu" }
            ]]
          }
        });
      }

      log(`${character.name} —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª ${item.name}`);

    } catch (error) {
      log(`–û—à–∏–±–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: ${error.message}`, "error");
      await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  // –°–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç
  async handleUnequipItem(ctx) {
    await this.withCharacter(ctx, async (character) => {
      const equipment = await equipmentSystem.getEquipment(character.id);
      const equipped = Object.entries(equipment);

      if (equipped.length === 0) {
        await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!");
        return;
      }

      let message = "üéí **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Å–Ω—è—Ç–∏—è:**\n\n";
      const keyboard = [];

      for (const [slot, item] of equipped) {
        const slotName = equipmentSystem.slots[slot]?.name || slot;
        keyboard.push([
          {
            text: `${slotName}: ${item.name}`,
            callback_data: `unequip_item_${item.id}`,
          },
        ]);
      }

      keyboard.push([{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]);

      await ctx.reply(message, {
        parse_mode: "Markdown",
        reply_markup: { inline_keyboard: keyboard },
      });
    });
  }

  // Callback –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
  async handleUnequipItemCallback(ctx) {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    const itemId = parseInt(ctx.callbackQuery.data.replace("unequip_item_", ""));

    const character = await Character.findActive(userId, chatId);
    if (!character) {
      await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    try {
      const result = await equipmentSystem.unequipItem(character.id, itemId);
      await ctx.answerCbQuery("‚úÖ –ü—Ä–µ–¥–º–µ—Ç —Å–Ω—è—Ç!");

      await ctx.editMessageText(
        `‚úÖ ${result.itemName} —Å–Ω—è—Ç —Å–æ —Å–ª–æ—Ç–∞: ${result.slot}`,
        {
          parse_mode: "Markdown",
        }
      );

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É
      setTimeout(() => this.handleEquipment(ctx), 1000);
    } catch (error) {
      await ctx.answerCbQuery(`‚ùå ${error.message}`);
    }
  }
}

module.exports = new EquipmentHandler();