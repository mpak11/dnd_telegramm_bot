const { log } = require("../../utils/logger");
const CallbackRouter = require("../core/CallbackRouter");

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ handlers
const generalHandler = require("./general/GeneralHandler");
const characterHandler = require("./character/CharacterHandler");
const characterStatsHandler = require("./character/CharacterStatsHandler");
const characterDeleteHandler = require("./character/CharacterDeleteHandler");
const graveyardHandler = require("./character/GraveyardHandler");
const inventoryHandler = require("./inventory/InventoryHandler");

// TODO: –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ handlers

function setupHandlers(bot) {
  log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ handlers...", "info");

  // –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
  bot.command("start", (ctx) => generalHandler.handleStart(ctx));
  bot.command("help", (ctx) => generalHandler.handleHelp(ctx));
  bot.command("status", (ctx) => generalHandler.handleStatus(ctx));
  bot.command("check_bot", (ctx) => generalHandler.handleCheckBot(ctx));

  // –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  bot.command("create", (ctx) => characterHandler.handleCreateCharacter(ctx));
  bot.command("hero", (ctx) => characterHandler.handleShowCharacter(ctx));
  bot.command("quickcreate", (ctx) => characterHandler.handleQuickCreate(ctx));
  bot.command("setname", (ctx) => characterHandler.handleSetName(ctx));
  bot.command("debug_chars", (ctx) =>
    characterHandler.handleDebugCharacters(ctx)
  );

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  bot.command("stats", (ctx) => characterStatsHandler.handleShowStats(ctx));
  bot.command("improve", (ctx) => characterStatsHandler.handleImprove(ctx));
  bot.command("improvements", (ctx) =>
    characterStatsHandler.handleImprovementHistory(ctx)
  );

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏ –∫–ª–∞–¥–±–∏—â–µ
  bot.command("delete", (ctx) =>
    characterDeleteHandler.handleDeleteCharacter(ctx)
  );
  bot.command("graveyard", (ctx) => graveyardHandler.handleGraveyard(ctx));
  bot.command("memorial", (ctx) => graveyardHandler.handleMemorial(ctx));
  bot.command("findhero", (ctx) => graveyardHandler.handleFindHero(ctx));

  // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
  bot.command("inventory", (ctx) => inventoryHandler.handleShowInventory(ctx));
  bot.command("use", (ctx) => inventoryHandler.handleUseItem(ctx));
  bot.command("give", (ctx) => inventoryHandler.handleGive(ctx));
  bot.command("gift", (ctx) => inventoryHandler.handleGift(ctx));

  // TODO: –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback router
  const callbackRouter = new CallbackRouter();

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback handlers
  callbackRouter.register("create_character", (ctx) =>
    characterHandler.handleCreateCharacter(ctx)
  );
  callbackRouter.register("show_hero", (ctx) =>
    characterHandler.handleShowCharacter(ctx)
  );
  callbackRouter.register("delete_confirm", (ctx) =>
    characterDeleteHandler.confirmDeleteCharacter(ctx)
  );
  callbackRouter.register("delete_cancel", async (ctx) => {
    await ctx.answerCbQuery("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
    await ctx.deleteMessage();
  });
  callbackRouter.register("use_", (ctx) =>
    inventoryHandler.handleUseItemCallback(ctx)
  );
  callbackRouter.register("show_inventory", (ctx) =>
    inventoryHandler.handleShowInventory(ctx)
  );

  // TODO: –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ callbacks

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
  bot.on("callback_query", (ctx) => callbackRouter.route(ctx));

  log("‚úÖ Handlers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã", "success");
}

module.exports = { setupHandlers };
