const BaseHandler = require('../../core/BaseHandler');
const { log } = require('../../../utils/logger');
const db = require('../../../database');

class ItemSearchHandler extends BaseHandler {
  // –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  async handleItemSearch(ctx) {
    const query = ctx.message.text.replace("/itemsearch", "").trim();

    if (!query) {
      await ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞: /itemsearch –º–µ—á");
      return;
    }

    try {
      const items = await db.all(
        `
        SELECT * FROM items 
        WHERE name LIKE ? OR description LIKE ?
        ORDER BY rarity DESC, name
        LIMIT 10
      `,
        [`%${query}%`, `%${query}%`]
      );

      if (items.length === 0) {
        await ctx.reply("‚ùå –ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        return;
      }

      let result = `üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ "${query}":**\n\n`;

      const rarityEmoji = {
        common: "‚ö™",
        uncommon: "üü¢",
        rare: "üîµ",
        epic: "üü£",
        legendary: "üü†",
      };

      for (const item of items) {
        const emoji = rarityEmoji[item.rarity] || "‚ö™";
        result += `${emoji} **${item.name}** - ${item.value_gold} üí∞\n`;
        result += `_${item.description}_\n`;

        if (item.stats_bonus) {
          const stats = JSON.parse(item.stats_bonus);
          const statStr = Object.entries(stats)
            .map(([k, v]) => `${k}: +${v}`)
            .join(", ");
          if (statStr) result += `–ë–æ–Ω—É—Å—ã: ${statStr}\n`;
        }

        result += "\n";
      }

      await ctx.reply(result, { parse_mode: "Markdown" });
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${error.message}`, "error");
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ");
    }
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ
  async handleItemInfo(ctx) {
    const query = ctx.message.text.replace("/iteminfo", "").trim();

    if (!query) {
      await ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: /iteminfo –º–µ—á");
      return;
    }

    try {
      const item = await db.get(`SELECT * FROM items WHERE name LIKE ? LIMIT 1`, [
        `%${query}%`,
      ]);

      if (!item) {
        await ctx.reply("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const rarityEmoji = {
        common: "‚ö™",
        uncommon: "üü¢",
        rare: "üîµ",
        epic: "üü£",
        legendary: "üü†",
      };

      const emoji = rarityEmoji[item.rarity] || "‚ùì";
      let info = `${emoji} **${item.name}**\n\n`;
      info += `_${item.description}_\n\n`;
      info += `**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n`;
      info += `‚Ä¢ –¢–∏–ø: ${item.type}\n`;
      info += `‚Ä¢ –†–µ–¥–∫–æ—Å—Ç—å: ${item.rarity}\n`;
      info += `‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${item.value_gold} üí∞\n`;

      if (item.stats_bonus) {
        const stats = JSON.parse(item.stats_bonus);
        if (Object.keys(stats).length > 0) {
          info += `\n**–ë–æ–Ω—É—Å—ã:**\n`;
          for (const [stat, value] of Object.entries(stats)) {
            info += `‚Ä¢ ${stat}: +${value}\n`;
          }
        }
      }

      if (item.effects) {
        const effects = JSON.parse(item.effects);
        if (Object.keys(effects).length > 0) {
          info += `\n**–≠—Ñ—Ñ–µ–∫—Ç—ã:**\n`;
          for (const [effect, value] of Object.entries(effects)) {
            info += `‚Ä¢ ${effect}: ${value}\n`;
          }
        }
      }

      await ctx.reply(info, { parse_mode: "Markdown" });
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ: ${error.message}`, "error");
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
    }
  }
}

module.exports = new ItemSearchHandler();