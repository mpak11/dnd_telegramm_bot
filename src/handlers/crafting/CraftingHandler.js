const BaseHandler = require('../../core/BaseHandler');
const { Character } = require('../../../database/models');
const craftingSystem = require('../../../systems/craftingSystem');
const { log } = require('../../../utils/logger');
const db = require('../../../database');

class CraftingHandler extends BaseHandler {
  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
  async handleCraft(ctx) {
    await this.withCharacter(ctx, async (character) => {
      const recipes = await craftingSystem.getAvailableRecipes(character.id);

      if (recipes.length === 0) {
        await ctx.reply("üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤!");
        return;
      }

      let message = "üî® **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:**\n\n";
      const keyboard = [];

      for (const recipe of recipes) {
        const canCraft = await craftingSystem.canCraft(character.id, recipe.id);
        const status = canCraft.canCraft ? "‚úÖ" : "‚ùå";

        message += `${status} **${recipe.name}**\n`;
        message += `_${recipe.description}_\n`;
        message += `–£—Ä–æ–≤–µ–Ω—å: ${recipe.required_level}, –ó–æ–ª–æ—Ç–æ: ${recipe.required_gold}\n\n`;

        keyboard.push([
          {
            text: `${status} ${recipe.name}`,
            callback_data: `craft_view_${recipe.id}`,
          },
        ]);
      }

      keyboard.push([{ text: "‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data: "cancel" }]);

      // –ï—Å–ª–∏ —ç—Ç–æ callback, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (ctx.callbackQuery) {
        await ctx.editMessageText(message, {
          parse_mode: "Markdown",
          reply_markup: { inline_keyboard: keyboard },
        });
      } else {
        await ctx.reply(message, {
          parse_mode: "Markdown",
          reply_markup: { inline_keyboard: keyboard },
        });
      }
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥—É —Ä–µ—Ü–µ–ø—Ç–æ–≤
  async handleRecipes(ctx) {
    await this.withCharacter(ctx, async (character) => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
        const recipes = await db.all(
          `
          SELECT * FROM crafting_recipes 
          WHERE required_level <= ? 
          ORDER BY required_level, name
        `,
          [character.level]
        );

        if (recipes.length === 0) {
          await ctx.reply("üìú –†–µ—Ü–µ–ø—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!");
          return;
        }

        let message = `üìú **–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤** (–£—Ä–æ–≤–µ–Ω—å ${character.level})\n\n`;

        for (const recipe of recipes) {
          const canCraft = await craftingSystem.canCraft(character.id, recipe.id);
          const status = canCraft.canCraft ? "‚úÖ" : "‚ùå";

          message += `${status} **${recipe.name}**\n`;
          message += `   _${recipe.description}_\n`;
          message += `   –£—Ä–æ–≤–µ–Ω—å: ${recipe.required_level} | –ó–æ–ª–æ—Ç–æ: ${recipe.required_gold}\n`;

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
          const materials = JSON.parse(recipe.materials || "[]");
          if (materials.length > 0) {
            const matList = materials
              .map((m) => `${m.name} x${m.quantity}`)
              .join(", ");
            message += `   –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${matList}\n`;
          }

          message += `\n`;
        }

        message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /craft –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤.`;

        await ctx.reply(message, { parse_mode: "Markdown" });
      } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤: ${error.message}`, "error");
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤");
      }
    });
  }

  // Callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞
  async handleCraftViewCallback(ctx) {
    const recipeId = parseInt(ctx.callbackQuery.data.replace("craft_view_", ""));
    const character = await Character.findActive(ctx.from.id, ctx.chat.id);

    if (!character) {
      await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    const recipe = await db.get("SELECT * FROM crafting_recipes WHERE id = ?", [recipeId]);
    if (!recipe) {
      await ctx.answerCbQuery("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    const materials = JSON.parse(recipe.materials);
    const canCraft = await craftingSystem.canCraft(character.id, recipeId);

    let message = `üî® **${recipe.name}**\n\n`;
    message += `_${recipe.description}_\n\n`;
    message += `**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n`;
    message += `‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${recipe.required_level}\n`;
    message += `‚Ä¢ –ó–æ–ª–æ—Ç–æ: ${recipe.required_gold} üí∞\n\n`;

    message += `**–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:**\n`;
    for (const mat of materials) {
      const check = await craftingSystem.checkInventory(character.id, mat.name, mat.quantity);
      const status = check.has ? "‚úÖ" : "‚ùå";
      message += `${status} ${mat.name} x${mat.quantity} (–µ—Å—Ç—å ${check.quantity})\n`;
    }

    message += `\n–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: ${Math.floor(recipe.success_rate * 100)}%`;

    const keyboard = [];

    if (canCraft.canCraft) {
      keyboard.push([
        {
          text: "üî® –°–æ–∑–¥–∞—Ç—å",
          callback_data: `craft_item_${recipeId}`,
        },
      ]);
    }

    keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "craft_main" }]);

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: { inline_keyboard: keyboard },
    });
  }

  // Callback –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
  async handleCraftItemCallback(ctx) {
    const recipeId = parseInt(ctx.callbackQuery.data.replace("craft_item_", ""));
    const character = await Character.findActive(ctx.from.id, ctx.chat.id);

    if (!character) {
      await ctx.answerCbQuery("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return;
    }

    try {
      const result = await craftingSystem.craftItem(character.id, recipeId);

      if (result.success) {
        const rarityEmoji = {
          common: "‚ö™",
          uncommon: "üü¢",
          rare: "üîµ",
          epic: "üü£",
          legendary: "üü†",
        }[result.item.rarity] || "‚ö™";

        await ctx.answerCbQuery(result.message);
        
        let successMessage = `${result.message}\n\n`;
        successMessage += `–ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ${rarityEmoji} **${result.item.name}**\n`;
        successMessage += `_${result.item.description}_`;

        await ctx.editMessageText(successMessage, { 
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                { text: "üî® –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data: "craft_main" },
                { text: "üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data: "show_inventory" }
              ]
            ]
          }
        });

        log(`${character.name} —Å–æ–∑–¥–∞–ª ${result.item.name} —á–µ—Ä–µ–∑ –∫—Ä–∞—Ñ—Ç`);
      } else {
        await ctx.answerCbQuery(result.message);
        
        // –ï—Å–ª–∏ –Ω–µ—É–¥–∞—á–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await ctx.editMessageText(
          `‚ùå **–ö—Ä–∞—Ñ—Ç –Ω–µ —É–¥–∞–ª—Å—è!**\n\n${result.message}`,
          {
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: [
                [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ—Ü–µ–ø—Ç–∞–º", callback_data: "craft_main" }]
              ]
            }
          }
        );
      }
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –∫—Ä–∞—Ñ—Ç–∞: ${error.message}`, "error");
      await ctx.answerCbQuery(`‚ùå ${error.message}`);
    }
  }
}

module.exports = new CraftingHandler();