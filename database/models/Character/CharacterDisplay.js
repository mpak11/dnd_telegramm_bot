// –ú–µ—Ç–æ–¥—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

const config = require("../../../config/config");

class CharacterDisplay {
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  getRaceInfo() {
    const raceConfig = config.RACES[this.race];
    return `${raceConfig.emoji} ${raceConfig.name}`;
  }

  getClassInfo() {
    const classConfig = config.CLASSES[this.class];
    return `${classConfig.emoji} ${classConfig.name}`;
  }

  getFullTitle() {
    return `${this.getRaceInfo()} ${this.getClassInfo()}`;
  }

  getStatsDisplay() {
    const stats = config.STATS;
    let display = "";

    for (const [key, info] of Object.entries(stats)) {
      const value = this[key];
      const modifier = this.getStatModifier(key);
      const modSign = modifier >= 0 ? "+" : "";

      display += `${info.emoji} ${info.name}: ${value}`;
      display += ` (${modSign}${modifier})`;
      display += "\n";
    }

    return display;
  }

  getProgressBar() {
    if (this.level >= config.MAX_LEVEL) {
      return "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà MAX";
    }

    const currentLevelXP = config.XP_PER_LEVEL[this.level - 1] || 0;
    const nextLevelXP = config.XP_PER_LEVEL[this.level];
    const progress = (this.experience - currentLevelXP) / (nextLevelXP - currentLevelXP);
    const filled = Math.floor(progress * 20);
    const empty = 20 - filled;

    return "‚ñà".repeat(filled) + "‚ñë".repeat(empty) + ` ${this.experience}/${nextLevelXP}`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
  async getFullDisplay() {
    const classConfig = config.CLASSES[this.class];
    const raceConfig = config.RACES[this.race];

    let display = `üé≠ **${this.name}**`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –µ—Å–ª–∏ –º–µ—Ä—Ç–≤
    if (this.hp_current <= 0) {
      display += ` ‚ò†Ô∏è [–ú–ï–†–¢–í]`;
    }
    
    display += `\n${this.getFullTitle()} ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å ${this.level}\n\n`;

    // HP –±–∞—Ä
    const hpPercent = this.hp_current / this.hp_max;
    const hpFilled = Math.floor(hpPercent * 10);
    const hpEmpty = 10 - hpFilled;
    
    if (this.hp_current <= 0) {
      display += `‚ù§Ô∏è HP: ${"üíÄ".repeat(10)} ${this.hp_current}/${this.hp_max}\n`;
    } else {
      const hpColor = hpPercent > 0.5 ? "üü©" : hpPercent > 0.25 ? "üü®" : "üü•";
      display += `‚ù§Ô∏è HP: ${hpColor.repeat(hpFilled)}${"‚¨ú".repeat(hpEmpty)} ${this.hp_current}/${this.hp_max}\n`;
    }

    // XP –±–∞—Ä
    display += `‚ú® XP: ${this.getProgressBar()}\n`;
    display += `üí∞ –ó–æ–ª–æ—Ç–æ: ${this.gold}\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
    if (this.ability_points > 0) {
      display += `üíé **–û—á–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è: ${this.ability_points}** (/improve)\n`;
    }
    
    display += `\n**üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n${this.getStatsDisplay()}\n`;

    // –†–∞—Å–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    if (raceConfig.abilities && raceConfig.abilities.length > 0) {
      display += `**üéØ –†–∞—Å–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:**\n`;
      for (const ability of raceConfig.abilities) {
        display += `‚Ä¢ ${ability}\n`;
      }
    }

    return display;
  }

  // –ö—Ä–∞—Ç–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è —Å–ø–∏—Å–∫–æ–≤)
  getShortDisplay() {
    const status = this.hp_current <= 0 ? "‚ò†Ô∏è" : "‚ù§Ô∏è";
    return `${status} ${this.name} (${this.level} —É—Ä.) - ${this.getFullTitle()}`;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getDisplay –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  async getDisplay() {
    return await this.getFullDisplay();
  }
}

CharacterDisplay.prototype = {};

module.exports = CharacterDisplay;