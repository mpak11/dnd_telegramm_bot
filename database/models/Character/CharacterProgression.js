// –ú–µ—Ç–æ–¥—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

const db = require("../../index");
const config = require("../../../config/config");
const { log } = require("../../../utils/logger");

class CharacterProgression {
  // –î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç
  async addExperience(amount) {
    const oldLevel = this.level;
    this.experience += amount;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    let leveledUp = false;
    let abilityPointsGained = 0;
    const xpTable = config.XP_PER_LEVEL;

    while (
      this.level < config.MAX_LEVEL &&
      this.experience >= xpTable[this.level]
    ) {
      this.level++;
      leveledUp = true;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—á–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
      if (config.ABILITY_IMPROVEMENT_LEVELS.includes(this.level)) {
        abilityPointsGained += 2; // –î–∞–µ–º 2 –æ—á–∫–∞
        this.ability_points = (this.ability_points || 0) + 2;
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º HP
      const classConfig = config.CLASSES[this.class];
      let hpGain = classConfig.hpPerLevel + this.getStatModifier("constitution");

      // –î–≤–∞—Ä—Ñ—ã –ø–æ–ª—É—á–∞—é—Ç +25% HP –ø—Ä–∏ –ø—Ä–æ–∫–∞—á–∫–µ
      if (this.race === "dwarf") {
        hpGain = Math.floor(hpGain * 1.25);
      }

      hpGain = Math.max(1, hpGain); // –ú–∏–Ω–∏–º—É–º 1 HP –∑–∞ —É—Ä–æ–≤–µ–Ω—å

      this.hp_max += hpGain;
      this.hp_current += hpGain;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await db.run(
      `
      UPDATE characters 
      SET experience = ?, level = ?, hp_max = ?, hp_current = ?, ability_points = ?
      WHERE id = ?
    `,
      [
        this.experience,
        this.level,
        this.hp_max,
        this.hp_current,
        this.ability_points || 0,
        this.id,
      ]
    );

    if (leveledUp) {
      log(`üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ ${this.name} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ ${this.level}!`);
      return {
        from: oldLevel,
        to: this.level,
        abilityPointsGained: abilityPointsGained,
      };
    }

    return false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –æ–ø—ã—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  getXPToNextLevel() {
    if (this.level >= config.MAX_LEVEL) {
      return 0;
    }
    return config.XP_PER_LEVEL[this.level] - this.experience;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
  getLevelProgress() {
    if (this.level >= config.MAX_LEVEL) {
      return 1.0;
    }

    const currentLevelXP = config.XP_PER_LEVEL[this.level - 1] || 0;
    const nextLevelXP = config.XP_PER_LEVEL[this.level];
    
    return (this.experience - currentLevelXP) / (nextLevelXP - currentLevelXP);
  }
}

CharacterProgression.prototype = {};

module.exports = CharacterProgression;