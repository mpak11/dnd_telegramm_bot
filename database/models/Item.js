// –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤

const db = require('../index');
const config = require('../../config/config');

class Item {
  constructor(data) {
    this.id = data.id;
    this.name = data.name;
    this.description = data.description;
    this.type = data.type;
    this.rarity = data.rarity;
    this.effects = data.effects ? JSON.parse(data.effects) : {};
    this.requirements = data.requirements ? JSON.parse(data.requirements) : null;
    this.value_gold = data.value_gold;
    this.is_unique = data.is_unique;
  }

  // –ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID
  static async findById(id) {
    const data = await db.get('SELECT * FROM items WHERE id = ?', [id]);
    return data ? new Item(data) : null;
  }

  // –ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
  static async findAll() {
    const items = await db.all('SELECT * FROM items ORDER BY rarity DESC, name');
    return items.map(item => new Item(item));
  }

  // –ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ç–∏–ø—É
  static async findByType(type) {
    const items = await db.all(
      'SELECT * FROM items WHERE type = ? ORDER BY rarity DESC, name',
      [type]
    );
    return items.map(item => new Item(item));
  }

  // –ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
  static async findByRarity(rarity) {
    const items = await db.all(
      'SELECT * FROM items WHERE rarity = ? ORDER BY name',
      [rarity]
    );
    return items.map(item => new Item(item));
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
  static async getRandomLoot(difficulty, excludeLegendary = true) {
    // –í–µ—Å–∞ –≤—ã–ø–∞–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const lootTables = {
      easy: { common: 80, uncommon: 20, rare: 0, epic: 0, legendary: 0 },
      medium: { common: 50, uncommon: 35, rare: 15, epic: 0, legendary: 0 },
      hard: { common: 30, uncommon: 40, rare: 25, epic: 5, legendary: 0 },
      legendary: { common: 10, uncommon: 25, rare: 35, epic: 25, legendary: 5 }
    };

    const weights = lootTables[difficulty];
    if (!weights) return null;

    // –ò—Å–∫–ª—é—á–∞–µ–º –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (excludeLegendary) {
      weights.legendary = 0;
    }

    // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å
    const total = Object.values(weights).reduce((a, b) => a + b, 0);
    let random = Math.random() * total;
    let selectedRarity = 'common';

    for (const [rarity, weight] of Object.entries(weights)) {
      random -= weight;
      if (random <= 0) {
        selectedRarity = rarity;
        break;
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ (–∏—Å–∫–ª—é—á–∞—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)
    const items = await db.all(
      'SELECT * FROM items WHERE rarity = ? AND is_unique = 0',
      [selectedRarity]
    );

    if (items.length === 0) return null;

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
    const randomItem = items[Math.floor(Math.random() * items.length)];
    return new Item(randomItem);
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
  canBeUsedBy(character) {
    if (!this.requirements) return true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    if (this.requirements.level && character.level < this.requirements.level) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å
    if (this.requirements.class && character.class !== this.requirements.class) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    for (const [stat, value] of Object.entries(this.requirements)) {
      if (stat !== 'level' && stat !== 'class' && character[stat] < value) {
        return false;
      }
    }

    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ —á–∞—Ç–µ
  static async isUniqueAvailable(itemId, chatId) {
    const existing = await db.get(
      'SELECT * FROM unique_items WHERE item_id = ? AND chat_id = ?',
      [itemId, chatId]
    );
    return !existing;
  }

  // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
  static async registerUnique(itemId, chatId, characterId) {
    await db.run(
      'INSERT INTO unique_items (item_id, chat_id, owner_character_id) VALUES (?, ?, ?)',
      [itemId, chatId, characterId]
    );
  }

  // –ü–µ—Ä–µ–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
  static async transferUnique(itemId, chatId, newCharacterId) {
    await db.run(
      'UPDATE unique_items SET owner_character_id = ? WHERE item_id = ? AND chat_id = ?',
      [newCharacterId, itemId, chatId]
    );
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  getDisplay() {
    const rarityConfig = config.ITEM_RARITY[this.rarity.toUpperCase()];
    const typeEmoji = {
      weapon: '‚öîÔ∏è',
      armor: 'üõ°Ô∏è',
      consumable: 'üß™',
      misc: 'üì¶',
      artifact: 'üíé'
    };

    return `${typeEmoji[this.type] || '‚ùì'} ${rarityConfig.emoji} **${this.name}**`;
  }

  getFullDisplay() {
    let display = this.getDisplay() + '\n';
    display += `_${this.description}_\n`;
    
    // –≠—Ñ—Ñ–µ–∫—Ç—ã
    if (Object.keys(this.effects).length > 0) {
      display += '\n**–≠—Ñ—Ñ–µ–∫—Ç—ã:**\n';
      for (const [effect, value] of Object.entries(this.effects)) {
        display += `‚Ä¢ ${this.formatEffect(effect, value)}\n`;
      }
    }

    // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if (this.requirements) {
      display += '\n**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n';
      for (const [req, value] of Object.entries(this.requirements)) {
        display += `‚Ä¢ ${this.formatRequirement(req, value)}\n`;
      }
    }

    display += `\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${this.value_gold} –∑–æ–ª–æ—Ç–∞`;

    return display;
  }

  formatEffect(effect, value) {
    const effectNames = {
      hp: '–ó–¥–æ—Ä–æ–≤—å–µ',
      mp: '–ú–∞–Ω–∞',
      damage: '–£—Ä–æ–Ω',
      defense: '–ó–∞—â–∏—Ç–∞',
      strength: '–°–∏–ª–∞',
      dexterity: '–õ–æ–≤–∫–æ—Å—Ç—å',
      intelligence: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
      wisdom: '–ú—É–¥—Ä–æ—Å—Ç—å',
      constitution: '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ',
      charisma: '–•–∞—Ä–∏–∑–º–∞',
      hp_max: '–ú–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ',
      all_stats: '–í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
      fire_damage: '–£—Ä–æ–Ω –æ–≥–Ω–µ–º'
    };

    const sign = value > 0 ? '+' : '';
    return `${effectNames[effect] || effect}: ${sign}${value}`;
  }

  formatRequirement(req, value) {
    if (req === 'level') return `–£—Ä–æ–≤–µ–Ω—å ${value}`;
    if (req === 'class') {
      const classConfig = config.CLASSES[value];
      return `–ö–ª–∞—Å—Å: ${classConfig.name}`;
    }
    
    const statConfig = config.STATS[req];
    if (statConfig) {
      return `${statConfig.name}: ${value}`;
    }
    
    return `${req}: ${value}`;
  }
}

module.exports = Item;