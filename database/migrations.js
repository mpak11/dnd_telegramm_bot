// –°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ –ë–î

const { logDatabase } = require("../utils/logger");

class Migrator {
  constructor() {
    this.migrations = [
      {
        version: 1,
        name: "initial_data",
        up: this.migration001_initialData,
      },
      {
        version: 2,
        name: "default_items",
        up: this.migration002_defaultItems,
      },
      {
        version: 3,
        name: "default_quests",
        up: this.migration003_defaultQuests,
      },
      {
        version: 4,
        name: "level_based_quests",
        up: this.migration004_levelBasedQuests,
      },
      {
        version: 5,
        name: "character_races",
        up: this.migration005_characterRaces,
      },
      {
        version: 6,
        name: "fix_characters_unique_constraint",
        up: this.migration006_fixCharactersConstraint,
      },
      {
        version: 7,
        name: "ability_improvements_system",
        up: this.migration007_abilityImprovements,
      },
      {
        version: 8,
        name: "loot_and_trade_system",
        up: this.migration008_lootAndTrade,
      },
      {
        version: 9,
        name: "quest_history_items",
        up: this.migration009_questHistoryItems,
      },
      {
        version: 10,
        name: "enhanced_items_system",
        up: this.migration010_enhancedItemsSystem,
      },
      {
        version: 11,
        name: "seed_enhanced_items",
        up: this.migration011_seedEnhancedItems,
      },
      {
        version: 12,
        name: "enhanced_equipment_slots",
        up: this.migration012_enhancedEquipmentSlots,
      },
    ];
  }

  async migrate(db) {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await db.run(`
      CREATE TABLE IF NOT EXISTS migrations (
        version INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    const currentVersion = await this.getCurrentVersion(db);
    logDatabase(`–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ë–î: ${currentVersion}`);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    for (const migration of this.migrations) {
      if (migration.version > currentVersion) {
        logDatabase(
          `–ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é ${migration.version}: ${migration.name}`
        );

        try {
          // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
          await migration.up(db);

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
          await db.run("INSERT INTO migrations (version, name) VALUES (?, ?)", [
            migration.version,
            migration.name,
          ]);

          logDatabase(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migration.version} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞`);
        } catch (error) {
          logDatabase(
            `‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ ${migration.version}: ${error.message}`
          );
          throw error;
        }
      }
    }
  }

  async getCurrentVersion(db) {
    const row = await db.get("SELECT MAX(version) as version FROM migrations");
    return row?.version || 0;
  }

  // === –ú–ò–ì–†–ê–¶–ò–ò ===

  // –ú–∏–≥—Ä–∞—Ü–∏—è 1: –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  async migration001_initialData(db) {
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await db.run(`
      CREATE TABLE IF NOT EXISTS game_settings (
        key TEXT PRIMARY KEY,
        value TEXT NOT NULL
      )
    `);

    await db.run(`
      INSERT OR REPLACE INTO game_settings (key, value) 
      VALUES ('version', '2.0.0')
    `);
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è 2: –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
  async migration002_defaultItems(db) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    const existingItems = await db.get("SELECT COUNT(*) as count FROM items");
    if (existingItems.count > 0) {
      logDatabase("–ü—Ä–µ–¥–º–µ—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
      return;
    }

    const items = [
      // –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏
      {
        name: "–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è",
        description: "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 50 HP",
        type: "consumable",
        rarity: "common",
        effects: JSON.stringify({ hp: 50 }),
        value_gold: 50,
      },
      {
        name: "–ó–µ–ª—å–µ –º–∞–Ω—ã",
        description: "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 30 MP",
        type: "consumable",
        rarity: "common",
        effects: JSON.stringify({ mp: 30 }),
        value_gold: 40,
      },
      // –û—Ä—É–∂–∏–µ
      {
        name: "–†–∂–∞–≤—ã–π –º–µ—á",
        description: "–°—Ç–∞—Ä—ã–π, –Ω–æ –≤—Å–µ –µ—â–µ –æ—Å—Ç—Ä—ã–π",
        type: "weapon",
        rarity: "common",
        effects: JSON.stringify({ damage: 5 }),
        value_gold: 100,
      },
      {
        name: "–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á",
        description: "–ù–∞–¥–µ–∂–Ω–æ–µ –æ—Ä—É–∂–∏–µ –≤–æ–∏–Ω–∞",
        type: "weapon",
        rarity: "uncommon",
        effects: JSON.stringify({ damage: 10, strength: 1 }),
        value_gold: 500,
      },
      // –ë—Ä–æ–Ω—è
      {
        name: "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è",
        description: "–õ–µ–≥–∫–∞—è –∑–∞—â–∏—Ç–∞",
        type: "armor",
        rarity: "common",
        effects: JSON.stringify({ defense: 5 }),
        value_gold: 150,
      },
      {
        name: "–ö–æ–ª—å—á—É–≥–∞",
        description: "–ü—Ä–æ—á–Ω–∞—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞",
        type: "armor",
        rarity: "uncommon",
        effects: JSON.stringify({ defense: 10, constitution: 1 }),
        value_gold: 600,
      },
      // –†–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      {
        name: "–ü—ã–ª–∞—é—â–∏–π –º–µ—á",
        description: "–ö–ª–∏–Ω–æ–∫, –æ–±—ä—è—Ç—ã–π –≤–µ—á–Ω—ã–º –ø–ª–∞–º–µ–Ω–µ–º",
        type: "weapon",
        rarity: "rare",
        effects: JSON.stringify({ damage: 15, strength: 2, fire_damage: 5 }),
        value_gold: 2000,
      },
      // –≠–ø–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      {
        name: "–ú–∞–Ω—Ç–∏—è –∞—Ä—Ö–∏–º–∞–≥–∞",
        description: "–û–¥–µ—è–Ω–∏–µ –≤–µ–ª–∏–∫–æ–≥–æ –≤–æ–ª—à–µ–±–Ω–∏–∫–∞",
        type: "armor",
        rarity: "epic",
        effects: JSON.stringify({ defense: 8, intelligence: 3, wisdom: 2 }),
        requirements: JSON.stringify({ class: "MAGE", level: 5 }),
        value_gold: 5000,
      },
      // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)
      {
        name: "–≠–∫—Å–∫–∞–ª–∏–±—É—Ä",
        description: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—á –∫–æ—Ä–æ–ª—è",
        type: "weapon",
        rarity: "legendary",
        effects: JSON.stringify({ damage: 25, strength: 5, charisma: 3 }),
        requirements: JSON.stringify({ level: 8 }),
        value_gold: 50000,
        is_unique: 1,
      },
      {
        name: "–°–µ—Ä–¥—Ü–µ –¥—Ä–∞–∫–æ–Ω–∞",
        description: "–ü—ã–ª–∞—é—â–∏–π —Ä—É–±–∏–Ω —Å –¥—É—à–æ–π –¥—Ä–µ–≤–Ω–µ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞",
        type: "artifact",
        rarity: "legendary",
        effects: JSON.stringify({ hp_max: 50, all_stats: 2 }),
        value_gold: 100000,
        is_unique: 1,
      },
    ];

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
    for (const item of items) {
      await db.run(
        `
        INSERT INTO items (name, description, type, rarity, effects, requirements, value_gold, is_unique)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `,
        [
          item.name,
          item.description,
          item.type,
          item.rarity,
          item.effects,
          item.requirements || null,
          item.value_gold,
          item.is_unique || 0,
        ]
      );
    }

    logDatabase(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${items.length} –±–∞–∑–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è 3: –ë–∞–∑–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã
  async migration003_defaultQuests(db) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–≤–µ—Å—Ç—ã
    const existingQuests = await db.get("SELECT COUNT(*) as count FROM quests");
    if (existingQuests.count > 0) {
      logDatabase("–ö–≤–µ—Å—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
      return;
    }

    const quests = [
      // –õ–µ–≥–∫–∏–µ –∫–≤–µ—Å—Ç—ã
      {
        title: "–ö—Ä—ã—Å—ã –≤ –ø–æ–¥–≤–∞–ª–µ",
        description: "–¢—Ä–∞–∫—Ç–∏—Ä—â–∏–∫ –ø—Ä–æ—Å–∏—Ç –∏–∑–±–∞–≤–∏—Ç—å –ø–æ–¥–≤–∞–ª –æ—Ç –∫—Ä—ã—Å. –ö–∏–Ω—å—Ç–µ 1d20!",
        difficulty: "easy",
        stat_check: "strength",
        xp_reward: 50,
        gold_reward: 20,
        results: [
          {
            range: "20",
            text: "üèÜ –í—ã —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –∫–æ—Ä–æ–ª—è-–∫—Ä—ã—Å—É! –¢—Ä–∞–∫—Ç–∏—Ä—â–∏–∫ –¥–∞—Ä–∏—Ç –≤–∞–º –∏–º–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ –∏ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—É—é —Å–∫–∏–¥–∫—É!",
            success: true,
            xp_mod: 2.0,
            gold_mod: 3.0,
          },
          {
            range: "15-19",
            text: "üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ö—Ä—ã—Å—ã —Ä–∞–∑–±–µ–∂–∞–ª–∏—Å—å, –ø–æ–¥–≤–∞–ª —á–∏—Å—Ç. –¢—Ä–∞–∫—Ç–∏—Ä—â–∏–∫ –¥–æ–≤–æ–ª–µ–Ω!",
            success: true,
            xp_mod: 1.5,
            gold_mod: 1.5,
          },
          {
            range: "10-14",
            text: "‚úÖ –í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å, –Ω–æ –ø–æ–∫—É—Å–∞–Ω—ã. –ö—Ä—ã—Å—ã —É—à–ª–∏, –Ω–æ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 1d4 HP.",
            success: true,
            xp_mod: 1.0,
            gold_mod: 1.0,
            damage: "1d4",
          },
          {
            range: "5-9",
            text: "üò∞ –ö—Ä—ã—Å—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏! –í—ã —É–±–µ–∂–∞–ª–∏, –ø–æ—Ç–µ—Ä—è–≤ 1d6 HP.",
            success: false,
            xp_mod: 0.5,
            gold_mod: 0,
            damage: "1d6",
          },
          {
            range: "2-4",
            text: "üíÄ –°—Ç–∞—è –∫—Ä—ã—Å –ø–æ–≤–∞–ª–∏–ª–∞ –≤–∞—Å! –ü–æ—Ç–µ—Ä—è–Ω–æ 2d4 HP –∏ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ.",
            success: false,
            xp_mod: 0.2,
            gold_mod: 0,
            damage: "2d4",
            effects: { charisma: -1, duration: 24 },
          },
          {
            range: "1",
            text: "‚ò†Ô∏è –ö–†–´–°–ò–ù–´–ô –ö–û–†–û–õ–¨ –ü–†–û–ë–£–î–ò–õ–°–Ø! –í—ã –µ–¥–≤–∞ –≤—ã–∂–∏–ª–∏, –ø–æ—Ç–µ—Ä—è–≤ 3d6 HP. –¢–∞–≤–µ—Ä–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω!",
            success: false,
            xp_mod: 0.1,
            gold_mod: 0,
            damage: "3d6",
            effects: { all_stats: -1, duration: 48 },
          },
        ],
      },
      {
        title: "–ù–∞–ø–∞–¥–µ–Ω–∏–µ –∫—Ä–∞–∫–µ–Ω–∞",
        description:
          "–ù–∞ –≤–∞—à –∫–æ—Ä–∞–±–ª—å –Ω–∞–ø–∞–ª –º–æ—Ä—Å–∫–æ–π –º–æ–Ω—Å—Ç—Ä! –ö–∏–Ω—å—Ç–µ 1d20 –¥–ª—è –±–∏—Ç–≤—ã!",
        difficulty: "hard",
        stat_check: "dexterity",
        xp_reward: 300,
        gold_reward: 200,
        results: [
          {
            range: "20",
            text: "‚öîÔ∏è –í—ã –ø—Ä–æ–Ω–∑–∏–ª–∏ –≥–ª–∞–∑ –∫—Ä–∞–∫–µ–Ω–∞ –≥–∞—Ä–ø—É–Ω–æ–º! –ú–æ–Ω—Å—Ç—Ä –æ—Ç—Å—Ç—É–ø–∞–µ—Ç, –æ—Å—Ç–∞–≤–∏–≤ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –∂–µ–º—á—É–∂–∏–Ω—É!",
            success: true,
            xp_mod: 2.0,
            gold_mod: 5.0,
            effects: { water_breathing: true, duration: 168 },
          },
          {
            range: "15-19",
            text: "üí™ –í—ã –æ—Ç—Ä—É–±–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —â—É–ø–∞–ª–µ—Ü. –ö–æ—Ä–∞–±–ª—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –Ω–æ —Ü–µ–ª!",
            success: true,
            xp_mod: 1.5,
            gold_mod: 2.0,
          },
          {
            range: "10-14",
            text: "üó°Ô∏è –©—É–ø–∞–ª—å—Ü–∞ —Ö–ª–µ—Å—Ç–Ω—É–ª–∏ –ø–æ –ø–∞–ª—É–±–µ. –í—ã –æ—Ç–±–∏–ª–∏—Å—å, –Ω–æ —Ä–∞–Ω–µ–Ω—ã (1d8 —É—Ä–æ–Ω–∞).",
            success: true,
            xp_mod: 1.0,
            gold_mod: 1.0,
            damage: "1d8",
          },
          {
            range: "5-9",
            text: "üí´ –ö—Ä–∞–∫–µ–Ω —É—Ç–∞—â–∏–ª –≤–∞—Å –ø–æ–¥ –≤–æ–¥—É! –í—ã –≤—ã–±—Ä–∞–ª–∏—Å—å, –Ω–æ –µ–¥–≤–∞ –Ω–µ —É—Ç–æ–Ω—É–ª–∏ (2d6 —É—Ä–æ–Ω–∞).",
            success: false,
            xp_mod: 0.5,
            gold_mod: 0,
            damage: "2d6",
            effects: { constitution: -2, duration: 72 },
          },
          {
            range: "2-4",
            text: "‚õìÔ∏è –©—É–ø–∞–ª—å—Ü–∞ —Å–ª–æ–º–∞–ª–∏ –≤–∞–º —Ä–µ–±—Ä–∞! 3d6 —É—Ä–æ–Ω–∞ –∏ -2 –∫ –õ–æ–≤–∫–æ—Å—Ç–∏ –Ω–∞ 3 –¥–Ω—è.",
            success: false,
            xp_mod: 0.2,
            gold_mod: 0,
            damage: "3d6",
            effects: { dexterity: -2, duration: 72 },
          },
          {
            range: "1",
            text: "üíÄ –ö–†–ê–ö–ï–ù –ü–û–ì–õ–û–¢–ò–õ –í–ê–°! –í—ã —á—É–¥–æ–º –≤—ã–∂–∏–ª–∏ –≤ –µ–≥–æ –∂–µ–ª—É–¥–∫–µ, –ø–æ—Ç–µ—Ä—è–≤ 4d8 HP –∏ –≤—Å—ë —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ!",
            success: false,
            xp_mod: 0.1,
            gold_mod: -1.0, // —Ç–µ—Ä—è–µ—Ç –≤—Å—ë –∑–æ–ª–æ—Ç–æ
            damage: "4d8",
            effects: { all_stats: -3, duration: 168 },
          },
        ],
      },
      {
        title: "–õ–æ–≥–æ–≤–æ –¥—Ä–∞–∫–æ–Ω–∞",
        description:
          "–í—ã –Ω–∞—à–ª–∏ —Å–ø—è—â–µ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞ –∏ –µ–≥–æ —Å–æ–∫—Ä–æ–≤–∏—â–∞! –ö–∏–Ω—å—Ç–µ 1d20 –Ω–∞ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å!",
        difficulty: "legendary",
        stat_check: "dexterity",
        xp_reward: 1000,
        gold_reward: 1000,
        results: [
          {
            range: "20",
            text: "üèÜ –í—ã —É–∫—Ä–∞–ª–∏ —è–π—Ü–æ –¥—Ä–∞–∫–æ–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü-–¥—Ä–∞–∫–æ–Ω—á–∏–∫!",
            success: true,
            xp_mod: 3.0,
            gold_mod: 10.0,
            effects: { dragon_pet: true, charisma: 5, duration: -1 },
          },
          {
            range: "15-19",
            text: "üíé –í—ã –Ω–∞–±–∏–ª–∏ –∫–∞—Ä–º–∞–Ω—ã –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –∏ —Ç–∏—Ö–æ —É—à–ª–∏!",
            success: true,
            xp_mod: 2.0,
            gold_mod: 5.0,
          },
          {
            range: "10-14",
            text: "üí∞ –°—Ö–≤–∞—Ç–∏–ª–∏ –∑–æ–ª–æ—Ç–æ, –Ω–æ –¥—Ä–∞–∫–æ–Ω –∑–∞—à–µ–≤–µ–ª–∏–ª—Å—è. –ü—Ä–∏—à–ª–æ—Å—å –±–µ–∂–∞—Ç—å!",
            success: true,
            xp_mod: 1.5,
            gold_mod: 2.0,
            effects: { speed: 2, duration: 24 },
          },
          {
            range: "5-9",
            text: "üî• –î—Ä–∞–∫–æ–Ω –ø—Ä–æ—Å–Ω—É–ª—Å—è! –í—ã —É–±–µ–∂–∞–ª–∏, –æ–±–æ–∂–∂–µ–Ω–Ω—ã–µ (2d10 –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞).",
            success: false,
            xp_mod: 0.5,
            gold_mod: 0.5,
            damage: "2d10",
            effects: { fire_vulnerability: true, duration: 72 },
          },
          {
            range: "2-4",
            text: "üò± –î—Ä–∞–∫–æ–Ω –≤ —è—Ä–æ—Å—Ç–∏! –ü—Ä–µ—Å–ª–µ–¥–æ–≤–∞–ª –≤–∞—Å –¥–æ –≥–æ—Ä–æ–¥–∞ (3d10 —É—Ä–æ–Ω–∞ –∏ –ø—Ä–æ–∫–ª—è—Ç–∏–µ).",
            success: false,
            xp_mod: 0.2,
            gold_mod: 0,
            damage: "3d10",
            effects: { cursed: true, all_stats: -2, duration: 168 },
          },
          {
            range: "1",
            text: "‚ò†Ô∏è –í–´ –†–ê–ó–ë–£–î–ò–õ–ò –î–†–ï–í–ù–ï–ì–û! –ï–¥–≤–∞ –≤—ã–∂–∏–ª–∏, –ø–æ—Ç–µ—Ä—è–≤ 5d10 HP. –î—Ä–∞–∫–æ–Ω –æ–±—ä—è–≤–∏–ª –≤–∞—Å –ª–∏—á–Ω—ã–º –≤—Ä–∞–≥–æ–º!",
            success: false,
            xp_mod: 0.1,
            gold_mod: 0,
            damage: "5d10",
            effects: { dragon_enemy: true, all_stats: -5, duration: -1 },
          },
        ],
      },
    ];

    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–≤–µ—Å—Ç—ã –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for (const quest of quests) {
      const { id } = await db.run(
        `
        INSERT INTO quests (title, description, difficulty, stat_check, xp_reward, gold_reward)
        VALUES (?, ?, ?, ?, ?, ?)
      `,
        [
          quest.title,
          quest.description,
          quest.difficulty,
          quest.stat_check,
          quest.xp_reward,
          quest.gold_reward,
        ]
      );

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (const result of quest.results) {
        await db.run(
          `
          INSERT INTO quest_results (
            quest_id, roll_range, result_text, is_success,
            xp_modifier, gold_modifier, effects, damage
          )
          VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        `,
          [
            id,
            result.range,
            result.text,
            result.success ? 1 : 0,
            result.xp_mod || 1.0,
            result.gold_mod || 1.0,
            result.effects ? JSON.stringify(result.effects) : null,
            result.damage || null,
          ]
        );
      }
    }

    logDatabase(
      `–î–æ–±–∞–≤–ª–µ–Ω–æ ${quests.length} –±–∞–∑–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏`
    );
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è 4: –ö–≤–µ—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
  async migration004_levelBasedQuests(db) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ min_level
    const tableInfo = await db.all("PRAGMA table_info(quests)");
    const hasMinLevel = tableInfo.some((col) => col.name === "min_level");

    if (!hasMinLevel) {
      await db.run("ALTER TABLE quests ADD COLUMN min_level INTEGER DEFAULT 1");
    }

    const {
      beginnerQuests,
      midGameQuests,
      epicQuests,
    } = require("./migrations/epicQuests");

    const allQuests = [...beginnerQuests, ...midGameQuests, ...epicQuests];

    for (const quest of allQuests) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–≤–µ—Å—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      const existing = await db.get("SELECT id FROM quests WHERE title = ?", [
        quest.title,
      ]);
      if (existing) {
        logDatabase(`–ö–≤–µ—Å—Ç "${quest.title}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }

      const { id } = await db.run(
        `
        INSERT INTO quests (title, description, difficulty, stat_check, min_level, xp_reward, gold_reward)
        VALUES (?, ?, ?, ?, ?, ?, ?)
      `,
        [
          quest.title,
          quest.description,
          quest.difficulty,
          quest.stat_check,
          quest.min_level,
          quest.xp_reward,
          quest.gold_reward,
        ]
      );

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (const result of quest.results) {
        await db.run(
          `
          INSERT INTO quest_results (
            quest_id, roll_range, result_text, is_success,
            xp_modifier, gold_modifier, effects, damage
          )
          VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        `,
          [
            id,
            result.range,
            result.text,
            result.success ? 1 : 0,
            result.xp_modifier || 1.0,
            result.gold_modifier || 1.0,
            result.effects ? JSON.stringify(result.effects) : null,
            result.damage || null,
          ]
        );
      }
    }

    logDatabase(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${allQuests.length} –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π`);
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  async migration005_characterRaces(db) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ race
    const tableInfo = await db.all("PRAGMA table_info(characters)");
    const hasRace = tableInfo.some((col) => col.name === "race");

    if (!hasRace) {
      await db.run(
        'ALTER TABLE characters ADD COLUMN race TEXT DEFAULT "human"'
      );
      logDatabase("–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ race –≤ —Ç–∞–±–ª–∏—Ü—É characters");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä–∞—Å–æ–≤—ã—Ö –±–æ–Ω—É—Å–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º)
    await db.run(`
      CREATE TABLE IF NOT EXISTS race_bonuses (
        race TEXT PRIMARY KEY,
        strength_bonus INTEGER DEFAULT 0,
        dexterity_bonus INTEGER DEFAULT 0,
        intelligence_bonus INTEGER DEFAULT 0,
        wisdom_bonus INTEGER DEFAULT 0,
        constitution_bonus INTEGER DEFAULT 0,
        charisma_bonus INTEGER DEFAULT 0,
        special_abilities TEXT
      )
    `);

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å—ã
    const races = [
      {
        race: "human",
        str: 1,
        dex: 1,
        int: 1,
        wis: 1,
        con: 1,
        cha: 1,
        abilities: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å",
      },
      {
        race: "elf",
        str: 0,
        dex: 2,
        int: 1,
        wis: 0,
        con: 0,
        cha: 0,
        abilities: "–ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ, –û—Å—Ç—Ä—ã–π —Å–ª—É—Ö",
      },
      {
        race: "dwarf",
        str: 2,
        dex: 0,
        int: 0,
        wis: 0,
        con: 2,
        cha: 0,
        abilities: "–ö–∞–º–µ–Ω–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
      },
      {
        race: "halfling",
        str: 0,
        dex: 2,
        int: 0,
        wis: 0,
        con: 0,
        cha: 1,
        abilities: "–£–¥–∞—á–∞ –ø–æ–ª—É—Ä–æ—Å–ª–∏–∫–∞",
      },
    ];

    for (const r of races) {
      await db.run(
        `
        INSERT OR IGNORE INTO race_bonuses (
          race, strength_bonus, dexterity_bonus, intelligence_bonus,
          wisdom_bonus, constitution_bonus, charisma_bonus, special_abilities
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `,
        [r.race, r.str, r.dex, r.int, r.wis, r.con, r.cha, r.abilities]
      );
    }

    logDatabase("–î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞—Å–æ–≤—ã–µ –±–æ–Ω—É—Å—ã");
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è 6: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  async migration006_fixCharactersConstraint(db) {
    // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ NULL –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ 1
    await db.run(`
      UPDATE characters 
      SET is_active = 1 
      WHERE is_active IS NULL
    `);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å
    const indexes = await db.all(`
      SELECT name FROM sqlite_master 
      WHERE type = 'index' AND tbl_name = 'characters'
    `);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –µ—Å—Ç—å
    if (indexes.some((idx) => idx.name === "idx_characters_user_chat")) {
      await db.run("DROP INDEX idx_characters_user_chat");
      logDatabase("–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å idx_characters_user_chat");
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Å—Ç–∏—á–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∏–º–µ—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
    await db.run(`
      CREATE UNIQUE INDEX IF NOT EXISTS idx_active_character 
      ON characters(user_id, chat_id) 
      WHERE is_active = 1
    `);

    logDatabase(
      "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Å—Ç–∏—á–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"
    );
  }

  async migration007_abilityImprovements(db) {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ ability_points –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const columns = await db.all("PRAGMA table_info(characters)");
    const hasAbilityPoints = columns.some(
      (col) => col.name === "ability_points"
    );

    if (!hasAbilityPoints) {
      await db.run(
        "ALTER TABLE characters ADD COLUMN ability_points INTEGER DEFAULT 0"
      );
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ ability_points");

      // –î–∞–µ–º –æ—á–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º 4+ —É—Ä–æ–≤–Ω—è
      await db.run(`
      UPDATE characters 
      SET ability_points = 
        CASE 
          WHEN level >= 8 THEN 4
          WHEN level >= 4 THEN 2
          ELSE 0
        END
      WHERE is_active = 1
    `);
      logDatabase("‚úÖ –í—ã–¥–∞–Ω—ã –æ—á–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º");
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π
    await db.run(`
    CREATE TABLE IF NOT EXISTS ability_improvements (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      character_id INTEGER NOT NULL,
      level INTEGER NOT NULL,
      stat_name TEXT NOT NULL,
      improvement INTEGER NOT NULL,
      improved_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (character_id) REFERENCES characters(id)
    )
  `);
    logDatabase("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ ability_improvements");
  }

  async migration008_lootAndTrade(db) {
    // –¢–∞–±–ª–∏—Ü–∞ —Å—É–Ω–¥—É–∫–æ–≤ —Å –ª—É—Ç–æ–º
    await db.run(`
    CREATE TABLE IF NOT EXISTS loot_chests (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      chat_id INTEGER NOT NULL,
      creator_id INTEGER,
      gold INTEGER DEFAULT 0,
      items TEXT, -- JSON –º–∞—Å—Å–∏–≤ ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      difficulty TEXT DEFAULT 'medium',
      claimed INTEGER DEFAULT 0,
      claimed_by INTEGER,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      expires_at TIMESTAMP,
      FOREIGN KEY (creator_id) REFERENCES characters(id),
      FOREIGN KEY (claimed_by) REFERENCES characters(id)
    )
  `);
    logDatabase("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ loot_chests");

    // –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤
    await db.run(`
    CREATE TABLE IF NOT EXISTS trade_history (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      from_character_id INTEGER NOT NULL,
      to_character_id INTEGER NOT NULL,
      from_items TEXT, -- JSON –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      from_gold INTEGER DEFAULT 0,
      to_items TEXT, -- JSON –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      to_gold INTEGER DEFAULT 0,
      completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (from_character_id) REFERENCES characters(id),
      FOREIGN KEY (to_character_id) REFERENCES characters(id)
    )
  `);
    logDatabase("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ trade_history");

    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–≥—Ä—É
    const newItems = [
      // –ó–µ–ª—å—è –∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏
      {
        name: "–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è",
        description: "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 100 HP",
        type: "consumable",
        rarity: "uncommon",
        effects: { hp: 100 },
        value: 150,
      },
      {
        name: "–ó–µ–ª—å–µ –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏",
        description: "–î–µ–ª–∞–µ—Ç –Ω–µ–≤–∏–¥–∏–º—ã–º –Ω–∞ 1 —á–∞—Å",
        type: "consumable",
        rarity: "rare",
        effects: { invisibility: 60 },
        value: 500,
      },
      {
        name: "–°–≤–∏—Ç–æ–∫ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏",
        description: "–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ",
        type: "consumable",
        rarity: "rare",
        effects: { teleport: true },
        value: 1000,
      },

      // –û–±—ã—á–Ω–æ–µ –æ—Ä—É–∂–∏–µ
      {
        name: "–ñ–µ–ª–µ–∑–Ω—ã–π —Ç–æ–ø–æ—Ä",
        description: "–ü—Ä–æ—Å—Ç–æ–µ –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ—Ä—É–∂–∏–µ",
        type: "weapon",
        rarity: "common",
        effects: { damage: 6 },
        value: 120,
      },
      {
        name: "–î–ª–∏–Ω–Ω—ã–π –ª—É–∫",
        description: "–î–ª—è –¥–∞–ª—å–Ω–∏—Ö –∞—Ç–∞–∫",
        type: "weapon",
        rarity: "common",
        effects: { damage: 5, dexterity: 1 },
        value: 150,
      },

      // –ù–µ–æ–±—ã—á–Ω–æ–µ –æ—Ä—É–∂–∏–µ
      {
        name: "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∫–ª–∏–Ω–æ–∫",
        description: "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø—Ä–æ—Ç–∏–≤ –Ω–µ–∂–∏—Ç–∏",
        type: "weapon",
        rarity: "uncommon",
        effects: { damage: 8, holy_damage: 3 },
        value: 400,
      },
      {
        name: "–ü–æ—Å–æ—Ö –º–∞–≥–∞",
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫—É—é —Å–∏–ª—É",
        type: "weapon",
        rarity: "uncommon",
        effects: { damage: 4, intelligence: 2, wisdom: 1 },
        requirements: { class: "MAGE" },
        value: 600,
      },

      // –†–µ–¥–∫–æ–µ –æ—Ä—É–∂–∏–µ
      {
        name: "–ö–ª–∏–Ω–æ–∫ –±—É—Ä–∏",
        description: "–ù–∞–Ω–æ—Å–∏—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω",
        type: "weapon",
        rarity: "rare",
        effects: { damage: 12, lightning_damage: 5, dexterity: 2 },
        value: 1500,
      },
      {
        name: "–ú–æ–ª–æ—Ç –≥—Ä–æ–º–∞",
        description: "–û–≥–ª—É—à–∞–µ—Ç –≤—Ä–∞–≥–æ–≤",
        type: "weapon",
        rarity: "rare",
        effects: { damage: 15, strength: 3, stun_chance: 0.2 },
        requirements: { strength: 16 },
        value: 2000,
      },

      // –ë—Ä–æ–Ω—è
      {
        name: "–°—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å–ø–µ—Ö–∏",
        description: "–¢—è–∂–µ–ª–∞—è –∑–∞—â–∏—Ç–∞",
        type: "armor",
        rarity: "uncommon",
        effects: { defense: 12, constitution: 1 },
        requirements: { strength: 14 },
        value: 800,
      },
      {
        name: "–ú–∞–Ω—Ç–∏—è —Ç–µ–Ω–µ–π",
        description: "–õ–µ–≥–∫–∞—è –±—Ä–æ–Ω—è –¥–ª—è —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏",
        type: "armor",
        rarity: "rare",
        effects: { defense: 8, dexterity: 3, stealth: 5 },
        requirements: { class: "ROGUE" },
        value: 1800,
      },

      // –≠–ø–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      {
        name: "–î–æ—Å–ø–µ—Ö–∏ –¥—Ä–∞–∫–æ–Ω–∞",
        description: "–í—ã–∫–æ–≤–∞–Ω—ã –∏–∑ –¥—Ä–∞–∫–æ–Ω—å–µ–π —á–µ—à—É–∏",
        type: "armor",
        rarity: "epic",
        effects: { defense: 20, all_stats: 1, fire_resistance: 0.5 },
        requirements: { level: 7 },
        value: 8000,
      },
      {
        name: "–°–∫–∏–ø–µ—Ç—Ä –≤–ª–∞—Å—Ç–µ–ª–∏–Ω–∞",
        description: "–°–∏–º–≤–æ–ª –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –≤–ª–∞—Å—Ç–∏",
        type: "weapon",
        rarity: "epic",
        effects: { damage: 18, charisma: 5, wisdom: 3 },
        requirements: { level: 6 },
        value: 10000,
      },

      // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      {
        name: "–ö–æ—Ä–æ–Ω–∞ –≤–µ—á–Ω–æ—Å—Ç–∏",
        description: "–î–∞—Ä—É–µ—Ç –±–µ—Å—Å–º–µ—Ä—Ç–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É",
        type: "artifact",
        rarity: "legendary",
        effects: { hp_max: 100, hp_regen: 10, all_stats: 3 },
        requirements: { level: 9 },
        value: 50000,
        is_unique: 1,
      },
      {
        name: "–ü–µ—Ä—á–∞—Ç–∫–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏",
        description: "–°–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–ª—É —à–µ—Å—Ç–∏ –∫–∞–º–Ω–µ–π",
        type: "artifact",
        rarity: "legendary",
        effects: { all_stats: 5, damage: 50, reality_warp: true },
        requirements: { level: 10 },
        value: 100000,
        is_unique: 1,
      },

      // –†–∞–∑–Ω–æ–µ
      {
        name: "–°—á–∞—Å—Ç–ª–∏–≤–∞—è –º–æ–Ω–µ—Ç–∫–∞",
        description: "–ü—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–∞—á—É",
        type: "misc",
        rarity: "uncommon",
        effects: { luck: 1 },
        value: 200,
      },
      {
        name: "–ö–∞—Ä—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â",
        description: "–í–µ–¥–µ—Ç –∫ —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–º –±–æ–≥–∞—Ç—Å—Ç–≤–∞–º",
        type: "misc",
        rarity: "rare",
        effects: { treasure_map: true },
        value: 1000,
      },
      {
        name: "–û—Å–∫–æ–ª–æ–∫ –¥—É—à–∏",
        description: "–§—Ä–∞–≥–º–µ–Ω—Ç –¥—Ä–µ–≤–Ω–µ–π –º–∞–≥–∏–∏",
        type: "misc",
        rarity: "epic",
        effects: { soul_fragment: true },
        value: 5000,
      },
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    for (const item of newItems) {
      const existing = await db.get("SELECT id FROM items WHERE name = ?", [
        item.name,
      ]);
      if (!existing) {
        await db.run(
          `
        INSERT INTO items (name, description, type, rarity, effects, requirements, value_gold, is_unique)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `,
          [
            item.name,
            item.description,
            item.type,
            item.rarity,
            JSON.stringify(item.effects),
            item.requirements ? JSON.stringify(item.requirements) : null,
            item.value,
            item.is_unique || 0,
          ]
        );
      }
    }
    logDatabase(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newItems.length} –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);
  }
  async migration009_questHistoryItems(db) {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–æ–≤
    const columns = await db.all("PRAGMA table_info(quest_history)");
    const hasItemsGained = columns.some((col) => col.name === "items_gained");

    if (!hasItemsGained) {
      await db.run("ALTER TABLE quest_history ADD COLUMN items_gained TEXT");
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ items_gained –≤ quest_history");
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    await db.run(`
    CREATE INDEX IF NOT EXISTS idx_unique_items 
    ON items(is_unique)
    WHERE is_unique = 1
  `);
    logDatabase("‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤");

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ equipped –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const invColumns = await db.all("PRAGMA table_info(inventory)");
    const hasEquipped = invColumns.some((col) => col.name === "equipped");

    if (!hasEquipped) {
      await db.run(
        "ALTER TABLE inventory ADD COLUMN equipped INTEGER DEFAULT 0"
      );
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ equipped –≤ inventory");
    }
  }
  async migration010_enhancedItemsSystem(db) {
    logDatabase("üéØ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤...");

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É items
    const columns = await db.all("PRAGMA table_info(items)");
    const columnNames = columns.map((col) => col.name);

    // –î–æ–±–∞–≤–ª—è–µ–º slot_type (–∫—É–¥–∞ —ç–∫–∏–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç)
    if (!columnNames.includes("slot_type")) {
      await db.run(`ALTER TABLE items ADD COLUMN slot_type TEXT`);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ slot_type");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º weight (–≤–µ—Å –ø—Ä–µ–¥–º–µ—Ç–∞)
    if (!columnNames.includes("weight")) {
      await db.run(`ALTER TABLE items ADD COLUMN weight REAL DEFAULT 0`);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ weight");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º is_two_handed (–¥–ª—è –æ—Ä—É–∂–∏—è)
    if (!columnNames.includes("is_two_handed")) {
      await db.run(
        `ALTER TABLE items ADD COLUMN is_two_handed INTEGER DEFAULT 0`
      );
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ is_two_handed");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º weapon_type (—Ç–∏–ø –æ—Ä—É–∂–∏—è: slash, pierce, blunt, ranged, magic)
    if (!columnNames.includes("weapon_type")) {
      await db.run(`ALTER TABLE items ADD COLUMN weapon_type TEXT`);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ weapon_type");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º armor_type (—Ç–∏–ø –±—Ä–æ–Ω–∏: light, medium, heavy)
    if (!columnNames.includes("armor_type")) {
      await db.run(`ALTER TABLE items ADD COLUMN armor_type TEXT`);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ armor_type");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º stats_bonus (–±–æ–Ω—É—Å—ã –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º)
    if (!columnNames.includes("stats_bonus")) {
      await db.run(`ALTER TABLE items ADD COLUMN stats_bonus TEXT`);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ stats_bonus");
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
    await db.run(`
    CREATE TABLE IF NOT EXISTS merchants (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      description TEXT,
      chat_id INTEGER,
      location TEXT,
      is_active INTEGER DEFAULT 1,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);
    logDatabase("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ merchants");

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
    await db.run(`
    CREATE TABLE IF NOT EXISTS merchant_inventory (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      merchant_id INTEGER NOT NULL,
      item_id INTEGER NOT NULL,
      quantity INTEGER DEFAULT -1, -- -1 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      price_modifier REAL DEFAULT 1.0, -- –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω—ã
      FOREIGN KEY (merchant_id) REFERENCES merchants(id),
      FOREIGN KEY (item_id) REFERENCES items(id),
      UNIQUE(merchant_id, item_id)
    )
  `);
    logDatabase("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ merchant_inventory");

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤—Ü–∞
    const existingMerchant = await db.get(
      "SELECT id FROM merchants WHERE id = 1"
    );
    if (!existingMerchant) {
      await db.run(`
      INSERT INTO merchants (id, name, description, location)
      VALUES (1, '–ì–∞—Ä—Ä–µ—Ç –¢–æ—Ä–≥–æ–≤–µ—Ü', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü —Å –±–∞–∑–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏', '–¢–∞–≤–µ—Ä–Ω–∞')
    `);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü");
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É inventory –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ equipped –ø–æ —Å–ª–æ—Ç–∞–º
    if (!columnNames.includes("equipped_slot")) {
      await db.run(`ALTER TABLE inventory ADD COLUMN equipped_slot TEXT`);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ equipped_slot –≤ inventory");
    }

    logDatabase("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
  }
  async migration011_seedEnhancedItems(db) {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é seedItems
    const seedItems = require('./seeders/items');

    // –í—ã–∑—ã–≤–∞–µ–º –µ—ë
    await seedItems();

    logDatabase("‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ —Å–∏–¥–µ—Ä");
  }
  async migration012_enhancedEquipmentSlots(db) {
    logDatabase("üéØ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏...");

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ª–æ—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    await db.run(`
    CREATE TABLE IF NOT EXISTS character_equipment (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      character_id INTEGER NOT NULL,
      slot_name TEXT NOT NULL,
      item_id INTEGER,
      FOREIGN KEY (character_id) REFERENCES characters(id),
      FOREIGN KEY (item_id) REFERENCES items(id),
      UNIQUE(character_id, slot_name)
    )
  `);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    await db.run(`
    CREATE INDEX IF NOT EXISTS idx_character_equipment 
    ON character_equipment(character_id)
  `);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    await db.run(`
    CREATE TABLE IF NOT EXISTS item_statistics (
      item_id INTEGER PRIMARY KEY,
      times_bought INTEGER DEFAULT 0,
      times_sold INTEGER DEFAULT 0,
      times_equipped INTEGER DEFAULT 0,
      times_dropped INTEGER DEFAULT 0,
      times_crafted INTEGER DEFAULT 0,
      FOREIGN KEY (item_id) REFERENCES items(id)
    )
  `);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∫—Ä–∞—Ñ—Ç–∏–Ω–≥–∞
    await db.run(`
    CREATE TABLE IF NOT EXISTS crafting_recipes (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL UNIQUE,
      description TEXT,
      result_item_id INTEGER,
      required_level INTEGER DEFAULT 1,
      required_gold INTEGER DEFAULT 0,
      materials TEXT NOT NULL, -- JSON –º–∞—Å—Å–∏–≤ {item_id, quantity}
      tools_required TEXT, -- JSON –º–∞—Å—Å–∏–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      success_rate REAL DEFAULT 1.0,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (result_item_id) REFERENCES items(id)
    )
  `);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Å —Ç–æ—Ä–≥–æ–≤—Ü–∞–º–∏
    await db.run(`
    CREATE TABLE IF NOT EXISTS merchant_reputation (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      character_id INTEGER NOT NULL,
      merchant_id INTEGER NOT NULL,
      reputation INTEGER DEFAULT 0,
      total_spent INTEGER DEFAULT 0,
      total_sold INTEGER DEFAULT 0,
      last_interaction TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      special_flags TEXT, -- JSON –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–æ–±—ã—Ç–∏–π
      FOREIGN KEY (character_id) REFERENCES characters(id),
      FOREIGN KEY (merchant_id) REFERENCES merchants(id),
      UNIQUE(character_id, merchant_id)
    )
  `);

    logDatabase("‚úÖ –ù–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!");
  }
}

module.exports = new Migrator();
