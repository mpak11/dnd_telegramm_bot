const BaseMigration = require("../migration-system/BaseMigration");
const { logDatabase } = require("../../utils/logger");

class EnhancedItemsSystemMigration extends BaseMigration {
  constructor() {
    super(10, "enhanced_items_system");
  }

  async up(db) {
    logDatabase("üéØ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤...");

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É items
    const columns = await db.all("PRAGMA table_info(items)");
    const columnNames = columns.map((col) => col.name);

    // –î–æ–±–∞–≤–ª—è–µ–º slot_type (–∫—É–¥–∞ —ç–∫–∏–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç)
    if (!columnNames.includes("slot_type")) {
      await db.run(`ALTER TABLE items ADD COLUMN slot_type TEXT`);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ slot_type");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º weight (–≤–µ—Å –ø—Ä–µ–¥–º–µ—Ç–∞)
    if (!columnNames.includes("weight")) {
      await db.run(`ALTER TABLE items ADD COLUMN weight REAL DEFAULT 0`);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ weight");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º is_two_handed (–¥–ª—è –æ—Ä—É–∂–∏—è)
    if (!columnNames.includes("is_two_handed")) {
      await db.run(`ALTER TABLE items ADD COLUMN is_two_handed INTEGER DEFAULT 0`);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ is_two_handed");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º weapon_type (—Ç–∏–ø –æ—Ä—É–∂–∏—è: slash, pierce, blunt, ranged, magic)
    if (!columnNames.includes("weapon_type")) {
      await db.run(`ALTER TABLE items ADD COLUMN weapon_type TEXT`);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ weapon_type");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º armor_type (—Ç–∏–ø –±—Ä–æ–Ω–∏: light, medium, heavy)
    if (!columnNames.includes("armor_type")) {
      await db.run(`ALTER TABLE items ADD COLUMN armor_type TEXT`);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ armor_type");
    }

    // –î–æ–±–∞–≤–ª—è–µ–º stats_bonus (–±–æ–Ω—É—Å—ã –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º)
    if (!columnNames.includes("stats_bonus")) {
      await db.run(`ALTER TABLE items ADD COLUMN stats_bonus TEXT`);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ stats_bonus");
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
    await db.run(`
      CREATE TABLE IF NOT EXISTS merchants (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT,
        chat_id INTEGER,
        location TEXT,
        is_active INTEGER DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    logDatabase("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ merchants");

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
    await db.run(`
      CREATE TABLE IF NOT EXISTS merchant_inventory (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        merchant_id INTEGER NOT NULL,
        item_id INTEGER NOT NULL,
        quantity INTEGER DEFAULT -1, -- -1 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        price_modifier REAL DEFAULT 1.0, -- –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω—ã
        FOREIGN KEY (merchant_id) REFERENCES merchants(id),
        FOREIGN KEY (item_id) REFERENCES items(id),
        UNIQUE(merchant_id, item_id)
      )
    `);
    logDatabase("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ merchant_inventory");

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤—Ü–∞
    const existingMerchant = await db.get("SELECT id FROM merchants WHERE id = 1");
    if (!existingMerchant) {
      await db.run(`
        INSERT INTO merchants (id, name, description, location)
        VALUES (1, '–ì–∞—Ä—Ä–µ—Ç –¢–æ—Ä–≥–æ–≤–µ—Ü', '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü —Å –±–∞–∑–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏', '–¢–∞–≤–µ—Ä–Ω–∞')
      `);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü");
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É inventory –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ equipped –ø–æ —Å–ª–æ—Ç–∞–º
    const invColumns = await db.all("PRAGMA table_info(inventory)");
    const hasEquippedSlot = invColumns.some((col) => col.name === "equipped_slot");
    
    if (!hasEquippedSlot) {
      await db.run(`ALTER TABLE inventory ADD COLUMN equipped_slot TEXT`);
      logDatabase("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ equipped_slot –≤ inventory");
    }

    logDatabase("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
  }
}

module.exports = new EnhancedItemsSystemMigration();